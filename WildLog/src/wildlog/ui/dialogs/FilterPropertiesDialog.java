package wildlog.ui.dialogs;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.text.JTextComponent;
import org.apache.logging.log4j.Level;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.INaturalistLinkedData;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.adhoc.FilterProperties;
import wildlog.data.dataobjects.interfaces.DataObjectWithWildLogFile;
import wildlog.data.enums.ActiveTimeSpesific;
import wildlog.data.enums.Age;
import wildlog.data.enums.Certainty;
import wildlog.data.enums.ElementType;
import wildlog.data.enums.GPSAccuracy;
import wildlog.data.enums.LifeStatus;
import wildlog.data.enums.Moonlight;
import wildlog.data.enums.Sex;
import wildlog.data.enums.SightingEvidence;
import wildlog.data.enums.TimeAccuracy;
import wildlog.data.enums.VisitType;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.CtrlClickSelectionModel;
import wildlog.ui.helpers.SpinnerFixer;
import wildlog.ui.helpers.WLOptionPane;
import wildlog.ui.reports.utils.UtilsReports;
import wildlog.ui.utils.UtilsTime;
import wildlog.ui.utils.UtilsUI;


public class FilterPropertiesDialog<T extends DataObjectWithWildLogFile> extends JDialog {
    private boolean selectionMade = false;
    private FilterProperties filterProperties;

    
    public FilterPropertiesDialog(JFrame inParent, List<T> inLstOriginalData, FilterProperties inFilterProperties) {
        super(inParent);
        WildLogApp.LOGGER.log(Level.INFO, "[FilterPropertiesDialog]");
        initComponents();
        filterProperties = inFilterProperties;
        // Setup the escape key
        final FilterPropertiesDialog<T> thisHandler = this;
        thisHandler.getRootPane().registerKeyboardAction(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        thisHandler.setSelectionMade(false);
                        thisHandler.setVisible(false);
                        thisHandler.dispose();
                    }
                },
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_IN_FOCUSED_WINDOW);
        // Position the dialog
        UtilsDialog.setDialogToCenter(inParent, thisHandler);
        UtilsDialog.addModalBackgroundPanel(inParent, thisHandler);
        UtilsDialog.addModalBackgroundPanel(this, null);
        // Spinner stuff
        SpinnerFixer.configureSpinners(spnMoonphase);
        SpinnerFixer.configureSpinners(spnNumberOfElements);
        SpinnerFixer.configureSpinners(spnDurationMinutes);
        SpinnerFixer.configureSpinners(spnDurationSeconds);
        // Add clipboard
        UtilsUI.attachClipboardPopup(txaSightingIDs);
        UtilsUI.attachClipboardPopup(txaTag);
        UtilsUI.attachClipboardPopup((JTextComponent)spnMoonphase.getEditor().getComponent(0));
        UtilsUI.attachClipboardPopup((JTextComponent)spnStartTime.getEditor().getComponent(0));
        UtilsUI.attachClipboardPopup((JTextComponent)spnEndTime.getEditor().getComponent(0));
        UtilsUI.attachClipboardPopup((JTextComponent)spnNumberOfElements.getEditor().getComponent(0));
        UtilsUI.attachClipboardPopup((JTextComponent)spnDurationMinutes.getEditor().getComponent(0));
        UtilsUI.attachClipboardPopup((JTextComponent)spnDurationSeconds.getEditor().getComponent(0));
        // Setup the selected values
        if (filterProperties == null) {
            filterProperties = new FilterProperties();
            setDefaultValues(false, filterProperties);
        }
        populateToUI(filterProperties);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupIDs = new javax.swing.ButtonGroup();
        btnSelect = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        txaSightingIDs = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        rdbInclude = new javax.swing.JRadioButton();
        rdbExclude = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        dtpStartDate = new org.jdesktop.swingx.JXDatePicker();
        dtpEndDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        spnStartTime = new javax.swing.JSpinner();
        spnEndTime = new javax.swing.JSpinner();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        lsbMonths = new javax.swing.JList();
        jLabel28 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        lsbCertainty = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        lsbGPSAccuracy = new javax.swing.JList();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        lsbTimeAccuracy = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsbEvidence = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsbLifeStatus = new javax.swing.JList();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsbVisitType = new javax.swing.JList();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsbElementType = new javax.swing.JList();
        jPanel6 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        lsbTimeOfDay = new javax.swing.JList();
        spnMoonphase = new javax.swing.JSpinner();
        jScrollPane9 = new javax.swing.JScrollPane();
        lsbMoonlight = new javax.swing.JList();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lblTimeOfDayInfo = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        chkMoonlightMore = new javax.swing.JCheckBox();
        chkMoonlightLess = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaTag = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        spnNumberOfElements = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsbSex = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsbAge = new javax.swing.JList();
        jLabel13 = new javax.swing.JLabel();
        chkIndividualsLess = new javax.swing.JCheckBox();
        chkIndividualsMore = new javax.swing.JCheckBox();
        chkIncludeEmptyTags = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        spnDurationMinutes = new javax.swing.JSpinner();
        chkDurationLess = new javax.swing.JCheckBox();
        chkDurationMore = new javax.swing.JCheckBox();
        spnDurationSeconds = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        chkINaturalistUploaded = new javax.swing.JCheckBox();
        chkINaturalistNotUploaded = new javax.swing.JCheckBox();
        btnTemplates = new javax.swing.JButton();
        btnSelectAll = new javax.swing.JButton();
        btnClearAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Filter Properties");
        setIconImage(new ImageIcon(WildLogApp.getInstance().getClass().getResource("resources/icons/FilterSightings.png")).getImage());
        setMinimumSize(new java.awt.Dimension(550, 300));
        setModal(true);
        setResizable(false);

        btnSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/OK.png"))); // NOI18N
        btnSelect.setToolTipText("Confirm the selection.");
        btnSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelect.setFocusPainted(false);
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel20.setText("Select the properties to filter on:");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Observation ID"));

        txaSightingIDs.setColumns(20);
        txaSightingIDs.setRows(2);
        jScrollPane13.setViewportView(txaSightingIDs);

        jLabel7.setText("Observation IDs:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 102, 102));
        jLabel23.setText("(separate by newline)");

        buttonGroupIDs.add(rdbInclude);
        rdbInclude.setSelected(true);
        rdbInclude.setText("Include");
        rdbInclude.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        buttonGroupIDs.add(rdbExclude);
        rdbExclude.setText("Exclude");
        rdbExclude.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel7))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel23)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbInclude)
                    .addComponent(rdbExclude))
                .addGap(5, 5, 5))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel23))
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(rdbInclude)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdbExclude)))
                .addGap(3, 3, 3))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Dates and Times"));

        dtpStartDate.setFormats(new SimpleDateFormat(UtilsTime.DEFAULT_WL_DATE_FORMAT_PATTERN));

        dtpEndDate.setFormats(new SimpleDateFormat(UtilsTime.DEFAULT_WL_DATE_FORMAT_PATTERN));

        jLabel1.setText("Start Date:");

        jLabel2.setText("End Date:");

        jLabel16.setText("Daily Start Time:");

        jLabel22.setText("Daily End Time:");

        spnStartTime.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));
        spnStartTime.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spnStartTime.setEditor(new javax.swing.JSpinner.DateEditor(spnStartTime, "HH:mm"));

        spnEndTime.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MINUTE));
        spnEndTime.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spnEndTime.setEditor(new javax.swing.JSpinner.DateEditor(spnEndTime, "HH:mm"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(dtpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dtpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spnStartTime)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dtpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel16)
                    .addComponent(spnStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dtpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel22)
                    .addComponent(spnEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Months"));

        lsbMonths.setBackground(new java.awt.Color(230, 226, 224));
        lsbMonths.setForeground(new java.awt.Color(176, 153, 145));
        lsbMonths.setModel(new DefaultComboBoxModel(FilterProperties.MONTHS));
        lsbMonths.setFocusable(false);
        lsbMonths.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbMonths.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbMonths.setSelectionModel(new CtrlClickSelectionModel());
        lsbMonths.setVisibleRowCount(12);
        jScrollPane14.setViewportView(lsbMonths);

        jLabel28.setText("Months:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel28)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Certainties"));

        lsbCertainty.setBackground(new java.awt.Color(230, 226, 224));
        lsbCertainty.setForeground(new java.awt.Color(176, 153, 145));
        lsbCertainty.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(Certainty.values())));
        lsbCertainty.setFocusable(false);
        lsbCertainty.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbCertainty.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbCertainty.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane10.setViewportView(lsbCertainty);

        jLabel4.setText("Observation");

        jLabel6.setText("GPS Accuracy:");

        lsbGPSAccuracy.setBackground(new java.awt.Color(230, 226, 224));
        lsbGPSAccuracy.setForeground(new java.awt.Color(176, 153, 145));
        lsbGPSAccuracy.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(GPSAccuracy.values())));
        lsbGPSAccuracy.setFocusable(false);
        lsbGPSAccuracy.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbGPSAccuracy.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbGPSAccuracy.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane12.setViewportView(lsbGPSAccuracy);

        jLabel9.setText("Certainty:");

        lsbTimeAccuracy.setBackground(new java.awt.Color(230, 226, 224));
        lsbTimeAccuracy.setForeground(new java.awt.Color(176, 153, 145));
        lsbTimeAccuracy.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(TimeAccuracy.values())));
        lsbTimeAccuracy.setFocusable(false);
        lsbTimeAccuracy.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbTimeAccuracy.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbTimeAccuracy.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane11.setViewportView(lsbTimeAccuracy);

        jLabel5.setText("Time Accuracy:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9)))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel9))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Categories"));

        jLabel15.setText("Evidence:");

        lsbEvidence.setBackground(new java.awt.Color(230, 226, 224));
        lsbEvidence.setForeground(new java.awt.Color(176, 153, 145));
        lsbEvidence.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(SightingEvidence.values())));
        lsbEvidence.setFocusable(false);
        lsbEvidence.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbEvidence.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbEvidence.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane7.setViewportView(lsbEvidence);

        lsbLifeStatus.setBackground(new java.awt.Color(230, 226, 224));
        lsbLifeStatus.setForeground(new java.awt.Color(176, 153, 145));
        lsbLifeStatus.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(LifeStatus.values())));
        lsbLifeStatus.setFocusable(false);
        lsbLifeStatus.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbLifeStatus.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbLifeStatus.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane6.setViewportView(lsbLifeStatus);

        jLabel14.setText("Life Status:");

        lsbVisitType.setBackground(new java.awt.Color(230, 226, 224));
        lsbVisitType.setForeground(new java.awt.Color(176, 153, 145));
        lsbVisitType.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(VisitType.values())));
        lsbVisitType.setFocusable(false);
        lsbVisitType.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbVisitType.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbVisitType.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane1.setViewportView(lsbVisitType);

        jLabel3.setText("Period Types:");

        jLabel8.setText("Creature Type:");

        lsbElementType.setBackground(new java.awt.Color(230, 226, 224));
        lsbElementType.setForeground(new java.awt.Color(176, 153, 145));
        lsbElementType.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(ElementType.values())));
        lsbElementType.setFocusable(false);
        lsbElementType.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbElementType.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbElementType.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane3.setViewportView(lsbElementType);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel15))
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel14))
                .addGap(3, 3, 3)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(3, 3, 3))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Sun and Moon Phase"));

        jLabel19.setText("Moonlight:");

        lsbTimeOfDay.setBackground(new java.awt.Color(230, 226, 224));
        lsbTimeOfDay.setForeground(new java.awt.Color(176, 153, 145));
        lsbTimeOfDay.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(ActiveTimeSpesific.values())));
        lsbTimeOfDay.setFocusable(false);
        lsbTimeOfDay.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbTimeOfDay.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbTimeOfDay.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane8.setViewportView(lsbTimeOfDay);

        spnMoonphase.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));
        spnMoonphase.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lsbMoonlight.setBackground(new java.awt.Color(230, 226, 224));
        lsbMoonlight.setForeground(new java.awt.Color(176, 153, 145));
        lsbMoonlight.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(Moonlight.values())));
        lsbMoonlight.setFocusable(false);
        lsbMoonlight.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbMoonlight.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbMoonlight.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane9.setViewportView(lsbMoonlight);

        jLabel17.setText("Time of Day:");

        jLabel18.setText("Moonphase:");

        lblTimeOfDayInfo.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        lblTimeOfDayInfo.setForeground(new java.awt.Color(102, 102, 102));
        lblTimeOfDayInfo.setText("More Info...");
        lblTimeOfDayInfo.setToolTipText("Click here to see the definitions for each category.");
        lblTimeOfDayInfo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTimeOfDayInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblTimeOfDayInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblTimeOfDayInfoMousePressed(evt);
            }
        });

        jLabel21.setText("% full");

        chkMoonlightMore.setText("and more");
        chkMoonlightMore.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkMoonlightMore.setFocusPainted(false);

        chkMoonlightLess.setText("and less");
        chkMoonlightLess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkMoonlightLess.setFocusPainted(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel17)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTimeOfDayInfo)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(8, 8, 8)
                                .addComponent(spnMoonphase, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel21))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(chkMoonlightLess)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkMoonlightMore)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTimeOfDayInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(spnMoonphase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMoonlightLess)
                            .addComponent(chkMoonlightMore))))
                .addGap(3, 3, 3))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Other Details"));

        jLabel10.setText("Tag:");

        txaTag.setColumns(10);
        txaTag.setRows(2);
        jScrollPane2.setViewportView(txaTag);

        jLabel11.setText("Individuals:");

        spnNumberOfElements.setModel(new javax.swing.SpinnerNumberModel(0, 0, 2147483647, 1));
        spnNumberOfElements.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel12.setText("Gender:");

        lsbSex.setBackground(new java.awt.Color(230, 226, 224));
        lsbSex.setForeground(new java.awt.Color(176, 153, 145));
        lsbSex.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(Sex.values())));
        lsbSex.setFocusable(false);
        lsbSex.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbSex.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbSex.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane4.setViewportView(lsbSex);

        lsbAge.setBackground(new java.awt.Color(230, 226, 224));
        lsbAge.setForeground(new java.awt.Color(176, 153, 145));
        lsbAge.setModel(new DefaultComboBoxModel(UtilsReports.removeEmptyEntries(Age.values())));
        lsbAge.setFocusable(false);
        lsbAge.setSelectionBackground(new java.awt.Color(193, 209, 179));
        lsbAge.setSelectionForeground(new java.awt.Color(23, 38, 4));
        lsbAge.setSelectionModel(new CtrlClickSelectionModel());
        jScrollPane5.setViewportView(lsbAge);

        jLabel13.setText("Age:");

        chkIndividualsLess.setText("and less");
        chkIndividualsLess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkIndividualsLess.setFocusPainted(false);

        chkIndividualsMore.setText("and more");
        chkIndividualsMore.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkIndividualsMore.setFocusPainted(false);

        chkIncludeEmptyTags.setText("Include empty tags");
        chkIncludeEmptyTags.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkIncludeEmptyTags.setFocusPainted(false);

        jLabel24.setText("Duration:");

        spnDurationMinutes.setModel(new javax.swing.SpinnerNumberModel(0, 0, 1440, 1));
        spnDurationMinutes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        chkDurationLess.setText("and less");
        chkDurationLess.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkDurationLess.setFocusPainted(false);

        chkDurationMore.setText("and more");
        chkDurationMore.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkDurationMore.setFocusPainted(false);

        spnDurationSeconds.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        spnDurationSeconds.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel25.setText("min");

        jLabel26.setText("sec");

        jLabel27.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(102, 102, 102));
        jLabel27.setText("(separate by newline)");

        jLabel30.setText("iNaturalist:");

        chkINaturalistUploaded.setText("Uploaded");
        chkINaturalistUploaded.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkINaturalistUploaded.setFocusPainted(false);

        chkINaturalistNotUploaded.setText("Not uploaded");
        chkINaturalistNotUploaded.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkINaturalistNotUploaded.setFocusPainted(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel10))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkIncludeEmptyTags)
                    .addComponent(jLabel27))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel24)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(spnDurationMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel25)
                        .addGap(6, 6, 6)
                        .addComponent(spnDurationSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel26)
                        .addGap(10, 10, 10)
                        .addComponent(chkDurationLess)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDurationMore)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel30)
                                        .addGap(5, 5, 5)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkINaturalistNotUploaded)
                                            .addComponent(chkINaturalistUploaded))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addGap(13, 13, 13)
                                                .addComponent(spnNumberOfElements, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                        .addGap(5, 5, 5))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chkIndividualsLess)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkIndividualsMore)
                                .addContainerGap())))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addGap(5, 5, 5))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spnNumberOfElements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkIndividualsLess)
                            .addComponent(chkIndividualsMore))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(chkINaturalistUploaded))
                        .addGap(0, 0, 0)
                        .addComponent(chkINaturalistNotUploaded)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(spnDurationMinutes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkDurationLess)
                    .addComponent(chkDurationMore)
                    .addComponent(spnDurationSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(chkIncludeEmptyTags)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)))
                .addGap(3, 3, 3))
        );

        btnTemplates.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/FilterSightings.png"))); // NOI18N
        btnTemplates.setText("Templates");
        btnTemplates.setToolTipText("Select or manage saved templates.");
        btnTemplates.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTemplates.setFocusPainted(false);
        btnTemplates.setFocusable(false);
        btnTemplates.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnTemplates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTemplatesActionPerformed(evt);
            }
        });

        btnSelectAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/SelectAll.png"))); // NOI18N
        btnSelectAll.setText("Select All");
        btnSelectAll.setToolTipText("Select all of the filters.");
        btnSelectAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelectAll.setFocusPainted(false);
        btnSelectAll.setFocusable(false);
        btnSelectAll.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnClearAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/SelectClear.png"))); // NOI18N
        btnClearAll.setText("Clear All");
        btnClearAll.setToolTipText("Clear all of the filters.");
        btnClearAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClearAll.setFocusPainted(false);
        btnClearAll.setFocusable(false);
        btnClearAll.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTemplates, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(btnSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(btnClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnTemplates, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnClearAll, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(2, 2, 2)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(2, 2, 2)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        selectionMade = true;
        if (filterProperties == null) {
            filterProperties = new FilterProperties();
        }
        populateFromUI(filterProperties);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSelectActionPerformed

    private void populateFromUI(FilterProperties inFilterProperties) {
        inFilterProperties.setStartDate(UtilsTime.getLocalDateFromDate(dtpStartDate.getDate()));
        inFilterProperties.setEndDate(UtilsTime.getLocalDateFromDate(dtpEndDate.getDate()));
        inFilterProperties.setStartTime(UtilsTime.getLocalTimeFromDate((Date) spnStartTime.getValue()));
        inFilterProperties.setEndTime(UtilsTime.getLocalTimeFromDate((Date) spnEndTime.getValue()));
        inFilterProperties.setActiveTimes(lsbTimeOfDay.getSelectedValuesList());
        inFilterProperties.setMoonlights(lsbMoonlight.getSelectedValuesList());
        inFilterProperties.setMoonphase((int) spnMoonphase.getValue());
        inFilterProperties.setMoonphaseIsLess(chkMoonlightLess.isSelected());
        inFilterProperties.setMoonphaseIsMore(chkMoonlightMore.isSelected());
        inFilterProperties.setVisitTypes(lsbVisitType.getSelectedValuesList());
        inFilterProperties.setEvidences(lsbEvidence.getSelectedValuesList());
        inFilterProperties.setLifeStatuses(lsbLifeStatus.getSelectedValuesList());
        inFilterProperties.setTimeAccuracies(lsbTimeAccuracy.getSelectedValuesList());
        inFilterProperties.setCertainties(lsbCertainty.getSelectedValuesList());
        inFilterProperties.setGPSAccuracies(lsbGPSAccuracy.getSelectedValuesList());
        inFilterProperties.setAges(lsbAge.getSelectedValuesList());
        inFilterProperties.setSexes(lsbSex.getSelectedValuesList());
        inFilterProperties.setNumberOfElements((int) spnNumberOfElements.getValue());
        inFilterProperties.setNumberOfElementsIsLess(chkIndividualsLess.isSelected());
        inFilterProperties.setNumberOfElementsIsMore(chkIndividualsMore.isSelected());
        String[] lines = txaTag.getText().split("\\r?\\n");
        inFilterProperties.setTags(new ArrayList<>(lines.length));
        for (String tag : lines) {
            if (!tag.trim().isEmpty()) {
                inFilterProperties.getTags().add(tag.trim());
            }
        }
        inFilterProperties.setIncludeEmptyTags(chkIncludeEmptyTags.isSelected());
        inFilterProperties.setElementTypes(lsbElementType.getSelectedValuesList());
        lines = txaSightingIDs.getText().split("\\r?\\n");
        inFilterProperties.setSightingIDs(new ArrayList<>(lines.length));
        for (String id : lines) {
            if (!id.trim().isEmpty()) {
                try {
                    inFilterProperties.getSightingIDs().add(Long.parseLong(id.trim()));
                }
                catch (NumberFormatException ex) {
                    // Do nothing if not a Long number...
                }
            }
        }
        inFilterProperties.setSightingIDsIsInclude(rdbInclude.isSelected());
        inFilterProperties.setDurationMinutes((int) spnDurationMinutes.getValue());
        inFilterProperties.setDurationSeconds((int) spnDurationSeconds.getValue());
        inFilterProperties.setDurationIsLess(chkDurationLess.isSelected());
        inFilterProperties.setDurationIsMore(chkDurationMore.isSelected());
        inFilterProperties.setMonths(lsbMonths.getSelectedValuesList());
        inFilterProperties.setINatUploaded(chkINaturalistUploaded.isSelected());
        inFilterProperties.setINatNotUploaded(chkINaturalistNotUploaded.isSelected());
    }

    private void lblTimeOfDayInfoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTimeOfDayInfoMousePressed
        WLOptionPane.showMessageDialog(this,
                ActiveTimeSpesific.getCompleteDescription(),
                "Time of Day Definitions", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_lblTimeOfDayInfoMousePressed

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        setDefaultValues(false, filterProperties);
        populateToUI(filterProperties);
    }//GEN-LAST:event_btnSelectAllActionPerformed

    public static void setDefaultValues(boolean inUseRecentDates, FilterProperties inFilterProperties) {
        if (inUseRecentDates) {
            inFilterProperties.setStartDate(LocalDate.now().minusDays(3));
            inFilterProperties.setEndDate(LocalDate.now());
        }
        else {
            inFilterProperties.setStartDate(null);
            inFilterProperties.setEndDate(null);
        }
        inFilterProperties.setStartTime(LocalTime.MIN);
        inFilterProperties.setEndTime(LocalTime.MAX);
        inFilterProperties.setActiveTimes(Arrays.asList(ActiveTimeSpesific.values()));
        inFilterProperties.setMoonlights(Arrays.asList(Moonlight.values()));
        inFilterProperties.setMoonphase(0);
        inFilterProperties.setMoonphaseIsLess(true);
        inFilterProperties.setMoonphaseIsMore(true);
        inFilterProperties.setVisitTypes(Arrays.asList(VisitType.values()));
        inFilterProperties.setEvidences(Arrays.asList(SightingEvidence.values()));
        inFilterProperties.setLifeStatuses(Arrays.asList(LifeStatus.values()));
        inFilterProperties.setTimeAccuracies(Arrays.asList(TimeAccuracy.values()));
        inFilterProperties.setCertainties(Arrays.asList(Certainty.values()));
        inFilterProperties.setGPSAccuracies(Arrays.asList(GPSAccuracy.values()));
        inFilterProperties.setAges(Arrays.asList(Age.values()));
        inFilterProperties.setSexes(Arrays.asList(Sex.values()));
        inFilterProperties.setNumberOfElements(0);
        inFilterProperties.setNumberOfElementsIsLess(true);
        inFilterProperties.setNumberOfElementsIsMore(true);
        inFilterProperties.setTags(new ArrayList<>(0));
        inFilterProperties.setIncludeEmptyTags(true);
        inFilterProperties.setElementTypes(Arrays.asList(ElementType.values()));
        inFilterProperties.setSightingIDs(new ArrayList<>(0));
        inFilterProperties.setSightingIDsIsInclude(true);
        inFilterProperties.setDurationMinutes(0);
        inFilterProperties.setDurationSeconds(0);
        inFilterProperties.setDurationIsLess(true);
        inFilterProperties.setDurationIsMore(true);
        inFilterProperties.setMonths(Arrays.asList(FilterProperties.MONTHS));
        inFilterProperties.setINatUploaded(false);
        inFilterProperties.setINatNotUploaded(false);
    }

    private void btnClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllActionPerformed
        filterProperties.setStartDate(null);
        filterProperties.setEndDate(null);
        filterProperties.setStartTime(LocalTime.MIN);
        filterProperties.setEndTime(LocalTime.MAX);
        filterProperties.setActiveTimes(new ArrayList<>(0));
        filterProperties.setMoonlights(new ArrayList<>(0));
        filterProperties.setMoonphase(0);
        filterProperties.setMoonphaseIsLess(true);
        filterProperties.setMoonphaseIsMore(true);
        filterProperties.setVisitTypes(new ArrayList<>(0));
        filterProperties.setEvidences(new ArrayList<>(0));
        filterProperties.setLifeStatuses(new ArrayList<>(0));
        filterProperties.setTimeAccuracies(new ArrayList<>(0));
        filterProperties.setCertainties(new ArrayList<>(0));
        filterProperties.setGPSAccuracies(new ArrayList<>(0));
        filterProperties.setAges(new ArrayList<>(0));
        filterProperties.setSexes(new ArrayList<>(0));
        filterProperties.setNumberOfElements(0);
        filterProperties.setNumberOfElementsIsLess(true);
        filterProperties.setNumberOfElementsIsMore(true);
        filterProperties.setTags(new ArrayList<>(0));
        filterProperties.setIncludeEmptyTags(true);
        filterProperties.setElementTypes(new ArrayList<>(0));
        filterProperties.setSightingIDs(new ArrayList<>(0));
        filterProperties.setSightingIDsIsInclude(true);
        filterProperties.setDurationMinutes(0);
        filterProperties.setDurationSeconds(0);
        filterProperties.setDurationIsLess(true);
        filterProperties.setDurationIsMore(true);
        filterProperties.setMonths(new ArrayList<>(0));
        filterProperties.setINatUploaded(false);
        filterProperties.setINatNotUploaded(false);
        populateToUI(filterProperties);
    }//GEN-LAST:event_btnClearAllActionPerformed

    private void btnTemplatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTemplatesActionPerformed
        FilterProperties tempFilterProperties = new FilterProperties();
        populateFromUI(tempFilterProperties);
        FilterTemplatesDialog dialog = new FilterTemplatesDialog(this, tempFilterProperties);
        dialog.setVisible(true);
        populateToUI(dialog.getFilterProperties());
    }//GEN-LAST:event_btnTemplatesActionPerformed

    public boolean isSelectionMade() {
        return selectionMade;
    }
    
    public void setSelectionMade(boolean inSelectionMade) {
        selectionMade = inSelectionMade;
    }

    public FilterProperties getSelectedFilterProperties() {
        return filterProperties;
    }
    
    private void populateToUI(FilterProperties inFilterProperties) {
        dtpStartDate.setDate(UtilsTime.getDateFromLocalDate(inFilterProperties.getStartDate()));
        dtpEndDate.setDate(UtilsTime.getDateFromLocalDate(inFilterProperties.getEndDate()));
        spnStartTime.setValue(UtilsTime.getDateFromLocalTime(inFilterProperties.getStartTime()));
        spnEndTime.setValue(UtilsTime.getDateFromLocalTime(inFilterProperties.getEndTime()));
        selectValuesInJList(lsbTimeOfDay, inFilterProperties.getActiveTimes());
        selectValuesInJList(lsbMoonlight, inFilterProperties.getMoonlights());
        spnMoonphase.setValue(inFilterProperties.getMoonphase());
        chkMoonlightLess.setSelected(inFilterProperties.isMoonphaseIsLess());
        chkMoonlightMore.setSelected(inFilterProperties.isMoonphaseIsMore());
        selectValuesInJList(lsbVisitType, inFilterProperties.getVisitTypes());
        selectValuesInJList(lsbEvidence, inFilterProperties.getEvidences());
        selectValuesInJList(lsbLifeStatus, inFilterProperties.getLifeStatuses());
        selectValuesInJList(lsbTimeAccuracy, inFilterProperties.getTimeAccuracies());
        selectValuesInJList(lsbCertainty, inFilterProperties.getCertainties());
        selectValuesInJList(lsbGPSAccuracy, inFilterProperties.getGPSAccuracies());
        selectValuesInJList(lsbAge, inFilterProperties.getAges());
        selectValuesInJList(lsbSex, inFilterProperties.getSexes());
        spnNumberOfElements.setValue(inFilterProperties.getNumberOfElements());
        chkIndividualsLess.setSelected(inFilterProperties.isNumberOfElementsIsLess());
        chkIndividualsMore.setSelected(inFilterProperties.isNumberOfElementsIsMore());
        String tagText = "";
        for (String tag : inFilterProperties.getTags()) {
            if (!tag.trim().isEmpty()) {
                if (!tagText.isEmpty()) {
                    tagText = tagText + System.lineSeparator();
                }
                tagText = tagText + tag;
            }
        }
        txaTag.setText(tagText);
        chkIncludeEmptyTags.setSelected(inFilterProperties.isIncludeEmptyTags());
        selectValuesInJList(lsbElementType, inFilterProperties.getElementTypes());
        String sightingIDsText = "";
        for (Long id : inFilterProperties.getSightingIDs()) {
            if (id != 0) {
                if (!sightingIDsText.isEmpty()) {
                    sightingIDsText = sightingIDsText + System.lineSeparator();
                }
                sightingIDsText = sightingIDsText + id;
            }
        }
        txaSightingIDs.setText(sightingIDsText);
        rdbInclude.setSelected(inFilterProperties.isSightingIDsIsInclude());
        spnDurationMinutes.setValue(inFilterProperties.getDurationMinutes());
        spnDurationSeconds.setValue(inFilterProperties.getDurationSeconds());
        chkDurationLess.setSelected(inFilterProperties.isDurationIsLess());
        chkDurationMore.setSelected(inFilterProperties.isDurationIsMore());
        selectValuesInJList(lsbMonths, inFilterProperties.getMonths());
        chkINaturalistUploaded.setSelected(inFilterProperties.isINatUploaded());
        chkINaturalistNotUploaded.setSelected(inFilterProperties.isINatNotUploaded());
    }
    
    private void selectValuesInJList(JList inList, List inValues) {
        inList.clearSelection();
        for (int t = 0; t < inList.getModel().getSize(); t++) {
            for (Object object : inValues) {
                if (inList.getModel().getElementAt(t).equals(object)) {
                    inList.addSelectionInterval(t, t);
                }
            }
        }
    }
    
    /**
     * This method will return true if the Sighting should be included in the shown results and false it should be 
     * skipped. <br/>
     * <b>NOTE:</b> that this methods depends on the getCachedElementType and getCachedVisitType to be populated 
     * in order for the filtering to work properly.
     * @param inFilterProperties
     * @param inSighting
     * @return 
     */
    public static boolean checkFilterPropertiesMatch(FilterProperties inFilterProperties, Sighting inSighting) {
        if (inFilterProperties != null) {
            // Date
            if (inFilterProperties.getStartDate() != null) {
                if (UtilsTime.getLocalDateFromDate(inSighting.getDate()).isBefore(inFilterProperties.getStartDate())) {
                    return false;
                }
            }
            if (inFilterProperties.getEndDate() != null) {
                if (UtilsTime.getLocalDateFromDate(inSighting.getDate()).isAfter(inFilterProperties.getEndDate())) {
                    return false;
                }
            }
            // Time
            if (inFilterProperties.getStartTime() != null) {
                if (UtilsTime.getLocalTimeFromDate(inSighting.getDate()).isBefore(inFilterProperties.getStartTime())) {
                    return false;
                }
            }
            if (inFilterProperties.getEndTime() != null) {
                if (UtilsTime.getLocalTimeFromDate(inSighting.getDate()).isAfter(inFilterProperties.getEndTime())) {
                    return false;
                }
            }
            // Time of day
            if (inFilterProperties.getActiveTimes() != null && !inFilterProperties.getActiveTimes().isEmpty()) {
                boolean found = false;
                for (ActiveTimeSpesific activeTimeSpesific : inFilterProperties.getActiveTimes()) {
                    if (activeTimeSpesific.equals(inSighting.getTimeOfDay())) {
                        found = true;
                        break;
                    }
                    if (activeTimeSpesific.equals(ActiveTimeSpesific.UNKNOWN)) {
                        if (inSighting.getTimeOfDay() == null || ActiveTimeSpesific.NONE.equals(inSighting.getTimeOfDay())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Moonlight
            if (inFilterProperties.getMoonlights() != null && !inFilterProperties.getMoonlights().isEmpty()) {
                boolean found = false;
                for (Moonlight moonlight : inFilterProperties.getMoonlights()) {
                    if (moonlight.equals(inSighting.getMoonlight())) {
                        found = true;
                        break;
                    }
                    if (moonlight.equals(Moonlight.UNKNOWN)) {
                        if (inSighting.getMoonlight() == null || Moonlight.NONE.equals(inSighting.getMoonlight())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Moonphase
            if (!(inFilterProperties.isMoonphaseIsLess() && inFilterProperties.isMoonphaseIsMore()) 
                    && inSighting.getMoonPhase() >= 0 && inFilterProperties.getMoonphase() >= 0) {
                boolean found = false;
                if (inFilterProperties.getMoonphase() == inSighting.getMoonPhase()) {
                    found = true;
                }
                else
                if (inFilterProperties.isMoonphaseIsLess() && inSighting.getMoonPhase() < inFilterProperties.getMoonphase()) {
                    found = true;
                }
                else
                if (inFilterProperties.isMoonphaseIsMore() && inSighting.getMoonPhase() > inFilterProperties.getMoonphase()) {
                    found = true;
                }
                if (!found) {
                    return false;
                }
            }

            // Visit Type
            if (inFilterProperties.getVisitTypes() != null && !inFilterProperties.getVisitTypes().isEmpty()) {
                boolean found = false;
                for (VisitType visitType : inFilterProperties.getVisitTypes()) {
                    if (visitType.equals(inSighting.getCachedVisitType())) {
                        found = true;
                        break;
                    }
                    if (visitType.equals(VisitType.UNKNOWN)) {
                        if (inSighting.getCachedVisitType() == null || VisitType.NONE.equals(inSighting.getCachedVisitType())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Evidence
            if (inFilterProperties.getEvidences() != null && !inFilterProperties.getEvidences().isEmpty()) {
                boolean found = false;
                for (SightingEvidence sightingEvidence : inFilterProperties.getEvidences()) {
                    if (sightingEvidence.equals(inSighting.getSightingEvidence())) {
                        found = true;
                        break;
                    }
                    if (sightingEvidence.equals(SightingEvidence.UNKNOWN)) {
                        if (inSighting.getSightingEvidence() == null || SightingEvidence.NONE.equals(inSighting.getSightingEvidence())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Life Status
            if (inFilterProperties.getLifeStatuses() != null && !inFilterProperties.getLifeStatuses().isEmpty()) {
                boolean found = false;
                for (LifeStatus lifeStatus : inFilterProperties.getLifeStatuses()) {
                    if (lifeStatus.equals(inSighting.getLifeStatus())) {
                        found = true;
                        break;
                    }
                    if (lifeStatus.equals(LifeStatus.UNKNOWN)) {
                        if (inSighting.getLifeStatus() == null || LifeStatus.NONE.equals(inSighting.getLifeStatus())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Time Accuracy
            if (inFilterProperties.getTimeAccuracies() != null && !inFilterProperties.getTimeAccuracies().isEmpty()) {
                boolean found = false;
                for (TimeAccuracy timeAccuracy : inFilterProperties.getTimeAccuracies()) {
                    if (timeAccuracy.equals(inSighting.getTimeAccuracy())) {
                        found = true;
                        break;
                    }
                    if (timeAccuracy.equals(TimeAccuracy.UNKNOWN)) {
                        if (inSighting.getTimeAccuracy() == null || TimeAccuracy.NONE.equals(inSighting.getTimeAccuracy())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Sighting Certianty
            if (inFilterProperties.getCertainties() != null && !inFilterProperties.getCertainties().isEmpty()) {
                boolean found = false;
                for (Certainty certainty : inFilterProperties.getCertainties()) {
                    if (certainty.equals(inSighting.getCertainty())) {
                        found = true;
                        break;
                    }
                    if (certainty.equals(Certainty.UNKNOWN)) {
                        if (inSighting.getCertainty() == null || Certainty.NONE.equals(inSighting.getCertainty())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // GPS Certainty
            if (inFilterProperties.getGPSAccuracies() != null && !inFilterProperties.getGPSAccuracies().isEmpty()) {
                boolean found = false;
                for (GPSAccuracy gpsAccuracy : inFilterProperties.getGPSAccuracies()) {
                    if (gpsAccuracy.equals(inSighting.getGPSAccuracy())) {
                        found = true;
                        break;
                    }
                    if (gpsAccuracy.equals(GPSAccuracy.UNKNOWN)) {
                        if (inSighting.getGPSAccuracy() == null || GPSAccuracy.NONE.equals(inSighting.getGPSAccuracy())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Age
            if (inFilterProperties.getAges() != null && !inFilterProperties.getAges().isEmpty()) {
                boolean found = false;
                for (Age age : inFilterProperties.getAges()) {
                    if (age.equals(inSighting.getAge())) {
                        found = true;
                        break;
                    }
                    if (age.equals(Age.UNKNOWN)) {
                        if (inSighting.getAge() == null || Age.NONE.equals(inSighting.getAge())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Sex
            if (inFilterProperties.getSexes() != null && !inFilterProperties.getSexes().isEmpty()) {
                boolean found = false;
                for (Sex sex : inFilterProperties.getSexes()) {
                    if (sex.equals(inSighting.getSex())) {
                        found = true;
                        break;
                    }
                    if (sex.equals(Sex.UNKNOWN)) {
                        if (inSighting.getSex() == null || Sex.NONE.equals(inSighting.getSex())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Number of individuals
            if (!(inFilterProperties.isNumberOfElementsIsLess() && inFilterProperties.isNumberOfElementsIsMore()) 
                    && inSighting.getNumberOfElements() >= 0 && inFilterProperties.getNumberOfElements() >= 0) {
                boolean found = false;
                if (inFilterProperties.getNumberOfElements() == inSighting.getNumberOfElements()) {
                    found = true;
                }
                else
                if (inFilterProperties.isNumberOfElementsIsLess() && inSighting.getNumberOfElements() < inFilterProperties.getNumberOfElements()) {
                    found = true;
                }
                else
                if (inFilterProperties.isNumberOfElementsIsMore() && inSighting.getNumberOfElements() > inFilterProperties.getNumberOfElements()) {
                    found = true;
                }
                if (!found) {
                    return false;
                }
            }
            // Tag
            if (inSighting.getTag() == null || inSighting.getTag().trim().isEmpty()) {
                if (!inFilterProperties.isIncludeEmptyTags()) {
                    return false;
                }
            }
            else
            if (inFilterProperties.getTags() != null && !inFilterProperties.getTags().isEmpty()) {
                boolean found = false;
                for (String tag : inFilterProperties.getTags()) {
                    if (!tag.trim().isEmpty() && inSighting.getTag().trim().toLowerCase().contains(tag.trim().toLowerCase())) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // Element Type
            if (inFilterProperties.getElementTypes() != null && !inFilterProperties.getElementTypes().isEmpty()) {
                boolean found = false;
                for (ElementType elementType : inFilterProperties.getElementTypes()) {
                    if (elementType.equals(inSighting.getCachedElementType())) {
                        found = true;
                        break;
                    }
                    if (elementType.equals(ElementType.UNKNOWN)) {
                        if (inSighting.getCachedElementType() == null || ElementType.NONE.equals(inSighting.getCachedElementType())) {
                            found = true;
                            break;
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // SightingID
            if (inFilterProperties.getSightingIDs() != null && !inFilterProperties.getSightingIDs().isEmpty()) {
                boolean found = false;
                for (Long id : inFilterProperties.getSightingIDs()) {
                    if (id == inSighting.getSightingCounter()) {
                        found = true;
                        break;
                    }
                }
                if (inFilterProperties.isSightingIDsIsInclude()) {
                    if (!found) {
                        return false;
                    }
                }
                else {
                    if (found) {
                        return false;
                    }
                }
            }
            // Duration
            if (!(inFilterProperties.isDurationIsLess()&& inFilterProperties.isDurationIsMore()) 
                    && (inSighting.getDurationMinutes() >= 0 && inFilterProperties.getDurationMinutes() >= 0
                    || inSighting.getDurationSeconds()>= 0 && inFilterProperties.getDurationSeconds() >= 0)) {
                boolean found = false;
                if (inSighting.getDurationMinutes() == inFilterProperties.getDurationMinutes()
                        && ((int) inSighting.getDurationSeconds()) == inFilterProperties.getDurationSeconds()) {
                    found = true;
                }
                LocalTime sightingTime = LocalTime.of(inSighting.getDurationMinutes() / 60, inSighting.getDurationMinutes() % 60, (int) inSighting.getDurationSeconds());
                LocalTime filterTime = LocalTime.of(inFilterProperties.getDurationMinutes() / 60, inFilterProperties.getDurationMinutes() % 60, inFilterProperties.getDurationSeconds());
                if (inFilterProperties.isDurationIsLess() && filterTime.isAfter(sightingTime)) {
                    found = true;
                }
                if (inFilterProperties.isDurationIsMore() && filterTime.isBefore(sightingTime)) {
                    found = true;
                }
                if (!found) {
                    return false;
                }
            }
            // Month
            if (inFilterProperties.getMonths() != null && !inFilterProperties.getMonths().isEmpty()) {
                boolean found = false;
                all: for (String monthString : inFilterProperties.getMonths()) {
                    for (int monthInt = 0; monthInt < FilterProperties.MONTHS.length; monthInt++) {
                        if (FilterProperties.MONTHS[monthInt].equals(monthString)) {
                            if (UtilsTime.getLocalDateFromDate(inSighting.getDate()).getMonthValue() - 1 == monthInt) {
                                found = true;
                                break all;
                            }
                        }
                    }
                }
                if (!found) {
                    return false;
                }
            }
            // iNaturalist
            if (inFilterProperties.isINatUploaded() != inFilterProperties.isINatNotUploaded()) {
                INaturalistLinkedData linkedData = WildLogApp.getApplication().getDBI().findINaturalistLinkedData(
                        inSighting.getSightingCounter(), 0, INaturalistLinkedData.class);
                if (inFilterProperties.isINatNotUploaded() && linkedData != null && linkedData.getWildlogID() != 0) {
                    return false;
                }
                if (inFilterProperties.isINatUploaded() && (linkedData == null || linkedData.getWildlogID() == 0)) {
                    return false;
                }
            }
        }
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearAll;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnTemplates;
    private javax.swing.ButtonGroup buttonGroupIDs;
    private javax.swing.JCheckBox chkDurationLess;
    private javax.swing.JCheckBox chkDurationMore;
    private javax.swing.JCheckBox chkINaturalistNotUploaded;
    private javax.swing.JCheckBox chkINaturalistUploaded;
    private javax.swing.JCheckBox chkIncludeEmptyTags;
    private javax.swing.JCheckBox chkIndividualsLess;
    private javax.swing.JCheckBox chkIndividualsMore;
    private javax.swing.JCheckBox chkMoonlightLess;
    private javax.swing.JCheckBox chkMoonlightMore;
    private org.jdesktop.swingx.JXDatePicker dtpEndDate;
    private org.jdesktop.swingx.JXDatePicker dtpStartDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblTimeOfDayInfo;
    private javax.swing.JList lsbAge;
    private javax.swing.JList lsbCertainty;
    private javax.swing.JList lsbElementType;
    private javax.swing.JList lsbEvidence;
    private javax.swing.JList lsbGPSAccuracy;
    private javax.swing.JList lsbLifeStatus;
    private javax.swing.JList lsbMonths;
    private javax.swing.JList lsbMoonlight;
    private javax.swing.JList lsbSex;
    private javax.swing.JList lsbTimeAccuracy;
    private javax.swing.JList lsbTimeOfDay;
    private javax.swing.JList lsbVisitType;
    private javax.swing.JRadioButton rdbExclude;
    private javax.swing.JRadioButton rdbInclude;
    private javax.swing.JSpinner spnDurationMinutes;
    private javax.swing.JSpinner spnDurationSeconds;
    private javax.swing.JSpinner spnEndTime;
    private javax.swing.JSpinner spnMoonphase;
    private javax.swing.JSpinner spnNumberOfElements;
    private javax.swing.JSpinner spnStartTime;
    private javax.swing.JTextArea txaSightingIDs;
    private javax.swing.JTextArea txaTag;
    // End of variables declaration//GEN-END:variables
}
