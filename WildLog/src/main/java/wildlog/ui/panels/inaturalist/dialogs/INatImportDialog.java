package wildlog.ui.panels.inaturalist.dialogs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.awt.Cursor;
import java.awt.Desktop;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import org.apache.logging.log4j.Level;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.INaturalistLinkedData;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.enums.Certainty;
import wildlog.data.enums.GPSAccuracy;
import wildlog.data.enums.Latitudes;
import wildlog.data.enums.LifeStatus;
import wildlog.data.enums.Longitudes;
import wildlog.data.enums.SightingEvidence;
import wildlog.data.enums.TimeAccuracy;
import wildlog.inaturalist.INatAPI;
import wildlog.maps.utils.UtilsGPS;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.ProgressbarTask;
import wildlog.ui.helpers.WLOptionPane;
import wildlog.utils.UtilsTime;
import wildlog.utils.UtilsConcurency;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.WildLogPaths;


public class INatImportDialog extends JDialog {
    private final WildLogApp app = WildLogApp.getApplication();
    private final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();

    
    public INatImportDialog(JFrame inParent) {
        super(inParent);
        WildLogApp.LOGGER.log(Level.INFO, "[INatImportDialog]");
        initComponents();
        UtilsDialog.setDialogToCenter(inParent, this);
        UtilsDialog.addEscapeKeyListener(this);
        UtilsDialog.addModalBackgroundPanel(inParent, this);
        UtilsDialog.addModalBackgroundPanel(this, null);
    }
    
    public INatImportDialog(JDialog inParent) {
        super(inParent);
        WildLogApp.LOGGER.log(Level.INFO, "[INatImportDialog]");
        initComponents();
        UtilsDialog.setDialogToCenter(inParent, this);
        UtilsDialog.addEscapeKeyListener(this);
        UtilsDialog.addModalBackgroundPanel(inParent, this);
        UtilsDialog.addModalBackgroundPanel(this, null);
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        pnlButtons = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnViewWebsite = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnImport = new javax.swing.JButton();
        btnCompareScientificNames = new javax.swing.JButton();
        btnFindMissingInWildLog = new javax.swing.JButton();
        btnFindMissingInINaturalist = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import iNaturalist Observations");
        setIconImage(new ImageIcon(WildLogApp.class.getResource("resources/icons/iNaturalist_small.png")).getImage());
        setMaximumSize(new java.awt.Dimension(800, 420));
        setMinimumSize(new java.awt.Dimension(600, 380));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(600, 390));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/iNaturalist.png"))); // NOI18N
        lblTitle.setText("Import iNaturalist Observations");

        btnOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/OK.png"))); // NOI18N
        btnOK.setToolTipText("Close the dialog.");
        btnOK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOK.setFocusPainted(false);
        btnOK.setMaximumSize(null);
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnViewWebsite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/iNaturalist.png"))); // NOI18N
        btnViewWebsite.setText("View Website");
        btnViewWebsite.setToolTipText("View the authenticated user's account on the iNaturalist website.");
        btnViewWebsite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewWebsite.setFocusPainted(false);
        btnViewWebsite.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewWebsite.setMargin(new java.awt.Insets(2, 8, 2, 2));
        btnViewWebsite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewWebsiteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsLayout = new javax.swing.GroupLayout(pnlButtons);
        pnlButtons.setLayout(pnlButtonsLayout);
        pnlButtonsLayout.setHorizontalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnViewWebsite, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(btnOK, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        pnlButtonsLayout.setVerticalGroup(
            pnlButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(btnViewWebsite, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("<html>This process will download iNaturalist Observations of the authorized iNaturalist user and import it into this WildLog Workspace.\n<br /><br />All observations that don't already have an associated <i>WildLog_ID</i> obseration field value will be imported. After the import the associated <i>WildLog_ID</i> observation field will be added to each iNaturalist observation.</html>");
        jLabel3.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        btnImport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/ShowGPS.png"))); // NOI18N
        btnImport.setText("Download iNaturalist Observations");
        btnImport.setToolTipText("<html>Download the latest data for linked WildLog Observations and import iNaturalist Observations that are not yet present in WildLog.</html>");
        btnImport.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImport.setFocusPainted(false);
        btnImport.setIconTextGap(8);
        btnImport.setMargin(new java.awt.Insets(6, 15, 6, 15));
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnCompareScientificNames.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        btnCompareScientificNames.setText("Report: Compare Scientific Names used in WildLog and iNaturalist");
        btnCompareScientificNames.setToolTipText("List all observations where the Scientific Name in the WildLog Workspace does not match with iNaturalist.");
        btnCompareScientificNames.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCompareScientificNames.setFocusPainted(false);
        btnCompareScientificNames.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCompareScientificNames.setIconTextGap(8);
        btnCompareScientificNames.setMargin(new java.awt.Insets(6, 20, 6, 20));
        btnCompareScientificNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompareScientificNamesActionPerformed(evt);
            }
        });

        btnFindMissingInWildLog.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        btnFindMissingInWildLog.setText("Report: Find linked iNaturalist Observations not present in this WildLog Workspace");
        btnFindMissingInWildLog.setToolTipText("<html>List all iNaturalist Observations on the specified account which have a <i>WildLog_ID</i>, \n<br />but the matching WildLog Observation could not be found in this Workspace.</html>");
        btnFindMissingInWildLog.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFindMissingInWildLog.setFocusPainted(false);
        btnFindMissingInWildLog.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFindMissingInWildLog.setIconTextGap(8);
        btnFindMissingInWildLog.setMargin(new java.awt.Insets(6, 20, 6, 20));
        btnFindMissingInWildLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindMissingInWildLogActionPerformed(evt);
            }
        });

        btnFindMissingInINaturalist.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        btnFindMissingInINaturalist.setText("Report: Find linked WildLog Observations not present on the iNaturalist Account");
        btnFindMissingInINaturalist.setToolTipText("<html>List all WildLog Observations in this Workspace which have a linked iNaturalist record, \n<br />but the iNaturalist Observation could not be found on the specified account.</html>");
        btnFindMissingInINaturalist.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFindMissingInINaturalist.setFocusPainted(false);
        btnFindMissingInINaturalist.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFindMissingInINaturalist.setIconTextGap(8);
        btnFindMissingInINaturalist.setMargin(new java.awt.Insets(6, 20, 6, 20));
        btnFindMissingInINaturalist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindMissingInINaturalistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFindMissingInWildLog, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addComponent(btnImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFindMissingInINaturalist, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCompareScientificNames, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnCompareScientificNames, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnFindMissingInWildLog, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnFindMissingInINaturalist, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewWebsiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewWebsiteActionPerformed
        // Maak seker die Auth Token is OK
        if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
            INatAuthTokenDialog dialog = new INatAuthTokenDialog(this);
            dialog.setVisible(true);
            if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
                return;
            }
        }
        try {
            getGlassPane().setVisible(true);
            getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            JsonElement jsonElement = INatAPI.getAuthenticatedUser(WildLogApp.getINaturalistToken());
            int userID = jsonElement.getAsJsonObject().get("id").getAsInt();
            if (userID > 0) {
                Desktop.getDesktop().browse(URI.create("https://www.inaturalist.org/users/" + userID));
            }
        }
        catch (IOException ex) {
            WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
        }
        finally {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    getGlassPane().setCursor(Cursor.getDefaultCursor());
                    getGlassPane().setVisible(false);
                }
            });
        }
    }//GEN-LAST:event_btnViewWebsiteActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        // Maak seker die Auth Token is OK
        if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
            INatAuthTokenDialog dialog = new INatAuthTokenDialog(this);
            dialog.setVisible(true);
            if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
                return;
            }
        }
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setTaskProgress(0);
                setMessage("Starting the iNaturalist Import");
                setTaskProgress(1);
                setMessage("Busy with the iNaturalist Import... " + getProgress() + "%");
                Path feedbackFile = WildLogPaths.getFullWorkspacePrefix().resolve("iNaturalistWildLogDownloadReport.txt");
                PrintWriter feedback = null;
                try {
                    feedback = new PrintWriter(new FileWriter(feedbackFile.toFile()), true);
                    feedback.println("---------------------------------------------------------");
                    feedback.println("-------- iNaturalist and WildLog Download Report --------");
                    feedback.println("---------------------------------------------------------");
                    feedback.println("");
                    JsonElement userJsonElement = INatAPI.getAuthenticatedUser(WildLogApp.getINaturalistToken());
                    String loginName = userJsonElement.getAsJsonObject().get("login").getAsString();
                    setTaskProgress(2);
                    setMessage("Busy with the iNaturalist Import... " + getProgress() + "%");
                    List<JsonObject> lstObservationsJsonObjects = INatAPI.getUserObservations(loginName);
                    setTaskProgress(5);
                    setMessage("Busy with the iNaturalist Import... " + getProgress() + "%");
                    String locationName = "iNaturalist Observations";
                    if (app.getDBI().countLocations(locationName) == 0) {
                        app.getDBI().createLocation(new Location(locationName));
                    }
                    String visitName = "iNaturalist Import " + UtilsTime.WL_DATE_FORMATTER_FOR_FILES_WITH_TIMESTAMP.format(LocalDateTime.now());
                    if (app.getDBI().countVisits(visitName, locationName) == 0) {
                        app.getDBI().createVisit(new Visit(visitName, locationName));
                    }
                    int added = 0;
                    int updated = 0;
                    int fixed = 0;
                    for (int t = 0; t < lstObservationsJsonObjects.size(); t++) {
                        try {
                            JsonObject iNatFullObs = INatAPI.getObservation(lstObservationsJsonObjects.get(t).get("id").getAsLong()).getAsJsonObject();
                            JsonElement observationFieldValues = iNatFullObs.get("observation_field_values");
                            long iNatID = iNatFullObs.get("id").getAsLong();
                            long foundWildLogID = 0;
                            if (observationFieldValues != null) {
                                JsonArray arrayObsFieldValues = observationFieldValues.getAsJsonArray();
                                for (int i = 0; i < arrayObsFieldValues.size(); i++) {
                                    // Soek vir "WildLog_ID" (iNaturalist Observation Field = https://www.inaturalist.org/observation_fields/7112)
                                    if (arrayObsFieldValues.get(i).getAsJsonObject().get("observation_field_id").getAsInt() == 7112) {
                                        foundWildLogID = arrayObsFieldValues.get(i).getAsJsonObject().get("value").getAsLong();
                                        break;
                                    }
                                }
                            }
                            if (foundWildLogID == 0) {
                                INaturalistLinkedData foundLinkedOnINatID = app.getDBI().findINaturalistLinkedData(0, iNatID, INaturalistLinkedData.class);
                                if (foundLinkedOnINatID == null) {
                                    // CASE 1: The WildLogID is not found on the iNat observation, and the iNat observation is not linked in the Workspace
                                    // Create sighting
                                    Sighting sighting = createSighting(iNatFullObs, locationName, visitName);
                                    feedback.println("DownloadWL - The iNaturalist Observation " + iNatID + " will be imported as the new WildLog Observation " 
                                            + sighting.getSightingCounter() + ". The records will be linked.");
                                    // Update the iNaturalist observation_field_values
                                    // Add "WildLog_ID" (iNaturalist Observation Field = https://www.inaturalist.org/observation_fields/7112)
                                    INatAPI.addObservationFieldValue(iNatID, 7112, Long.toString(sighting.getSightingCounter()), 
                                            WildLogApp.getINaturalistToken());
                                    // Save the LinkedData
                                    try {
                                        app.getDBI().createINaturalistLinkedData(new INaturalistLinkedData(
                                                sighting.getSightingCounter(), iNatID, GSON.toJson(INatAPI.getObservation(iNatID))));
                                    }
                                    catch (Exception ex) {
                                        WildLogApp.LOGGER.log(Level.ERROR, "ERROR: WildLog Database Error: WildLogID = {} | iNatID = {}", 
                                                sighting.getSightingCounter(), iNatID);
                                        WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                                        feedback.println("ERROR: WildLog Database Error!!!");
                                    }
                                    // Download the images
                                    importPhotos(iNatFullObs.getAsJsonArray("observation_photos"), sighting);
                                    added++;
                                }
                                else {
                                    // CASE 2: The WildLogID is not found on the iNat observation, but the iNat observation is already linked in the Workspace
                                    feedback.println("ReLinkINat - The iNaturalist Observation " + iNatID + " is already linked to the WildLog Observation " 
                                            + foundLinkedOnINatID.getWildlogID() + " but the link was on the iNaturalist website. "
                                            + "The link on the website will be recreated.");
                                    // Update the iNaturalist observation_field_values
                                    // Add "WildLog_ID" (iNaturalist Observation Field = https://www.inaturalist.org/observation_fields/7112)
                                    INatAPI.addObservationFieldValue(iNatID, 7112, Long.toString(foundLinkedOnINatID.getWildlogID()), 
                                            WildLogApp.getINaturalistToken());
                                    fixed++;
                                }
                            }
                            else {
                                INaturalistLinkedData linkedData = app.getDBI().findINaturalistLinkedData(foundWildLogID, iNatID, INaturalistLinkedData.class);
                                if (linkedData != null) {
                                    // CASE 3: Update data. The WildLogID is present on the iNat observation, and the iNat observation linked in the Workspace
                                    feedback.println("UpdateWL   - The iNaturalist Observation " + iNatID + " already has a linked WildLog Observation " 
                                            + foundWildLogID + ". The latest data will be downloaded.");
                                    // Update the LinkedData
                                    linkedData.setINaturalistData(GSON.toJson(iNatFullObs));
                                    try {
                                        app.getDBI().updateINaturalistLinkedData(linkedData);
                                    }
                                    catch (Exception ex) {
                                        WildLogApp.LOGGER.log(Level.ERROR, "ERROR: WildLog Database Error: WildLogID = {} | iNatID = {}", 
                                                linkedData.getWildlogID(), linkedData.getINaturalistID());
                                        WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                                        feedback.println("ERROR: WildLog Database Error!!!");
                                    }
                                    updated++;
                                }
                                else {
                                    // CASE 4: The WildLogID is present on the iNat observation, but the iNat observation is not linked in the Workspace
                                    // Create sighting
                                    Sighting sighting = app.getDBI().findSighting(foundWildLogID, Sighting.class);
                                    if (sighting == null) {
                                        feedback.println("ReCreateWL - The iNaturalist Observation " + iNatID + " already has a linked WildLog Observation " 
                                                + foundWildLogID + " but it is not linked in the Workspace and the WildLog Observation does not exist. "
                                                + "The WildLog Observation and link in the Workspace will be recreated.");
                                        sighting = createSighting(iNatFullObs, locationName, visitName);
                                        // Update the iNaturalist observation_field_values
                                        // Add "WildLog_ID" (iNaturalist Observation Field = https://www.inaturalist.org/observation_fields/7112)
                                        INatAPI.addObservationFieldValue(iNatID, 7112, Long.toString(sighting.getSightingCounter()), 
                                                WildLogApp.getINaturalistToken());
                                    }
                                    else {
                                        feedback.println("ReLinkWL   - The iNaturalist Observation " + iNatID + " already has a linked WildLog Observation " 
                                                + foundWildLogID + " but it is not linked in the Workspace. The link in the Workspace will be recreated.");
                                    }
                                    // Insert the LinkedData
                                    try {
                                        app.getDBI().createINaturalistLinkedData(new INaturalistLinkedData(
                                                sighting.getSightingCounter(), iNatID, GSON.toJson(iNatFullObs)));
                                    }
                                    catch (Exception ex) {
                                        WildLogApp.LOGGER.log(Level.ERROR, "ERROR: WildLog Database Error: WildLogID = {} | iNatID = {}", 
                                                sighting.getSightingCounter(), iNatID);
                                        WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                                        feedback.println("ERROR: WildLog Database Error!!!");
                                    }
                                    // Download the images
                                    importPhotos(iNatFullObs.getAsJsonArray("observation_photos"), sighting);
                                    fixed++;
                                }
                            }
                        }
                        catch (Exception ex) {
                            try {
                                WildLogApp.LOGGER.log(Level.ERROR, "Problematic JSON text:");
                                WildLogApp.LOGGER.log(Level.ERROR, GSON.toJson(lstObservationsJsonObjects.get(t)));
                            }
                            catch (Exception e) {
                                throw new Exception("Could not print the problematic JSON text...", ex);
                            }
                            throw ex;
                        }
                        // Update progress
                        setTaskProgress(5 + (int) (((double) (t + 1) / (double) lstObservationsJsonObjects.size()) * 94));
                        setMessage("Busy with the iNaturalist Import... " + getProgress() + "%");
                    }
                    feedback.println("");
                    feedback.println("+++++++++++ SUMMARY +++++++++++");
                    feedback.println("");
                    feedback.println("Added    : " + added);
                    feedback.println("Updated  : " + updated);
                    feedback.println("ReLinked : " + fixed);
                }
                catch (Exception ex) {
                    WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                    WLOptionPane.showMessageDialog(INatImportDialog.this,
                            "<html>There was a problem importing the iNaturalist data.</html>",
                            "Import Error", WLOptionPane.ERROR_MESSAGE);
                    if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("----------- ERROR ------------");
                        feedback.println(ex.toString());
                        feedback.println("------------------------------");
                        feedback.println("");
                    }
                }
                finally {
                    if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("---------- FINISHED ----------");
                        feedback.println("------------------------------");
                        feedback.println("");
                        feedback.flush();
                        feedback.close();
                    }
                }
                // Open the summary document
                UtilsFileProcessing.openFile(feedbackFile);
                setTaskProgress(100);
                setMessage("Done with the iNaturalist import");
                return null;
            }

            private Sighting createSighting(JsonObject iNatFullObs, String locationName, String visitName) {
                Sighting sighting = new Sighting();
                if (!iNatFullObs.get("time_observed_at_utc").isJsonNull()) {
                    ZonedDateTime zonedDateTime = ZonedDateTime.parse(iNatFullObs.get("time_observed_at_utc").getAsString(),
                            DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSX"));
                    zonedDateTime = zonedDateTime.withZoneSameInstant(ZoneId.systemDefault());
                    LocalDateTime localDateTime = zonedDateTime.toLocalDateTime();
                    sighting.setDate(UtilsTime.getDateFromLocalDateTime(localDateTime));
                    sighting.setTimeAccuracy(TimeAccuracy.GOOD);
                }
                else {
                    // As die tyd nie gevind kon word nie, neem dan aan dat net die datum beskikbaar was (iSpot uploads)
                    LocalDate localDate = LocalDate.parse(iNatFullObs.get("observed_on").getAsString(),
                            DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                    sighting.setDate(UtilsTime.getDateFromLocalDateTime(localDate.atStartOfDay()));
                    sighting.setTimeAccuracy(TimeAccuracy.GOOD);
                }
                sighting.setLocationName(locationName);
                sighting.setVisitName(visitName);
                String scientificName = iNatFullObs.get("taxon").getAsJsonObject().get("name").getAsString();
                String[] words = scientificName.split(" ");
                if (words.length > 2) {
                    scientificName = words[0] + " " + words[1];
                }
                List<Element> lstElements = app.getDBI().listElements(null, scientificName, null, Element.class);
                if (lstElements != null && lstElements.size() == 1) {
                    sighting.setElementName(lstElements.get(0).getPrimaryName());
                }
                else {
                    // If no match was found on an Element's Scientific Name, then use it as the Primary Name
                    if (app.getDBI().countElements(scientificName, null) == 0) {
                        Element element = new Element(scientificName);
                        element.setScientificName(scientificName);
                        app.getDBI().createElement(element);
                    }
                    sighting.setElementName(scientificName);
                }
                double latitude = iNatFullObs.get("latitude").getAsDouble();
                if (latitude < 0) {
                    sighting.setLatitude(Latitudes.SOUTH);
                }
                else 
                if (latitude > 0) {
                    sighting.setLatitude(Latitudes.NORTH);
                }
                else {
                    sighting.setLatitude(Latitudes.NONE);
                }
                sighting.setLatDegrees(UtilsGPS.getDegrees(Latitudes.NONE, latitude));
                sighting.setLatMinutes(UtilsGPS.getMinutes(latitude));
                sighting.setLatSeconds(UtilsGPS.getSeconds(latitude));
                double longitude = iNatFullObs.get("longitude").getAsDouble();
                if (longitude < 0) {
                    sighting.setLongitude(Longitudes.WEST);
                }
                else 
                if (longitude > 0) {
                    sighting.setLongitude(Longitudes.EAST);
                }
                else {
                    sighting.setLongitude(Longitudes.NONE);
                }
                sighting.setLonDegrees(UtilsGPS.getDegrees(Longitudes.NONE, longitude));
                sighting.setLonMinutes(UtilsGPS.getMinutes(longitude));
                sighting.setLonSeconds(UtilsGPS.getSeconds(longitude));
                if (!iNatFullObs.get("positional_accuracy").isJsonNull()) {
                    double accuracy = iNatFullObs.get("positional_accuracy").getAsDouble();
                    for (GPSAccuracy gpsAccuracy : GPSAccuracy.values()) {
                        if (accuracy >= gpsAccuracy.getMinMeters() && accuracy <= gpsAccuracy.getMaxMeters()) {
                            sighting.setGPSAccuracy(gpsAccuracy);
                            sighting.setGPSAccuracyValue(accuracy);
                            break;
                        }
                    }
                }
                else {
                    sighting.setGPSAccuracy(GPSAccuracy.AVERAGE);
                    sighting.setGPSAccuracyValue(GPSAccuracy.AVERAGE.getMaxMeters());
                }
                sighting.setLifeStatus(LifeStatus.ALIVE);
                sighting.setSightingEvidence(SightingEvidence.SEEN);
                sighting.setCertainty(Certainty.SURE);
                UtilsTime.calculateSunAndMoon(sighting);
                // Save the Sighting
                app.getDBI().createSighting(sighting, false);
                return sighting;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnImportActionPerformed

    private void importPhotos(JsonArray inJsonArrayPhotos, Sighting inSighting) throws MalformedURLException, IOException {
        
// FIXME: Die foto se EXIF data gaan verlore... Find uit hoe ek die oorspronklikke foto met EXIF kan kry...
        
        if (inJsonArrayPhotos != null) {
            for (int imageCounterINat = 0; imageCounterINat < inJsonArrayPhotos.size(); imageCounterINat++) {
                String photoURL = inJsonArrayPhotos.get(imageCounterINat).getAsJsonObject().get("photo").getAsJsonObject().get("large_url").getAsString()
                        .replace("large", "original");
                final Path tempFile = WildLogPaths.WILDLOG_TEMP.getAbsoluteFullPath().resolve(System.currentTimeMillis() + ".jpg");
                UtilsFileProcessing.createFileFromStream(new BufferedInputStream(new URL(photoURL).openStream()), tempFile);
                UtilsFileProcessing.performFileUpload(inSighting, Paths.get(Sighting.WILDLOG_FOLDER_PREFIX).resolve(inSighting.toPath()), 
                        new File[] {tempFile.toFile()}, new Runnable() {
                    @Override
                    public void run() {
                        // Delete die tydelikke file
                        try {
                            Files.delete(tempFile);
                        }
                        catch (IOException ex) {
                            WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                        }
                    }
                }, app, false, INatImportDialog.this, true, false);
            }
        }
    }
    
    private void btnFindMissingInWildLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindMissingInWildLogActionPerformed
        // Maak seker die Auth Token is OK
        if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
            INatAuthTokenDialog dialog = new INatAuthTokenDialog(this);
            dialog.setVisible(true);
            if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
                return;
            }
        }
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setTaskProgress(0);
                setMessage("Starting the check for broken iNaturalist-WildLog links");
                setTaskProgress(1);
                setMessage("Busy with the check for broken iNaturalist-WildLog links... " + getProgress() + "%");
                Path feedbackFile = WildLogPaths.getFullWorkspacePrefix().resolve("iNaturalistWildLogLinkReport.txt");
                PrintWriter feedback = null;
                try {
                    feedback = new PrintWriter(new FileWriter(feedbackFile.toFile()), true);
                    feedback.println("---------------------------------------------------------");
                    feedback.println("---------- iNaturalist and WildLog Link Report ----------");
                    feedback.println("----------   (Using iNaturalist as baseline)   ----------");
                    feedback.println("---------------------------------------------------------");
                    feedback.println("");
                    JsonElement userJsonElement = INatAPI.getAuthenticatedUser(WildLogApp.getINaturalistToken());
                    String loginName = userJsonElement.getAsJsonObject().get("login").getAsString();
                    setTaskProgress(2);
                    setMessage("Busy with the check for broken iNaturalist-WildLog links... " + getProgress() + "%");
                    List<JsonObject> lstObservationsJsonObjects = INatAPI.getUserObservations(loginName);
                    setTaskProgress(5);
                    setMessage("Busy with the check for broken iNaturalist-WildLog links... " + getProgress() + "%");
                    int countGoodLinks = 0;
                    for (int t = 0; t < lstObservationsJsonObjects.size(); t++) {
                        // Need to load the full iNat data to get the observation_field_values as well
                        JsonObject iNatFullObs = INatAPI.getObservation(lstObservationsJsonObjects.get(t).get("id").getAsLong()).getAsJsonObject();
                        long iNatID = iNatFullObs.get("id").getAsLong();
                        JsonElement observationFieldValues = iNatFullObs.get("observation_field_values");
                        long foundWildLogID = 0;
                        if (observationFieldValues != null) {
                            JsonArray arrayObsFieldValues = observationFieldValues.getAsJsonArray();
                            for (int i = 0; i < arrayObsFieldValues.size(); i++) {
                                // Soek vir "WildLog_ID" (iNaturalist Observation Field = https://www.inaturalist.org/observation_fields/7112)
                                if (arrayObsFieldValues.get(i).getAsJsonObject().get("observation_field_id").getAsInt() == 7112) {
                                    foundWildLogID = arrayObsFieldValues.get(i).getAsJsonObject().get("value").getAsLong();
                                    break;
                                }
                            }
                        }
                        if (foundWildLogID > 0) {
                            INaturalistLinkedData linkedData = app.getDBI().findINaturalistLinkedData(0, iNatID, INaturalistLinkedData.class);
                            if (linkedData == null || linkedData.getWildlogID() == 0) {
                                if (app.getDBI().countSightings(foundWildLogID, null, null, null) == 0) {
                                    feedback.println("iNatWrongLink  - The iNaturalist observation " + iNatID + " references the WildLog Observation "
                                            + foundWildLogID + " which is not in this Workspace.");
                                }
                                else {
                                    feedback.println("iNatBrokenLink - The iNaturalist observation " + iNatID + " references the WildLog Observation "
                                            + foundWildLogID + " which is present in this Workspace, but not marked as linked.");
                                }
                            }
                            else {
                                if (foundWildLogID != linkedData.getWildlogID()) {
                                    feedback.println("iNatMissMatch  - The iNaturalist observation " + iNatID + " references the WildLog Observation "
                                            + foundWildLogID + " which is not the same as " + linkedData.getWildlogID() + " which is expected by the "
                                            + "data in this Workspace.");
                                }
                                else {
                                    if (app.getDBI().countSightings(foundWildLogID, null, null, null) == 0) {
                                        feedback.println("iNatBadLink    - The iNaturalist observation " + iNatID + " references the WildLog Observation "
                                                + foundWildLogID + " which is not in this Workspace.");
                                    }
                                    else {
                                        // Don't log these (the link is good)
                                        countGoodLinks++;
                                    }
                                }
                            }
                        }
                        else {
                            feedback.println("iNatNotLinked  - The iNaturalist observation " + iNatID + " is not linked to any WildLog Workspace.");
                        }
                        setTaskProgress(5 + (int) (((double) (t + 1) / (double) lstObservationsJsonObjects.size()) * 94));
                        setMessage("Busy with the check for broken iNaturalist-WildLog links... " + getProgress() + "%");
                    }
                    feedback.println("");
                    feedback.println("iNatGoodLinks  - There are " + countGoodLinks + " good links between iNaturalist observations and this WildLog Workspace.");
                }
                catch (Exception ex) {
                    WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                    WLOptionPane.showMessageDialog(INatImportDialog.this,
                            "<html>There was a problem processing the iNaturalist data.</html>",
                            "Processing Error", WLOptionPane.ERROR_MESSAGE);
                    if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("----------- ERROR ------------");
                        feedback.println(ex.toString());
                        feedback.println("------------------------------");
                        feedback.println("");
                    }
                }
                finally {
                    if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("---------- FINISHED ----------");
                        feedback.println("------------------------------");
                        feedback.println("");
                        feedback.flush();
                        feedback.close();
                    }
                }
                // Open the summary document
                UtilsFileProcessing.openFile(feedbackFile);
                setTaskProgress(100);
                setMessage("Done with the check for broken iNaturalist-WildLog links");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnFindMissingInWildLogActionPerformed

    private void btnFindMissingInINaturalistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindMissingInINaturalistActionPerformed
        // Maak seker die Auth Token is OK
        if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
            INatAuthTokenDialog dialog = new INatAuthTokenDialog(this);
            dialog.setVisible(true);
            if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
                return;
            }
        }
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setTaskProgress(0);
                setMessage("Starting the check for broken WildLog-iNaturalist links");
                setTaskProgress(1);
                setMessage("Busy with the check for broken WildLog-iNaturalist links... " + getProgress() + "%");
                Path feedbackFile = WildLogPaths.getFullWorkspacePrefix().resolve("iNaturalistWildLogLinkReport.txt");
                PrintWriter feedback = null;
                try {
                    feedback = new PrintWriter(new FileWriter(feedbackFile.toFile()), true);
                    feedback.println("---------------------------------------------------------");
                    feedback.println("---------- iNaturalist and WildLog Link Report ----------");
                    feedback.println("----------     (Using WildLog as baseline)     ----------");
                    feedback.println("---------------------------------------------------------");
                    feedback.println("");
                    JsonElement userJsonElement = INatAPI.getAuthenticatedUser(WildLogApp.getINaturalistToken());
                    String loginName = userJsonElement.getAsJsonObject().get("login").getAsString();
                    setTaskProgress(2);
                    setMessage("Busy with the check for broken WildLog-iNaturalist links... " + getProgress() + "%");
                    List<JsonObject> lstObservationsJsonObjects = INatAPI.getUserObservations(loginName);
                    setTaskProgress(5);
                    setMessage("Busy with the check for broken WildLog-iNaturalist links... " + getProgress() + "%");
                    List<Long> lstINatIDs = new ArrayList<>(lstObservationsJsonObjects.size());
                    int t = 0;
                    for (JsonObject jsonObject : lstObservationsJsonObjects) {
                        // Need to load the full iNat data to get the observation_field_values as well
                        JsonObject iNatFullObs = INatAPI.getObservation(jsonObject.get("id").getAsLong()).getAsJsonObject();
                        lstINatIDs.add(iNatFullObs.get("id").getAsLong());
                        setTaskProgress(5 + (int) (((double) ++t / (double) lstObservationsJsonObjects.size()) * 64));
                        setMessage("Busy with the check for broken WildLog-iNaturalist links... " + getProgress() + "%");
                    }
                    setTaskProgress(70);
                    setMessage("Busy with the check for broken WildLog-iNaturalist links... " + getProgress() + "%");
                    List<INaturalistLinkedData> lstLinkedData = app.getDBI().listINaturalistLinkedDatas(INaturalistLinkedData.class);
                    int countGoodLinks = 0;
                    t = 0;
                    for (INaturalistLinkedData linkedData : lstLinkedData) {
                        if (app.getDBI().countSightings(linkedData.getWildlogID(), null, null, null) == 0) {
                            feedback.println("WildLogBadData - The Workspace data references the " + linkedData.getWildlogID() 
                                    + " WildLog Observation which does not exist in this WildLog Workspace.");
                        }
                        else {
                            boolean foundLink = false;
                            for (long iNatID : lstINatIDs) {
                                if (iNatID == linkedData.getINaturalistID()) {
                                    foundLink = true;
                                    // Don't log these (the link is good)
                                    countGoodLinks++;
                                    break;
                                }
                            }
                            if (!foundLink) {
                                feedback.println("iNatNotLinked  - The iNaturalist observation " + linkedData.getINaturalistID() 
                                        + " has linked data in this WildLog Workspace for WildLog Observation " + linkedData.getWildlogID() 
                                        + ", but is not linked on iNaturalist.");
                            }
                        }
                        setTaskProgress(70 + (int) (((double) ++t / (double) lstLinkedData.size()) * 29));
                        setMessage("Busy with the check for broken WildLog-iNaturalist links... " + getProgress() + "%");
                    }
                    feedback.println("");
                    feedback.println("iNatGoodLinks  - There are " + countGoodLinks + " good links between iNaturalist observations "
                            + "and this WildLog Workspace.");
                }
                catch (Exception ex) {
                    WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                    WLOptionPane.showMessageDialog(INatImportDialog.this,
                            "<html>There was a problem processing the iNaturalist data.</html>",
                            "Processing Error", WLOptionPane.ERROR_MESSAGE);
                if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("----------- ERROR ------------");
                        feedback.println(ex.toString());
                        feedback.println("------------------------------");
                        feedback.println("");
                    }
                }
                finally {
                    if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("---------- FINISHED ----------");
                        feedback.println("------------------------------");
                        feedback.println("");
                        feedback.flush();
                        feedback.close();
                    }
                }
                // Open the summary document
                UtilsFileProcessing.openFile(feedbackFile);
                setTaskProgress(100);
                setMessage("Done with the check for broken WildLog-iNaturalist links");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnFindMissingInINaturalistActionPerformed

    private void btnCompareScientificNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompareScientificNamesActionPerformed
        // Maak seker die Auth Token is OK
        if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
            INatAuthTokenDialog dialog = new INatAuthTokenDialog(this);
            dialog.setVisible(true);
            if (WildLogApp.getINaturalistToken() == null || WildLogApp.getINaturalistToken().isEmpty()) {
                return;
            }
        }
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setTaskProgress(0);
                setMessage("Starting the iNaturalist-WildLog scientific name comparison");
                setTaskProgress(1);
                setMessage("Busy with the iNaturalist-WildLog scientific name comparison... " + getProgress() + "%");
                Path feedbackFile = WildLogPaths.getFullWorkspacePrefix().resolve("iNaturalistWildLogLinkReport.txt");
                PrintWriter feedback = null;
                try {
                    feedback = new PrintWriter(new FileWriter(feedbackFile.toFile()), true);
                    feedback.println("--------------------------------------------------------------------");
                    feedback.println("---------- iNaturalist and WildLog Scientific Name Report ----------");
                    feedback.println("--------------------------------------------------------------------");
                    feedback.println("");
                    JsonElement userJsonElement = INatAPI.getAuthenticatedUser(WildLogApp.getINaturalistToken());
                    String loginName = userJsonElement.getAsJsonObject().get("login").getAsString();
                    setTaskProgress(2);
                    setMessage("Busy with the iNaturalist-WildLog scientific name comparison... " + getProgress() + "%");
                    List<JsonObject> lstObservationsJsonObjects = INatAPI.getUserObservations(loginName);
                    setTaskProgress(5);
                    setMessage("Busy with the iNaturalist-WildLog scientific name comparison... " + getProgress() + "%");
                    Map<String, List<String>> mapMismatches = new HashMap<>(15);
                    int namesMatch = 0;
                    for (int t = 0; t < lstObservationsJsonObjects.size(); t++) {
                        // Need to load the full iNat data to get the observation_field_values as well
                        JsonObject iNatFullObs = INatAPI.getObservation(lstObservationsJsonObjects.get(t).get("id").getAsLong()).getAsJsonObject();
                        long iNatID = iNatFullObs.get("id").getAsLong();
                        JsonElement observationFieldValues = iNatFullObs.get("observation_field_values");
                        long foundWildLogID = 0;
                        if (observationFieldValues != null) {
                            JsonArray arrayObsFieldValues = observationFieldValues.getAsJsonArray();
                            for (int i = 0; i < arrayObsFieldValues.size(); i++) {
                                // Soek vir "WildLog_ID" (iNaturalist Observation Field = https://www.inaturalist.org/observation_fields/7112)
                                if (arrayObsFieldValues.get(i).getAsJsonObject().get("observation_field_id").getAsInt() == 7112) {
                                    foundWildLogID = arrayObsFieldValues.get(i).getAsJsonObject().get("value").getAsLong();
                                    break;
                                }
                            }
                        }
                        // Get the scientific names
                        String iNatScientificName = iNatFullObs.get("taxon").getAsJsonObject().get("name").getAsString();
                        String[] words = iNatScientificName.split(" ");
                        if (words.length > 2) {
                            iNatScientificName = words[0] + " " + words[1];
                        }
                        if (foundWildLogID > 0) {
                            Sighting sighting = app.getDBI().findSighting(foundWildLogID, Sighting.class);
                            if (sighting != null) {
                                Element element = app.getDBI().findElement(sighting.getElementName(), Element.class);
                                if (element != null) {
                                    if (element.getScientificName() != null && element.getScientificName().equalsIgnoreCase(iNatScientificName)) {
                                        namesMatch++;
                                    }
                                    else {
                                        List<String> lstMismatches = mapMismatches.get(iNatScientificName);
                                        if (lstMismatches == null) {
                                            lstMismatches = new ArrayList<>(5);
                                            mapMismatches.put(iNatScientificName, lstMismatches);
                                        }
                                        lstMismatches.add("WildLogID [" + foundWildLogID + "] / iNaturalistID [" + iNatID + "]");
                                    }
                                }
                            }
                        }
                        setTaskProgress(5 + (int) (((double) (t + 1) / (double) lstObservationsJsonObjects.size()) * 94));
                        setMessage("Busy with the iNaturalist-WildLog scientific name comparison... " + getProgress() + "%");
                    }
                    feedback.println("");
                    feedback.println("There are " + namesMatch + " observations with correct matches between Scientific Names used in iNaturalist and this WildLog Workspace.");
                    feedback.println("");
                    feedback.println("");
                    feedback.println("+++++ MISMATCHED SCIENTIFIC NAMES +++++");
                    for (Map.Entry<String, List<String>> entry : mapMismatches.entrySet()) {
                        feedback.println(entry.getKey() + " [" + entry.getValue().size() + " mismatches]");
                        for (String mismatch : entry.getValue()) {
                            feedback.println("    " + mismatch);
                        }
                        feedback.println("");
                    }
                }
                catch (Exception ex) {
                    WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                    WLOptionPane.showMessageDialog(INatImportDialog.this,
                            "<html>There was a problem processing the iNaturalist data.</html>",
                            "Processing Error", WLOptionPane.ERROR_MESSAGE);
                    if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("----------- ERROR ------------");
                        feedback.println(ex.toString());
                        feedback.println("------------------------------");
                        feedback.println("");
                    }
                }
                finally {
                    if (feedback != null) {
                        feedback.println("");
                        feedback.println("------------------------------");
                        feedback.println("---------- FINISHED ----------");
                        feedback.println("------------------------------");
                        feedback.println("");
                        feedback.flush();
                        feedback.close();
                    }
                }
                // Open the summary document
                UtilsFileProcessing.openFile(feedbackFile);
                setTaskProgress(100);
                setMessage("Done with the iNaturalist-WildLog scientific name comparison");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnCompareScientificNamesActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompareScientificNames;
    private javax.swing.JButton btnFindMissingInINaturalist;
    private javax.swing.JButton btnFindMissingInWildLog;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnViewWebsite;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlButtons;
    // End of variables declaration//GEN-END:variables
}
