package wildlog.ui.dialogs;

import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.logging.log4j.Level;
import org.jdesktop.application.Application;
import wildlog.WildLogApp;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.WLFileChooser;
import wildlog.ui.helpers.filters.WorkspaceFilter;
import wildlog.ui.utils.DummyTaskbarFrame;
import wildlog.utils.WildLogPaths;


public class WorkspacePickerDialog extends JDialog {
    private Path workspacePath = null;
    private boolean selectionMade = false;

    public WorkspacePickerDialog() {
        super(new DummyTaskbarFrame("WildLog Workspace", new ImageIcon(
                WildLogApp.getApplication().getClass().getResource("resources/icons/WildLog Icon.gif")).getImage()));
        WildLogApp.LOGGER.log(Level.INFO, "[WorkspacePickerDialog]");
        initComponents();
        pack();
        setLocationRelativeTo(null);
        UtilsDialog.addModalBackgroundPanel(this, null);
        UtilsDialog.addEscapeKeyListener(this);
        // Luister ook op die editor vir wanneer mens iets tik
        cmbWorkspacePath.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                updateActivePath((String) cmbWorkspacePath.getEditor().getItem());
            }
        });
        // Lees die wildloghome file vir die lys van workspaces, en laai dit dan in die combobox
        setupWorkspaceList();
    }
    
// TODO: Maak dat mens workspaces kan delete uit die lys
// TODO: Maak dat edits nie die ry oorskryf nie, maar eerder 'n nuwe ry by sit (eers as mens save)
    
    private void setupWorkspaceList() {
        // Try to read the settings file containing the wildloghome (active workspace)
        try {
            // If the file does not exist create it before attempting to read it
            if (!Files.exists(WildLogApp.getACTIVE_WILDLOG_SETTINGS_FOLDER().resolve("wildloghome"))) {
                writeDefaultWildLogHome();
            }
            // Read the wildloghome file
            populateWorkspaceComboBox(configureWildLogHomeBasedOnSettingsFile());
        }
        catch (IOException ex) {
            // Daar was 'n probleem om die wildloghome settings file te lees, probeer om 'n nuwe wildloghome file te maak
            WildLogApp.LOGGER.log(Level.ERROR, "Could not read the wildloghome file. Will try to create a new one...");
            WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
            writeDefaultWildLogHome();
            try {
                populateWorkspaceComboBox(configureWildLogHomeBasedOnSettingsFile());
            }
            catch (IOException ioex) {
                // As ek steeds nie 'n wildloghome file kan gelees kry nie vra die user vir 'n wildloghome om te gebruik
                WildLogApp.LOGGER.log(Level.ERROR, ioex.toString(), ioex);
                configureWildLogHomeBasedOnFileBrowser(null, true);
            }
        }
    }
    
    private void populateWorkspaceComboBox(List<Path> lstWorkspaces) {
        cmbWorkspacePath.setModel(new DefaultComboBoxModel<>());
        if (!lstWorkspaces.isEmpty()) {
            String selectedWorkspace = lstWorkspaces.get(0).toString().trim(); // will always be the first row
            Collections.sort(lstWorkspaces);
            for (Path worspace : lstWorkspaces) {
                cmbWorkspacePath.addItem(worspace.toString().trim());
            }
            cmbWorkspacePath.setSelectedItem(selectedWorkspace);
        }
        else {
            cmbWorkspacePath.addItem(calculateInitialWorkspacePath().trim());
        }
        updateActivePath((String) cmbWorkspacePath.getSelectedItem());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbWorkspacePath = new javax.swing.JComboBox<>();
        btnBrowse = new javax.swing.JButton();
        btnChooseWorkspace = new javax.swing.JButton();
        btnCloudSync = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("WildLog Workspace");
        setIconImage(new ImageIcon(WildLogApp.getApplication().getClass().getResource("resources/icons/WildLog Icon.gif")).getImage());
        setMinimumSize(new java.awt.Dimension(550, 290));
        setModal(true);

        jLabel3.setBackground(new java.awt.Color(0, 153, 0));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/About.gif"))); // NOI18N
        jLabel3.setOpaque(true);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("WildLog Workspace");

        jLabel2.setBackground(new java.awt.Color(0, 153, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/About.gif"))); // NOI18N
        jLabel2.setOpaque(true);

        cmbWorkspacePath.setEditable(true);
        cmbWorkspacePath.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cmbWorkspacePath.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        cmbWorkspacePath.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbWorkspacePathItemStateChanged(evt);
            }
        });

        btnBrowse.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBrowse.setText("Browse");
        btnBrowse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBrowse.setMargin(new java.awt.Insets(2, 12, 2, 12));
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnChooseWorkspace.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnChooseWorkspace.setText("OPEN / CREATE");
        btnChooseWorkspace.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnChooseWorkspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseWorkspaceActionPerformed(evt);
            }
        });

        btnCloudSync.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnCloudSync.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Sync.png"))); // NOI18N
        btnCloudSync.setText("Cloud Download");
        btnCloudSync.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCloudSync.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnCloudSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloudSyncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCloudSync)
                                .addGap(10, 10, 10)
                                .addComponent(btnChooseWorkspace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cmbWorkspacePath, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBrowse))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(lblTitle)
                .addGap(5, 5, 5)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbWorkspacePath, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChooseWorkspace, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCloudSync, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseWorkspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseWorkspaceActionPerformed
        if (workspacePath != null) {
            // Write the workspaces in the wildloghome file
            writeDefaultWildLogHome();
            // Set the active workspace prefix
            WildLogPaths.setWorkspacePrefix(workspacePath.toString());
            // Create the workspace folder (if needed)
            if (Files.notExists(WildLogPaths.getFullWorkspacePrefix())) {
                try {
                    Files.createDirectories(WildLogPaths.getFullWorkspacePrefix());
                }
                catch (IOException ioex) {
                    WildLogApp.LOGGER.log(Level.ERROR, "Can't create new workspace folder!");
                    WildLogApp.LOGGER.log(Level.ERROR, ioex.toString(), ioex);
                }
            }
            selectionMade = true;
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnChooseWorkspaceActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        if (configureWildLogHomeBasedOnFileBrowser((DummyTaskbarFrame) getParent(), false)) {
            cmbWorkspacePath.getEditor().setItem(WildLogPaths.getFullWorkspacePrefix().toString());
            updateActivePath(WildLogPaths.getFullWorkspacePrefix().toString());
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnCloudSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloudSyncActionPerformed
// TODO: Download via ID (free users) or list of IDs based on token
    }//GEN-LAST:event_btnCloudSyncActionPerformed

    private void cmbWorkspacePathItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbWorkspacePathItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            updateActivePath((String) evt.getItem());
        }
    }//GEN-LAST:event_cmbWorkspacePathItemStateChanged

    private void updateActivePath(String inPath) {
        workspacePath = Path.of(inPath).toAbsolutePath().normalize();
        System.out.println("SETTING " + workspacePath);
        if (Files.notExists(workspacePath)) {
            btnChooseWorkspace.setText("CREATE WORKSPACE");
            btnCloudSync.setEnabled(true);
        }
        else {
            if (Files.exists(workspacePath.resolve(WildLogPaths.WILDLOG_DATA.getRelativePath()))
                    && Files.exists(workspacePath.resolve(WildLogPaths.WILDLOG_FILES.getRelativePath()))) {
                btnChooseWorkspace.setText("OPEN WORKSPACE");
                btnCloudSync.setEnabled(false);
            }
            else {
                btnChooseWorkspace.setText("CREATE WORKSPACE");
                btnCloudSync.setEnabled(true);
            }
        }
    }
    
    private void writeDefaultWildLogHome() {
        FileWriter writer = null;
        try {
            writer = new FileWriter(WildLogApp.getACTIVE_WILDLOG_SETTINGS_FOLDER().resolve("wildloghome").toFile());
            // Write the selected (active / default) workspace first
            String selectedWorkspace = (String) cmbWorkspacePath.getSelectedItem();
            WildLogApp.LOGGER.log(Level.DEBUG, "Writing wildloghome (selected): " + selectedWorkspace);
            writer.write(selectedWorkspace.trim() + System.lineSeparator());
            // Write the rest of the know workspaces
            for (int t = 0; t < cmbWorkspacePath.getItemCount(); t++) {
                String workspace = (String) cmbWorkspacePath.getItemAt(t);
                if (!workspace.equals(selectedWorkspace)) {
                    WildLogApp.LOGGER.log(Level.DEBUG, "Writing wildloghome: " + workspace);
                    writer.write(workspace.trim() + System.lineSeparator());
                }
            }
        }
        catch (IOException ioex) {
            WildLogApp.LOGGER.log(Level.ERROR, ioex.toString(), ioex);
        }
        finally {
            if (writer != null) {
                try {
                    writer.flush();
                    writer.close();
                }
                catch (IOException ioex) {
                    WildLogApp.LOGGER.log(Level.ERROR, ioex.toString(), ioex);
                }
            }
        }
    }

    private String calculateInitialWorkspacePath() {
        Path defaultWorkspacePath = new File(File.separator).toPath().resolve(WildLogPaths.DEFAULT_WORKSPACE_NAME.getRelativePath());
        String wildloghome = "";
        if (defaultWorkspacePath.toFile().canWrite()) {
            wildloghome = defaultWorkspacePath.toAbsolutePath().toString();
        }
        else {
            wildloghome = System.getProperty("user.home") + File.separatorChar + WildLogPaths.DEFAULT_WORKSPACE_NAME.getRelativePath();
        }
        return Paths.get(wildloghome).toAbsolutePath().normalize().toString();
    }
    
    /**
     * Read all the Workspace paths saved in the wildloghome file.
     * 
     * Note: This can be a folder path or even a network URL
     *       - C:\WildLogToets\WildLog
     *       - W:\
     *       - \\weimaster\WildLogDinokeng
     */
    public List<Path> configureWildLogHomeBasedOnSettingsFile() throws IOException {
        List<Path> lstWorkspacePaths = new ArrayList<>();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(WildLogApp.getACTIVE_WILDLOG_SETTINGS_FOLDER().resolve("wildloghome").toFile()));
            // Get the first (default) workspace path
            String workspacePath = reader.readLine();
            WildLogPaths.setWorkspacePrefix(workspacePath);
            lstWorkspacePaths.add(WildLogPaths.getFullWorkspacePrefix());
            // Read the other workspace paths
            while ((workspacePath = reader.readLine()) != null) {
                lstWorkspacePaths.add(Paths.get(workspacePath).toAbsolutePath().normalize());
            }
        }
        // No catch: The error should be thrown if something goes wrong
        finally {
            if (reader != null) {
                try {
                    reader.close();
                }
                catch (IOException ex) {
                    WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
                }
            }
        }
        return lstWorkspacePaths;
    }

    public static boolean configureWildLogHomeBasedOnFileBrowser(final JFrame inParent, boolean inTerminateIfNotSelected) {
        WLFileChooser fileChooser = new WLFileChooser();
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.setDialogTitle("Please select the WildLog Workspace to use.");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fileChooser.setFileFilter(new WorkspaceFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setMultiSelectionEnabled(false);
        int result = fileChooser.showOpenDialog(inParent);
        if (result == JFileChooser.APPROVE_OPTION && fileChooser.getSelectedFile() != null) {
            Path selectedPath;
            if (fileChooser.getSelectedFile().isDirectory()) {
                selectedPath = fileChooser.getSelectedFile().toPath();
            }
            else {
                selectedPath = fileChooser.getSelectedFile().getParentFile().toPath();
            }
            WildLogPaths.setWorkspacePrefix(selectedPath.toAbsolutePath().toString());
            return true;
        }
        else {
            if (inTerminateIfNotSelected) {
                Application.getInstance().exit();
            }
        }
        return false;
    }

    public boolean isSelectionMade() {
        return selectionMade;
    }
    
    @Override
    public void setVisible(boolean visible) {
        super.setVisible(visible);
        if (!visible) {
            ((DummyTaskbarFrame) getParent()).dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnChooseWorkspace;
    private javax.swing.JButton btnCloudSync;
    private javax.swing.JComboBox<String> cmbWorkspacePath;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables
}
