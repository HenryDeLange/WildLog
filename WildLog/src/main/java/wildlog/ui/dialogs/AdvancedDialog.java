package wildlog.ui.dialogs;

import java.awt.Cursor;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.Level;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.dataobjects.WildLogFile;
import wildlog.data.dataobjects.interfaces.DataObjectWithGPS;
import wildlog.maps.utils.UtilsGPS;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.WLOptionPane;
import wildlog.ui.panels.PanelVisit;
import wildlog.utils.UtilsTime;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.UtilsImageProcessing;
import wildlog.utils.WildLogApplicationTypes;
import wildlog.utils.WildLogPaths;


public class AdvancedDialog extends JDialog {
    private final WildLogApp app;
    private final Visit visit;
    private final PanelVisit panelVisit;


    public AdvancedDialog(WildLogApp inApp, Visit inVisit, PanelVisit inPanelVisit) {
        super(inApp.getMainFrame());
        WildLogApp.LOGGER.log(Level.INFO, "[AdvancedDialog]");
        // Set passed in values
        app = inApp;
        visit = inVisit;
        panelVisit = inPanelVisit;
        // Auto generated code
        initComponents();
        // Setup the default behavior
        UtilsDialog.addEscapeKeyListener(this);
        UtilsDialog.setDialogToCenter(app.getMainFrame(), this);
        UtilsDialog.addModalBackgroundPanel(app.getMainFrame(), this);
        UtilsDialog.addModalBackgroundPanel(this, null);
        // Enforce user access
        if (WildLogApp.WILDLOG_APPLICATION_TYPE == WildLogApplicationTypes.WILDLOG_WEI_VOLUNTEER) {
            btnMergeSightings.setEnabled(false);
            btnMergeSightings.setVisible(false);
            btnMoveVisit.setEnabled(false);
            btnMoveVisit.setVisible(false);
        }
        // Pack
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCorrectTime = new javax.swing.JButton();
        btnSetAllGPS = new javax.swing.JButton();
        btnSetSunAndMoon = new javax.swing.JButton();
        btnSetDuration = new javax.swing.JButton();
        btnMergeSightings = new javax.swing.JButton();
        btnMoveVisit = new javax.swing.JButton();
        btnDuplicateSightings = new javax.swing.JButton();
        btnChecklist = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Advanced Options");
        setIconImage(new ImageIcon(app.getClass().getResource("resources/icons/WildLog Icon Selected.gif")).getImage());
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        btnCorrectTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/AdjustTime.png"))); // NOI18N
        btnCorrectTime.setText("Adjust the Date and Time for all Observations");
        btnCorrectTime.setToolTipText("Automatically adjust the time of all Observations by the specified amount.");
        btnCorrectTime.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCorrectTime.setFocusPainted(false);
        btnCorrectTime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCorrectTime.setIconTextGap(8);
        btnCorrectTime.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnCorrectTime.setMaximumSize(new java.awt.Dimension(450, 35));
        btnCorrectTime.setMinimumSize(new java.awt.Dimension(450, 35));
        btnCorrectTime.setName("btnCorrectTime"); // NOI18N
        btnCorrectTime.setPreferredSize(new java.awt.Dimension(450, 35));
        btnCorrectTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCorrectTimeActionPerformed(evt);
            }
        });
        getContentPane().add(btnCorrectTime);

        btnSetAllGPS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/GPS.png"))); // NOI18N
        btnSetAllGPS.setText("Set one GPS Point for all Observations (also recalculates Sun and Moon)");
        btnSetAllGPS.setToolTipText("All Observations for this Period will be assigned the specified GPS value. This will also update the Sun and Moon Phase.");
        btnSetAllGPS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSetAllGPS.setFocusPainted(false);
        btnSetAllGPS.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSetAllGPS.setIconTextGap(6);
        btnSetAllGPS.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnSetAllGPS.setMaximumSize(new java.awt.Dimension(450, 35));
        btnSetAllGPS.setMinimumSize(new java.awt.Dimension(450, 35));
        btnSetAllGPS.setName("btnSetAllGPS"); // NOI18N
        btnSetAllGPS.setPreferredSize(new java.awt.Dimension(450, 35));
        btnSetAllGPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetAllGPSActionPerformed(evt);
            }
        });
        getContentPane().add(btnSetAllGPS);

        btnSetSunAndMoon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/SunAndMoon_big.png"))); // NOI18N
        btnSetSunAndMoon.setText("Recalculate the Sun (Time of Day) and Moon Phase");
        btnSetSunAndMoon.setToolTipText("Automatically calculate the Sun and Moon Phase for all Observations based on the date and GPS position.");
        btnSetSunAndMoon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSetSunAndMoon.setFocusPainted(false);
        btnSetSunAndMoon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSetSunAndMoon.setIconTextGap(6);
        btnSetSunAndMoon.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnSetSunAndMoon.setMaximumSize(new java.awt.Dimension(450, 35));
        btnSetSunAndMoon.setMinimumSize(new java.awt.Dimension(450, 35));
        btnSetSunAndMoon.setName("btnSetSunAndMoon"); // NOI18N
        btnSetSunAndMoon.setPreferredSize(new java.awt.Dimension(450, 35));
        btnSetSunAndMoon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetSunAndMoonActionPerformed(evt);
            }
        });
        getContentPane().add(btnSetSunAndMoon);

        btnSetDuration.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Duration.png"))); // NOI18N
        btnSetDuration.setText("Recalculate the Duration");
        btnSetDuration.setToolTipText("Automatically calculate the duration for all Observations based on the dates of the uploaded files.");
        btnSetDuration.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSetDuration.setFocusPainted(false);
        btnSetDuration.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSetDuration.setIconTextGap(8);
        btnSetDuration.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnSetDuration.setMaximumSize(new java.awt.Dimension(450, 35));
        btnSetDuration.setMinimumSize(new java.awt.Dimension(450, 35));
        btnSetDuration.setName("btnSetDuration"); // NOI18N
        btnSetDuration.setPreferredSize(new java.awt.Dimension(450, 35));
        btnSetDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDurationActionPerformed(evt);
            }
        });
        getContentPane().add(btnSetDuration);

        btnMergeSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/File.png"))); // NOI18N
        btnMergeSightings.setText("Move Files from one Observation to another Observation");
        btnMergeSightings.setToolTipText("Move the Files from one Observation to another Observation. Optionally deleting the original Observation in the process.");
        btnMergeSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMergeSightings.setFocusPainted(false);
        btnMergeSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnMergeSightings.setIconTextGap(8);
        btnMergeSightings.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnMergeSightings.setMaximumSize(new java.awt.Dimension(450, 35));
        btnMergeSightings.setMinimumSize(new java.awt.Dimension(450, 35));
        btnMergeSightings.setName("btnMergeSightings"); // NOI18N
        btnMergeSightings.setPreferredSize(new java.awt.Dimension(450, 35));
        btnMergeSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMergeSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnMergeSightings);

        btnMoveVisit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/LocationList.gif"))); // NOI18N
        btnMoveVisit.setText("Move this Period to a different Place");
        btnMoveVisit.setToolTipText("Move this Period to a different Place.");
        btnMoveVisit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMoveVisit.setFocusPainted(false);
        btnMoveVisit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnMoveVisit.setIconTextGap(6);
        btnMoveVisit.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnMoveVisit.setMaximumSize(new java.awt.Dimension(450, 35));
        btnMoveVisit.setMinimumSize(new java.awt.Dimension(450, 35));
        btnMoveVisit.setName("btnMoveVisit"); // NOI18N
        btnMoveVisit.setPreferredSize(new java.awt.Dimension(450, 35));
        btnMoveVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveVisitActionPerformed(evt);
            }
        });
        getContentPane().add(btnMoveVisit);

        btnDuplicateSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Sighting.gif"))); // NOI18N
        btnDuplicateSightings.setText("Find possible duplicate Observations");
        btnDuplicateSightings.setToolTipText("Indentify possible duplicate Observations for for this Period.");
        btnDuplicateSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDuplicateSightings.setFocusPainted(false);
        btnDuplicateSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDuplicateSightings.setIconTextGap(8);
        btnDuplicateSightings.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnDuplicateSightings.setMaximumSize(new java.awt.Dimension(450, 35));
        btnDuplicateSightings.setMinimumSize(new java.awt.Dimension(450, 35));
        btnDuplicateSightings.setName("btnDuplicateSightings"); // NOI18N
        btnDuplicateSightings.setPreferredSize(new java.awt.Dimension(450, 35));
        btnDuplicateSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDuplicateSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnDuplicateSightings);

        btnChecklist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/CheckList.png"))); // NOI18N
        btnChecklist.setText("Add Observations using a Checklist");
        btnChecklist.setToolTipText("Open a popup box to add Observations in a checklist format.");
        btnChecklist.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnChecklist.setFocusPainted(false);
        btnChecklist.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnChecklist.setIconTextGap(8);
        btnChecklist.setMargin(new java.awt.Insets(2, 10, 2, 8));
        btnChecklist.setMaximumSize(new java.awt.Dimension(450, 35));
        btnChecklist.setMinimumSize(new java.awt.Dimension(450, 35));
        btnChecklist.setName("btnChecklist"); // NOI18N
        btnChecklist.setPreferredSize(new java.awt.Dimension(450, 35));
        btnChecklist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChecklistActionPerformed(evt);
            }
        });
        getContentPane().add(btnChecklist);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCorrectTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCorrectTimeActionPerformed
        DateChangeDialog dialog = new DateChangeDialog(app, this, visit);
        dialog.setVisible(true);
        panelVisit.doTheRefresh(null);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnCorrectTimeActionPerformed

    private void btnMoveVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveVisitActionPerformed
        int result = WLOptionPane.showConfirmDialog(this,
                "<html>It is strongly recommended that you backup your Workspace (WildLog folder) before continuing. <br>"
                        + "Do you want to continue now?</html>",
                "Warning!", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if (result == JOptionPane.OK_OPTION) {
            MoveVisitDialog dialog = new MoveVisitDialog(app, visit);
            dialog.setVisible(true);
        }
        panelVisit.setVisit(app.getDBI().findVisit(visit.getID(), null, true, Visit.class));
        panelVisit.setLocationForVisit(app.getDBI().findLocation(panelVisit.getVisit().getLocationID(), null, Location.class));
        panelVisit.doTheRefresh(null);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnMoveVisitActionPerformed

    private void btnSetAllGPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetAllGPSActionPerformed
        DataObjectWithGPS dataObjectWithGPS = new DataObjectWithGPS() {};
        GPSDialog dialog = new GPSDialog(app, this, dataObjectWithGPS);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            List<Sighting> listSightings = app.getDBI().listSightings(0, 0, visit.getID(), false, Sighting.class);
            for (Sighting sighting : listSightings) {
                sighting.setLatitude(dataObjectWithGPS.getLatitude());
                sighting.setLatDegrees(dataObjectWithGPS.getLatDegrees());
                sighting.setLatMinutes(dataObjectWithGPS.getLatMinutes());
                sighting.setLatSeconds(dataObjectWithGPS.getLatSeconds());
                sighting.setLongitude(dataObjectWithGPS.getLongitude());
                sighting.setLonDegrees(dataObjectWithGPS.getLonDegrees());
                sighting.setLonMinutes(dataObjectWithGPS.getLonMinutes());
                sighting.setLonSeconds(dataObjectWithGPS.getLonSeconds());
                sighting.setGPSAccuracy(dataObjectWithGPS.getGPSAccuracy());
                sighting.setGPSAccuracyValue(dataObjectWithGPS.getGPSAccuracyValue());
                // Because the sighting's GPS point changed I need to recalculate the Sun and Moon phase
                UtilsTime.calculateSunAndMoon(sighting);
                // Save the changes
                app.getDBI().updateSighting(sighting);
            }
            panelVisit.doTheRefresh(null);
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSetAllGPSActionPerformed

    private void btnSetDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDurationActionPerformed
        getGlassPane().setVisible(true);
        getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        List<Sighting> listSightings = app.getDBI().listSightings(0, 0, visit.getID(), false, Sighting.class);
        for (Sighting sighting : listSightings) {
            List<WildLogFile> files = app.getDBI().listWildLogFiles(sighting.getWildLogFileID(), null, WildLogFile.class);
            if (files != null && !files.isEmpty()) {
                Collections.sort(files);
                Date startDate = UtilsImageProcessing.getDateFromFile(files.get(0).getAbsolutePath());
                Date endDate = UtilsImageProcessing.getDateFromFile(files.get(files.size()-1).getAbsolutePath());
                double difference = (endDate.getTime() - startDate.getTime())/1000;
                int minutes = (int)difference/60;
                double seconds = difference - minutes*60.0;
                sighting.setDurationMinutes(minutes);
                sighting.setDurationSeconds(seconds);
            }
            // Save the changes
            app.getDBI().updateSighting(sighting);
        }
        panelVisit.doTheRefresh(null);
        getGlassPane().setCursor(Cursor.getDefaultCursor());
        getGlassPane().setVisible(false);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSetDurationActionPerformed

    private void btnDuplicateSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDuplicateSightingsActionPerformed
        Path feedbackFile = WildLogPaths.getFullWorkspacePrefix().resolve("DetectDuplicatesFeedback.txt");
        PrintWriter feedback = null;
        try {
            feedback = new PrintWriter(new FileWriter(feedbackFile.toFile()), true);
            List<Sighting> listSightings = app.getDBI().listSightings(0, 0, visit.getID(), false, Sighting.class);
            feedback.println("Checking " + listSightings.size() + " Observations for similarities.");
            feedback.println("___________________________________________________________________________");
            List<Sighting> listSightingsToCompare = app.getDBI().listSightings(0, 0, visit.getID(), false, Sighting.class);
            for (Sighting sighting : listSightings) {
                for (int t = listSightingsToCompare.size() - 1; t >= 0; t--) {
                    Sighting tempSighting = listSightingsToCompare.get(t);
                    if (sighting.getID() == tempSighting.getID()) {
                        listSightingsToCompare.remove(t);
                    }
                    else {
                        if (sighting.getElementID() == tempSighting.getElementID()
                                && sighting.getLocationID() == tempSighting.getLocationID()
                                && sighting.getVisitID() == tempSighting.getVisitID()) {
                            int rating = 0;
                            if (sighting.getDate().getTime() == tempSighting.getDate().getTime()) {
                                // The same time
                                rating = rating + 5;
                            }
                            else
                            if (sighting.getDate().getTime()/(600000) == tempSighting.getDate().getTime()/(600000)) {
                                // Only 600000 milliseconds (10 minutes) appart
                                rating = rating + 2;
                            }
                            if (UtilsGPS.getLatitudeString(sighting).equals(UtilsGPS.getLatitudeString(tempSighting))
                                    && UtilsGPS.getLongitudeString(sighting).equals(UtilsGPS.getLongitudeString(tempSighting))) {
                                // The same place
                                rating = rating + 5;
                            }
                            else
                            if (Math.abs((int)(UtilsGPS.getLatDecimalDegree(sighting)*100) - (int)(UtilsGPS.getLatDecimalDegree(tempSighting)*100)) <= 1
                                    && Math.abs((int)(UtilsGPS.getLonDecimalDegree(sighting)*100) - (int)(UtilsGPS.getLonDecimalDegree(tempSighting)*100)) <= 1) {
                                // GPS values close together
                                rating = rating + 2;
                            }
                            // Check rating
                            if (rating >= 10) {
                                feedback.println("EXTREMELY SIMILAR: " + sighting.getID() + " and " + tempSighting.getID());
                            }
                            else
                            if (rating >= 7) {
                                feedback.println("VERY SIMILAR     : " + sighting.getID() + " and " + tempSighting.getID());
                            }
                            else
                            if (rating >= 4) {
                                feedback.println("FAIRLY SIMILAR   : " + sighting.getID() + " and " + tempSighting.getID());
                            }
                            else
                            if (rating >= 2) {
                                feedback.println("SLIGHTLY SIMILAR : " + sighting.getID() + " and " + tempSighting.getID());
                            }
                        }
                    }
                }
            }
        }
        catch (IOException ex) {
            WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
        }
        finally {
            if (feedback != null) {
                feedback.flush();
                feedback.close();
            }
            // Open the summary document
            UtilsFileProcessing.openFile(feedbackFile);
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnDuplicateSightingsActionPerformed

    private void btnChecklistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChecklistActionPerformed
        ChecklistDialog dialog = new ChecklistDialog(app, this,
                app.getDBI().findLocation(panelVisit.getVisit().getLocationID(), null, Location.class),
                visit, panelVisit);
        dialog.setVisible(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnChecklistActionPerformed

    private void btnSetSunAndMoonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetSunAndMoonActionPerformed
        List<Sighting> listSightings = app.getDBI().listSightings(0, 0, visit.getID(), false, Sighting.class);
        for (Sighting sighting : listSightings) {
            // Recalculate the Sun and Moon phase
            UtilsTime.calculateSunAndMoon(sighting);
            app.getDBI().updateSighting(sighting);
        }
        panelVisit.doTheRefresh(null);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSetSunAndMoonActionPerformed

    private void btnMergeSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMergeSightingsActionPerformed
        MergeSightingDialog dialog = new MergeSightingDialog(app, visit);
        dialog.setVisible(true);
        panelVisit.doTheRefresh(null);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnMergeSightingsActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChecklist;
    private javax.swing.JButton btnCorrectTime;
    private javax.swing.JButton btnDuplicateSightings;
    private javax.swing.JButton btnMergeSightings;
    private javax.swing.JButton btnMoveVisit;
    private javax.swing.JButton btnSetAllGPS;
    private javax.swing.JButton btnSetDuration;
    private javax.swing.JButton btnSetSunAndMoon;
    // End of variables declaration//GEN-END:variables
}
