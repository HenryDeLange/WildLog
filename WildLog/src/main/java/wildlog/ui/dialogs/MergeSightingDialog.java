package wildlog.ui.dialogs;

import java.awt.Component;
import java.util.List;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.Level;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.INaturalistLinkedData;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.dataobjects.WildLogFile;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.WLOptionPane;
import wildlog.utils.UtilsTime;


public class MergeSightingDialog extends JDialog {
    private final WildLogApp app;
    private final Visit visit;

    
    public MergeSightingDialog(WildLogApp inApp, Visit inVisit) {
        super();
        WildLogApp.LOGGER.log(Level.INFO, "[MergeSightingDialog]");
        app = inApp;
        visit = inVisit;
        initComponents();
        // Load data
        loadLists();
        // Setup the default behavior
        UtilsDialog.setDialogToCenter(app.getMainFrame(), this);
        UtilsDialog.addEscapeKeyListener(this);
        UtilsDialog.addModalBackgroundPanel(app.getMainFrame(), this);
        // Setup the glasspane on this dialog as well for the JOptionPane's
        UtilsDialog.addModalBackgroundPanel(this, null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSightingsTo = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstSightingsFrom = new javax.swing.JList();
        btnConfirm = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        chkDeleteSightings = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Move Observation Files To A New Observation");
        setIconImage(new ImageIcon(app.getClass().getResource("resources/icons/Visit.gif")).getImage());
        setMinimumSize(new java.awt.Dimension(900, 500));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(900, 500));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Select the Observation(s) to move the Files from:");
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        lstSightingsTo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstSightingsTo.setName("lstSightingsTo"); // NOI18N
        lstSightingsTo.setSelectionBackground(new java.awt.Color(125, 120, 93));
        jScrollPane2.setViewportView(lstSightingsTo);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        lstSightingsFrom.setName("lstSightingsFrom"); // NOI18N
        lstSightingsFrom.setSelectionBackground(new java.awt.Color(125, 120, 93));
        jScrollPane3.setViewportView(lstSightingsFrom);

        btnConfirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Update.png"))); // NOI18N
        btnConfirm.setToolTipText("Move the selected Period to the new Place.");
        btnConfirm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConfirm.setFocusPainted(false);
        btnConfirm.setName("btnConfirm"); // NOI18N
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Select the Observation to move the Files to:");
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("This will move the Files and linked iNaturalist data from the selected Observation(s) to the another Observation.");
        jLabel4.setName("jLabel4"); // NOI18N

        chkDeleteSightings.setSelected(true);
        chkDeleteSightings.setText("Delete the originating Observation(s) after the move.");
        chkDeleteSightings.setName("chkDeleteSightings"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkDeleteSightings)
                        .addGap(0, 469, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkDeleteSightings)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        if (lstSightingsTo.getSelectedIndex() >= 0 && lstSightingsFrom.getSelectedIndex() >= 0) {
            Sighting destinationSighting = (Sighting) lstSightingsTo.getSelectedValue();
            INaturalistLinkedData destinationLinkedData = app.getDBI().findINaturalistLinkedData(
                    destinationSighting.getID(), 0, INaturalistLinkedData.class);
            for (Sighting sighting : (List<Sighting>) lstSightingsFrom.getSelectedValuesList()) {
                // Move files
                List<WildLogFile> lstFiles = app.getDBI().listWildLogFiles(sighting.getWildLogFileID(), null, WildLogFile.class);
                for (WildLogFile file : lstFiles) {
                    file.setId(destinationSighting.getWildLogFileID());
                    app.getDBI().updateWildLogFile(file);
                }
                // Move iNaturalist link (if none is already present on the To Sighting)
                INaturalistLinkedData linkedData = app.getDBI().findINaturalistLinkedData(sighting.getID(), 0, INaturalistLinkedData.class);
                if (destinationLinkedData == null && linkedData != null && linkedData.getINaturalistID() != 0) {
                    destinationLinkedData = linkedData;
                    destinationLinkedData.setWildlogID(destinationSighting.getID());
                    app.getDBI().updateINaturalistLinkedData(destinationLinkedData);
                }
                // Delete Sighting
                if (chkDeleteSightings.isSelected()) {
                    app.getDBI().deleteSighting(sighting.getID());
                }
            }
            setVisible(false);
            dispose();
        }
        else {
            WLOptionPane.showMessageDialog(this,
                    "Please select the From Observation(s) and then select the To Observation.",
                    "Value Not Selected", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmActionPerformed


    // Private Methods
    private void loadLists() {
        List<Sighting> lstSightings = app.getDBI().listSightings(0, 0, visit.getID(), true, Sighting.class);
        DefaultListModel<Sighting> fromSightingModel = new DefaultListModel<>();
        DefaultListModel<Sighting> toSightingModel = new DefaultListModel<>();
        for (Sighting sighting : lstSightings) {
            fromSightingModel.addElement(sighting);
            toSightingModel.addElement(sighting);
        }
        lstSightingsFrom.setModel(fromSightingModel);
        lstSightingsFrom.setCellRenderer(new SightingCellRenderer());
        lstSightingsTo.setModel(toSightingModel);
        lstSightingsTo.setCellRenderer(new SightingCellRenderer());
    }

    private class SightingCellRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList<? extends Object> inList, Object inSighting, int inIndex, boolean inIsSelected, boolean inCellHasFocus) {
            Component component =  super.getListCellRendererComponent(inList, inSighting, inIndex, inIsSelected, inCellHasFocus);
            if (component instanceof JLabel) {
                Sighting sighting = (Sighting) inSighting;
                StringBuilder builder = new StringBuilder(100);
                builder.append("[").append(sighting.getID()).append("] ");
                builder.append(UtilsTime.WL_DATE_FORMATTER_WITH_HHMMSS.format(UtilsTime.getLocalDateTimeFromDate(sighting.getDate())));
                builder.append(" - ").append(sighting.getCachedElementName());
                ((JLabel) component).setText(builder.toString());
            }
            return component;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JCheckBox chkDeleteSightings;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList lstSightingsFrom;
    private javax.swing.JList lstSightingsTo;
    // End of variables declaration//GEN-END:variables
}
