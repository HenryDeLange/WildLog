package wildlog.ui.dialogs;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import org.apache.logging.log4j.Level;
import wildlog.WildLogApp;
import wildlog.data.enums.WildLogThumbnailSizes;
import wildlog.ui.dialogs.utils.UtilsDialog;


public class WorkspaceSyncDialog extends JDialog {


    public WorkspaceSyncDialog() {
        super();
        WildLogApp.LOGGER.log(Level.INFO, "[WorkspaceSyncDialog]");
        initComponents();
        // Setup the default behavior
        UtilsDialog.setDialogToCenter(WildLogApp.getApplication().getMainFrame(), this);
        UtilsDialog.addEscapeKeyListener(this);
        // Setup the glasspane on this dialog as well for the JOptionPane's
        UtilsDialog.addModalBackgroundPanel(WildLogApp.getApplication().getMainFrame(), this);
        UtilsDialog.addModalBackgroundPanel(this, null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpFiles = new javax.swing.ButtonGroup();
        grpImages = new javax.swing.ButtonGroup();
        grpMode = new javax.swing.ButtonGroup();
        grpConflicts = new javax.swing.ButtonGroup();
        btnConfirm = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        rdbImportAllFiles = new javax.swing.JRadioButton();
        rdbImportImagesOnly = new javax.swing.JRadioButton();
        rdbImportNoFiles = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        rdbImportOriginalImages = new javax.swing.JRadioButton();
        rdbImportThumbnails = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        rdbModeBatch = new javax.swing.JRadioButton();
        rdbModeSingle = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        rdbConflictAutoResolve = new javax.swing.JRadioButton();
        rdbConflictAsk = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        btnCheckConflicts = new javax.swing.JButton();
        cmbThumbnailSize = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        txtSyncKey = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cloud Sync Workspace");
        setIconImage(new ImageIcon(WildLogApp.class.getResource("resources/icons/WildLog Icon Small.gif")).getImage());
        setMinimumSize(new java.awt.Dimension(850, 700));
        setModal(true);

        btnConfirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Update.png"))); // NOI18N
        btnConfirm.setToolTipText("Import the selected records to the active Workspace.");
        btnConfirm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConfirm.setFocusPainted(false);
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Files:");

        grpFiles.add(rdbImportAllFiles);
        rdbImportAllFiles.setText("All Files");
        rdbImportAllFiles.setToolTipText("Import all files into the current Workspace.");
        rdbImportAllFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbImportAllFiles.setFocusPainted(false);
        rdbImportAllFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbImportAllFilesActionPerformed(evt);
            }
        });

        grpFiles.add(rdbImportImagesOnly);
        rdbImportImagesOnly.setText("Images Only");
        rdbImportImagesOnly.setToolTipText("Import only image files into the current Workspace.");
        rdbImportImagesOnly.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbImportImagesOnly.setFocusPainted(false);
        rdbImportImagesOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbImportImagesOnlyActionPerformed(evt);
            }
        });

        grpFiles.add(rdbImportNoFiles);
        rdbImportNoFiles.setSelected(true);
        rdbImportNoFiles.setText("No Files");
        rdbImportNoFiles.setToolTipText("Don't import any files into the current Workspace.");
        rdbImportNoFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbImportNoFiles.setFocusPainted(false);
        rdbImportNoFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbImportNoFilesActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        grpImages.add(rdbImportOriginalImages);
        rdbImportOriginalImages.setText("Original Images");
        rdbImportOriginalImages.setToolTipText("Import a copy of the original linked images into the current Workspace.");
        rdbImportOriginalImages.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbImportOriginalImages.setFocusPainted(false);
        rdbImportOriginalImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbImportOriginalImagesActionPerformed(evt);
            }
        });

        grpImages.add(rdbImportThumbnails);
        rdbImportThumbnails.setSelected(true);
        rdbImportThumbnails.setText("Thumbnail Images");
        rdbImportThumbnails.setToolTipText("The images that are imported will be reduced in size, the original images will not be imported.");
        rdbImportThumbnails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbImportThumbnails.setFocusPainted(false);
        rdbImportThumbnails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbImportThumbnailsActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Mode:");

        grpMode.add(rdbModeBatch);
        rdbModeBatch.setSelected(true);
        rdbModeBatch.setText("Batch Mode");
        rdbModeBatch.setToolTipText("Order the tree nodes by Places, then Periods and lastly Creatures.");
        rdbModeBatch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbModeBatch.setFocusPainted(false);

        grpMode.add(rdbModeSingle);
        rdbModeSingle.setText("Single Mode");
        rdbModeSingle.setToolTipText("Order the tree nodes by Creatures, then Places and lastly Periods.");
        rdbModeSingle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbModeSingle.setFocusPainted(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Conflicts:");

        grpConflicts.add(rdbConflictAutoResolve);
        rdbConflictAutoResolve.setSelected(true);
        rdbConflictAutoResolve.setText("Automatically choose the most recently edited record and largest file");
        rdbConflictAutoResolve.setToolTipText("<html>When the active Workspace and the imported Workspace contains records with the same IDs but different data fields then the most recently edited record will automatically be used in the active Workspace.</html>");
        rdbConflictAutoResolve.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbConflictAutoResolve.setFocusPainted(false);

        grpConflicts.add(rdbConflictAsk);
        rdbConflictAsk.setText("Ask what to do for each conflict");
        rdbConflictAsk.setToolTipText("<html>When the active Workspace and the imported Workspace contains records with the same IDs but different data fields then the user will be asked which record to use in the active Workspace.</html>");
        rdbConflictAsk.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbConflictAsk.setFocusPainted(false);

        btnCheckConflicts.setText("<html>Check for Conflicts</html>");
        btnCheckConflicts.setToolTipText("Checks how many conflicts there will be when importing using the selected records.");
        btnCheckConflicts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCheckConflicts.setFocusPainted(false);
        btnCheckConflicts.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnCheckConflicts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckConflictsActionPerformed(evt);
            }
        });

        cmbThumbnailSize.setMaximumRowCount(15);
        cmbThumbnailSize.setModel(new DefaultComboBoxModel(WildLogThumbnailSizes.values()));
        cmbThumbnailSize.setSelectedItem(WildLogThumbnailSizes.VERY_LARGE);
        cmbThumbnailSize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbThumbnailSize.setEnabled(false);
        cmbThumbnailSize.setFocusable(false);

        jLabel7.setText("px");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Cloud Sync Key:");

        txtSyncKey.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSyncKey.setText("Paste the WildLog Cloud Sync Key here...");
        txtSyncKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSyncKeyFocusGained(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addComponent(rdbImportAllFiles)
                        .addGap(5, 5, 5)
                        .addComponent(rdbImportImagesOnly)
                        .addGap(5, 5, 5)
                        .addComponent(rdbImportNoFiles)
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(rdbImportOriginalImages)
                        .addGap(5, 5, 5)
                        .addComponent(rdbImportThumbnails)
                        .addGap(5, 5, 5)
                        .addComponent(cmbThumbnailSize, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(10, 10, 10)
                                .addComponent(rdbConflictAutoResolve)
                                .addGap(5, 5, 5)
                                .addComponent(rdbConflictAsk))
                            .addComponent(jSeparator2))
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(10, 10, 10)
                                .addComponent(rdbModeBatch)
                                .addGap(5, 5, 5)
                                .addComponent(rdbModeSingle))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSyncKey)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheckConflicts, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(500, 500, 500)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(btnCheckConflicts, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(cmbThumbnailSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rdbImportOriginalImages)
                                    .addComponent(rdbImportThumbnails)
                                    .addComponent(rdbImportImagesOnly)
                                    .addComponent(rdbImportAllFiles)
                                    .addComponent(rdbImportNoFiles))))
                        .addGap(5, 5, 5)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdbConflictAutoResolve, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdbConflictAsk, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rdbModeBatch)
                            .addComponent(rdbModeSingle))
                        .addGap(5, 5, 5)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSyncKey, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void rdbImportAllFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbImportAllFilesActionPerformed
       if (rdbImportAllFiles.isSelected()) {
           rdbImportOriginalImages.setEnabled(true);
           rdbImportThumbnails.setEnabled(true);
       }
    }//GEN-LAST:event_rdbImportAllFilesActionPerformed

    private void rdbImportImagesOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbImportImagesOnlyActionPerformed
        if (rdbImportImagesOnly.isSelected()) {
           rdbImportOriginalImages.setEnabled(true);
           rdbImportThumbnails.setEnabled(true);
       }
    }//GEN-LAST:event_rdbImportImagesOnlyActionPerformed

    private void rdbImportNoFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbImportNoFilesActionPerformed
        if (rdbImportNoFiles.isSelected()) {
           rdbImportOriginalImages.setEnabled(false);
           rdbImportThumbnails.setEnabled(false);
       }
    }//GEN-LAST:event_rdbImportNoFilesActionPerformed

    private void btnCheckConflictsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckConflictsActionPerformed
//        getGlassPane().setVisible(true);
//        getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//        int conflicts = 0;
//        int totalSelectedNodes = getNumberOfSelectedNodes(treWorkspace.getModel(), (DefaultMutableTreeNode) treWorkspace.getModel().getRoot());
//        if (totalSelectedNodes > 0) {
//            conflicts = checkConflicts((DefaultMutableTreeNode) treWorkspace.getModel().getRoot(), new HashSet<>());
//        }
//        getGlassPane().setCursor(Cursor.getDefaultCursor());
//        getGlassPane().setVisible(false);
//        if (conflicts > 0) {
//            WLOptionPane.showMessageDialog(this,
//                    "<html>Importing the selected records will result in <b>" + conflicts + " potential conflicts</b>. "
//                            + "<br>Conflicts can be resolved during the import process.</html>",
//                    "Potential Conflicts Detected!", JOptionPane.WARNING_MESSAGE);
//        }
//        else {
//            WLOptionPane.showMessageDialog(this,
//                    "No import conflicts were detected for the selected records.",
//                    "No Conflicts Detected", JOptionPane.INFORMATION_MESSAGE);
//        }
    }//GEN-LAST:event_btnCheckConflictsActionPerformed

    private void rdbImportOriginalImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbImportOriginalImagesActionPerformed
        if (rdbImportOriginalImages.isSelected()) {
            cmbThumbnailSize.setEnabled(false);
        }
    }//GEN-LAST:event_rdbImportOriginalImagesActionPerformed

    private void rdbImportThumbnailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbImportThumbnailsActionPerformed
        if (rdbImportThumbnails.isSelected()) {
            cmbThumbnailSize.setEnabled(true);
        }
    }//GEN-LAST:event_rdbImportThumbnailsActionPerformed

    private void txtSyncKeyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSyncKeyFocusGained
        txtSyncKey.selectAll();
    }//GEN-LAST:event_txtSyncKeyFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckConflicts;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JComboBox<WildLogThumbnailSizes> cmbThumbnailSize;
    private javax.swing.ButtonGroup grpConflicts;
    private javax.swing.ButtonGroup grpFiles;
    private javax.swing.ButtonGroup grpImages;
    private javax.swing.ButtonGroup grpMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JRadioButton rdbConflictAsk;
    private javax.swing.JRadioButton rdbConflictAutoResolve;
    private javax.swing.JRadioButton rdbImportAllFiles;
    private javax.swing.JRadioButton rdbImportImagesOnly;
    private javax.swing.JRadioButton rdbImportNoFiles;
    private javax.swing.JRadioButton rdbImportOriginalImages;
    private javax.swing.JRadioButton rdbImportThumbnails;
    private javax.swing.JRadioButton rdbModeBatch;
    private javax.swing.JRadioButton rdbModeSingle;
    private javax.swing.JTextField txtSyncKey;
    // End of variables declaration//GEN-END:variables
}
