package wildlog.ui.dialogs;

import java.awt.Cursor;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardOpenOption;
import java.nio.file.attribute.BasicFileAttributes;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.apache.logging.log4j.Level;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.INaturalistLinkedData;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.dataobjects.WildLogFile;
import wildlog.data.dataobjects.WildLogOptions;
import wildlog.data.dataobjects.interfaces.DataObjectWithWildLogFile;
import wildlog.data.dataobjects.wrappers.SightingWrapper;
import wildlog.data.dbi.WildLogDBI;
import wildlog.data.dbi.WildLogDBI_h2;
import wildlog.data.enums.GPSAccuracy;
import wildlog.data.enums.system.WildLogFileType;
import wildlog.data.enums.system.WildLogThumbnailSizes;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.ComboBoxFixer;
import wildlog.ui.helpers.ProgressbarTask;
import wildlog.ui.helpers.WLFileChooser;
import wildlog.ui.helpers.WLOptionPane;
import wildlog.ui.helpers.renderers.WorkspaceTreeCellRenderer;
import wildlog.ui.helpers.renderers.WorkspaceTreeDataWrapper;
import wildlog.utils.UtilsCompression;
import wildlog.utils.UtilsTime;
import wildlog.utils.UtilsConcurency;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.WildLogPaths;


public class WorkspaceExportDialog extends JDialog {
    private final WildLogApp app;
    private final Path defaultDestination;
    private final List<Sighting> lstSightings;


    public WorkspaceExportDialog(WildLogApp inApp, Path inDefaultDestination, List<Sighting> inLimitedList) {
        super();
        WildLogApp.LOGGER.log(Level.INFO, "[WorkspaceExportDialog]");
        app = inApp;
        defaultDestination = inDefaultDestination;
        lstSightings = inLimitedList;
        initComponents();
        ComboBoxFixer.configureComboBoxes(cmbThumbnailSize);
        // Setup the tree
        treWorkspace.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        treWorkspace.setCellRenderer(new WorkspaceTreeCellRenderer());
        treWorkspace.setToggleClickCount(0);
        // Load the tree
        loadLocationTree();
        // Setup the default behavior
        UtilsDialog.setDialogToCenter(app.getMainFrame(), this);
        UtilsDialog.addEscapeKeyListener(this);
        // Setup the glasspane on this dialog as well for the JOptionPane's
        UtilsDialog.addModalBackgroundPanel(app.getMainFrame(), this);
        UtilsDialog.addModalBackgroundPanel(this, null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpFiles = new javax.swing.ButtonGroup();
        grpImages = new javax.swing.ButtonGroup();
        grpTreeOrder = new javax.swing.ButtonGroup();
        btnConfirm = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        treWorkspace = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        rdbExportAllFiles = new javax.swing.JRadioButton();
        rdbExportImagesOnly = new javax.swing.JRadioButton();
        rdbExportNoFiles = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        rdbExportOriginalImages = new javax.swing.JRadioButton();
        rdbExportThumbnails = new javax.swing.JRadioButton();
        chkReduceGPS = new javax.swing.JCheckBox();
        chkRemoveDescriptions = new javax.swing.JCheckBox();
        chkRemoveTime = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        rdbOrderByLocation = new javax.swing.JRadioButton();
        rdbOrderByElement = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        chkOnlyFirstSighting = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        chkIncludeWildLogApp = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        chkDefaultDestinationFolder = new javax.swing.JCheckBox();
        rdbExportDefaultImagesOnly = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        dtpStartDate = new org.jdesktop.swingx.JXDatePicker();
        dtpEndDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        chkCreateZIP = new javax.swing.JCheckBox();
        cmbThumbnailSize = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export To A New Workspace");
        setIconImage(new ImageIcon(app.getClass().getResource("resources/icons/WildLog Icon Small.gif")).getImage());
        setMinimumSize(new java.awt.Dimension(950, 640));
        setModal(true);

        btnConfirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Update.png"))); // NOI18N
        btnConfirm.setToolTipText("Export the selected records to a new Workspace.");
        btnConfirm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treWorkspace.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treWorkspace.setRequestFocusEnabled(false);
        treWorkspace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                treWorkspaceMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(treWorkspace);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Files:");

        grpFiles.add(rdbExportAllFiles);
        rdbExportAllFiles.setSelected(true);
        rdbExportAllFiles.setText("All Files");
        rdbExportAllFiles.setToolTipText("Include all files in the new Workspace.");
        rdbExportAllFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbExportAllFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbExportAllFilesActionPerformed(evt);
            }
        });

        grpFiles.add(rdbExportImagesOnly);
        rdbExportImagesOnly.setText("Images Only");
        rdbExportImagesOnly.setToolTipText("Include only image files in the new Workspace.");
        rdbExportImagesOnly.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbExportImagesOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbExportImagesOnlyActionPerformed(evt);
            }
        });

        grpFiles.add(rdbExportNoFiles);
        rdbExportNoFiles.setText("No Files");
        rdbExportNoFiles.setToolTipText("Don't include any files in the new Workspace.");
        rdbExportNoFiles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbExportNoFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbExportNoFilesActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        grpImages.add(rdbExportOriginalImages);
        rdbExportOriginalImages.setSelected(true);
        rdbExportOriginalImages.setText("Original Images");
        rdbExportOriginalImages.setToolTipText("The new Workspace will contain a copy of all the linked files.");
        rdbExportOriginalImages.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbExportOriginalImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbExportOriginalImagesActionPerformed(evt);
            }
        });

        grpImages.add(rdbExportThumbnails);
        rdbExportThumbnails.setText("Thumbnail Images");
        rdbExportThumbnails.setToolTipText("The images in the new Workspace will be reduced in size, the originals images will not be exported.");
        rdbExportThumbnails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbExportThumbnails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbExportThumbnailsActionPerformed(evt);
            }
        });

        chkReduceGPS.setText("Reduce GPS Accuracy");
        chkReduceGPS.setToolTipText("If selected all GPS points accuracy will be reduced to degrees and minutes, no seconds.");
        chkReduceGPS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        chkRemoveDescriptions.setText("Remove Descriptions");
        chkRemoveDescriptions.setToolTipText("If selected the description fields won't be exported.");
        chkRemoveDescriptions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        chkRemoveTime.setText("Remove Time");
        chkRemoveTime.setToolTipText("If selected Observations' Time won't be exported, but the Sun and Moon Phase data will still be exported.");
        chkRemoveTime.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Sort Order:");

        grpTreeOrder.add(rdbOrderByLocation);
        rdbOrderByLocation.setSelected(true);
        rdbOrderByLocation.setText("Order by Place");
        rdbOrderByLocation.setToolTipText("Order the tree nodes by Places, then Periods and then lastly Creatures.");
        rdbOrderByLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbOrderByLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbOrderByLocationActionPerformed(evt);
            }
        });

        grpTreeOrder.add(rdbOrderByElement);
        rdbOrderByElement.setText("Order by Creature");
        rdbOrderByElement.setToolTipText("Order the tree nodes by Creatures, then Places and lastly Periods.");
        rdbOrderByElement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbOrderByElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbOrderByElementActionPerformed(evt);
            }
        });

        jLabel3.setText("<html><i>The records marked with the WildLog (W) icon will be exported. Hold down the Ctrl key to select only the record, without it's sub-records.</i></html>");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Obscuring:");

        chkOnlyFirstSighting.setText("Only one Observation of a Creature per Period");
        chkOnlyFirstSighting.setToolTipText("Export only the first Observation of each Creature per Period.");
        chkOnlyFirstSighting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Application:");

        chkIncludeWildLogApp.setText("Include the WildLog Application with the Workspace");
        chkIncludeWildLogApp.setToolTipText("Include the WildLog application with the exported Workspace.");
        chkIncludeWildLogApp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Destination:");

        chkDefaultDestinationFolder.setSelected(true);
        chkDefaultDestinationFolder.setText("Use default export folder");
        chkDefaultDestinationFolder.setToolTipText("If selected Export the new Workspace to the Export folder of the current Workspace.");
        chkDefaultDestinationFolder.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        grpFiles.add(rdbExportDefaultImagesOnly);
        rdbExportDefaultImagesOnly.setText("First Files Only");
        rdbExportDefaultImagesOnly.setToolTipText("Include only the default (first) file in the new Workspace.");
        rdbExportDefaultImagesOnly.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbExportDefaultImagesOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbExportDefaultImagesOnlyActionPerformed(evt);
            }
        });

        jLabel7.setText("px");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Observation Date:");

        dtpStartDate.setFormats(new SimpleDateFormat(UtilsTime.DEFAULT_WL_DATE_FORMAT_PATTERN));

        dtpEndDate.setFormats(new SimpleDateFormat(UtilsTime.DEFAULT_WL_DATE_FORMAT_PATTERN));

        jLabel9.setText("To");

        jLabel10.setText("From");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Archive:");

        chkCreateZIP.setText("ZIP Workspace");
        chkCreateZIP.setToolTipText("If selected the exported Workspace will be compressed into one ZIP archive.");
        chkCreateZIP.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        cmbThumbnailSize.setMaximumRowCount(15);
        cmbThumbnailSize.setModel(new DefaultComboBoxModel(WildLogThumbnailSizes.values()));
        cmbThumbnailSize.setSelectedItem(WildLogThumbnailSizes.VERY_LARGE);
        cmbThumbnailSize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbThumbnailSize.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator5)
                        .addGap(121, 121, 121))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel10)
                        .addGap(5, 5, 5)
                        .addComponent(dtpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9)
                        .addGap(5, 5, 5)
                        .addComponent(dtpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                                    .addComponent(jSeparator2)
                                    .addComponent(jSeparator4)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(10, 10, 10)
                                        .addComponent(chkReduceGPS)
                                        .addGap(5, 5, 5)
                                        .addComponent(chkRemoveDescriptions)
                                        .addGap(5, 5, 5)
                                        .addComponent(chkRemoveTime)
                                        .addGap(5, 5, 5)
                                        .addComponent(chkOnlyFirstSighting))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(10, 10, 10)
                                        .addComponent(rdbOrderByLocation)
                                        .addGap(10, 10, 10)
                                        .addComponent(rdbOrderByElement))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(10, 10, 10)
                                        .addComponent(rdbExportAllFiles)
                                        .addGap(5, 5, 5)
                                        .addComponent(rdbExportImagesOnly)
                                        .addGap(5, 5, 5)
                                        .addComponent(rdbExportDefaultImagesOnly)
                                        .addGap(5, 5, 5)
                                        .addComponent(rdbExportNoFiles)
                                        .addGap(10, 10, 10)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(rdbExportOriginalImages)
                                        .addGap(5, 5, 5)
                                        .addComponent(rdbExportThumbnails)
                                        .addGap(5, 5, 5)
                                        .addComponent(cmbThumbnailSize, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel7))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(10, 10, 10)
                                        .addComponent(chkIncludeWildLogApp)
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel6)
                                        .addGap(10, 10, 10)
                                        .addComponent(chkDefaultDestinationFolder)
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel11)
                                        .addGap(10, 10, 10)
                                        .addComponent(chkCreateZIP)))
                                .addGap(5, 5, 5)
                                .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbExportOriginalImages)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rdbExportAllFiles)
                                .addComponent(rdbExportImagesOnly)
                                .addComponent(rdbExportNoFiles)
                                .addComponent(rdbExportThumbnails)
                                .addComponent(rdbExportDefaultImagesOnly)
                                .addComponent(jLabel7)
                                .addComponent(cmbThumbnailSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkRemoveDescriptions)
                            .addComponent(chkRemoveTime)
                            .addComponent(chkReduceGPS)
                            .addComponent(chkOnlyFirstSighting)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dtpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dtpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)))
                .addGap(5, 5, 5)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(chkCreateZIP))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(chkIncludeWildLogApp)
                        .addComponent(jLabel6)
                        .addComponent(chkDefaultDestinationFolder)))
                .addGap(5, 5, 5)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdbOrderByLocation)
                    .addComponent(rdbOrderByElement))
                .addGap(5, 5, 5)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        if (chkCreateZIP.isSelected()) {
            int result = WLOptionPane.showConfirmDialog(this,
                "<html>The automatic creation of a very large ZIP Archive might fail. "
                        + "<br>If this happens you can still manually ZIP the Workspace after the export has completed. "
                        + "<br><b>Do you want to continue with creating the ZIP Archive?</b></html>",
                "ZIP Warning!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
            if (result != JOptionPane.YES_OPTION) {
                return;
            }
        }
        try {
            final Path destination;
            if (chkDefaultDestinationFolder.isSelected() && defaultDestination != null) {
                destination = defaultDestination;
                Files.createDirectories(destination);
            }
            else {
                File file = showFileChooser();
                if (file != null) {
                    destination = file.toPath();
                }
                else {
                    destination = null;
                }
            }
            if (destination != null && Files.isDirectory(destination) && Files.isWritable(destination) && destination.toFile().list().length == 0) {
                app.getMainFrame().getTabbedPane().setSelectedIndex(0);
                UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
                    @Override
                    protected Object doInBackground() throws Exception {
                        app.getMainFrame().getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        setProgress(1);
                        setMessage("Starting the Workspace Export");
                        setVisible(false);
                        WildLogDBI newDBI = null;
                        try {
                            int totalSelectedNodes = getNumberOfSelectedNodes(treWorkspace.getModel(), (DefaultMutableTreeNode) treWorkspace.getModel().getRoot());
                            if (totalSelectedNodes > 0) {
                                Path destinationWorkspace = destination.resolve(WildLogPaths.DEFAULT_WORKSPACE_NAME.getRelativePath());
                                Files.createDirectories(destinationWorkspace);
                                Files.write(destinationWorkspace.resolve(WildLogPaths.WILDLOG_WORKSPACE_INDICATOR.getRelativePath()).toAbsolutePath(), 
                                        WildLogApp.WILDLOG_VERSION.getBytes(), StandardOpenOption.CREATE);
                                newDBI = new WildLogDBI_h2((destinationWorkspace.resolve(WildLogPaths.WILDLOG_DATA.getRelativePath()).resolve(
                                        WildLogPaths.DEFAULT_DATABASE_NAME.getRelativePath())).toAbsolutePath().toString(), false, false);
                                setProgress(2);
                                setMessage("Workspace Export: " + getProgress() + "%");
                                // Save settings to the new workspace
                                WildLogOptions options = app.getDBI().findWildLogOptions(WildLogOptions.class);
                                options.setWorkspaceName("Exported Workspace (" + UtilsTime.WL_DATE_FORMATTER.format(LocalDateTime.now()) + ")");
                                options.setWorkspaceID(app.getDBI().generateID());
                                newDBI.updateWildLogOptions(options, false);
                                setProgress(3);
                                setMessage("Workspace Export: " + getProgress() + "%");
                                // Save the selected nodes
                                Set<String> uniqueElementsPerVisit = null;
                                if (chkOnlyFirstSighting.isSelected()) {
                                    uniqueElementsPerVisit = new HashSet<>();
                                }
                                exportRecords(newDBI, destinationWorkspace, (DefaultMutableTreeNode) treWorkspace.getModel().getRoot(), 
                                        totalSelectedNodes, this, new ProgressCounter(), uniqueElementsPerVisit, 
                                        UtilsTime.getLocalDateFromDate(dtpStartDate.getDate()), UtilsTime.getLocalDateFromDate(dtpEndDate.getDate()));
                                newDBI.close();
                                setProgress(95);
                                setMessage("Workspace Export: " + getProgress() + "%");
                                // Export the WildLog application
                                if (chkIncludeWildLogApp.isSelected()) {
                                    setMessage("Workspace Export - Copying the application: " + getProgress() + "%");
                                    Path fullApplicationFolder = WildLogApp.getACTIVEWILDLOG_CODE_FOLDER().getParent();
                                    Path desitnationFolder = destinationWorkspace.resolve(WildLogPaths.WILDLOG_BUNDLED_APPLICATION.getRelativePath());
                                    // Copy the application files
                                    Files.walkFileTree(fullApplicationFolder, new SimpleFileVisitor<Path>() {
                                        @Override
                                        public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException {
                                            Files.createDirectories(desitnationFolder.resolve(fullApplicationFolder.relativize(dir)));
                                            return FileVisitResult.CONTINUE;
                                        }
                                        @Override
                                        public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
                                            Files.copy(file, desitnationFolder.resolve(fullApplicationFolder.relativize(file)));
                                            return FileVisitResult.CONTINUE;
                                        }
                                    });
                                    setProgress(96);
                                    setMessage("Workspace Export - Copying the settings: " + getProgress() + "%");
                                    // Change the properties and settings files/folders to point to the exported workspace
                                    // NOTE: Vir die paths om reg te werk moet die app gestart word vanuit dieselfde folder as die hoof JAR file.
                                    //       Dit gaan te confusing en tricky raak om die EXE files in 'n ander folder te sit.
                                    Path settingsFile = desitnationFolder.resolve("WildLogSettings").resolve("wildloghome");
                                    Path propertiesFile = desitnationFolder.resolve("application").resolve("wildlog.properties");
                                    byte[] fileBytes = Files.readAllBytes(propertiesFile);
                                    String propertiesText = new String(fileBytes, Charset.defaultCharset());
                                    int index = propertiesText.indexOf("settingsFolderLocation=") + "settingsFolderLocation=".length();
                                    propertiesText = propertiesText.substring(0, index) + propertiesFile.getParent().relativize(settingsFile.getParent()).toString().replace('\\', '/');
                                    UtilsFileProcessing.createFileFromBytes(propertiesText.getBytes(), propertiesFile);
                                    UtilsFileProcessing.createFileFromBytes("../../".getBytes(), settingsFile);
                                    setProgress(97);
                                    setMessage("Workspace Export: " + getProgress() + "%");
                                }
                                // Zip the workspace
                                if (chkCreateZIP.isSelected()) {
                                    setMessage("Workspace Export - Creating the ZIP: " + getProgress() + "%");
                                    UtilsCompression.zipFolder(destination.resolve(WildLogPaths.DEFAULT_WORKSPACE_NAME.getRelativePath() + ".zip"), destination);
                                    setProgress(99);
                                    setMessage("Workspace Export: " + getProgress() + "%");
                                }
                                setProgress(100);
                                setMessage("Workspace Export: " + getProgress() + "%");
                            }
                        }
                        catch (Exception ex) {
                            throw ex;
                        }
                        finally {
                            setVisible(false);
                            dispose();
                            if (newDBI != null) {
                                newDBI.close();
                            }
                        }
                        setProgress(100);
                        setMessage("Done with the Workspace Export");
                        app.getMainFrame().getGlassPane().setCursor(Cursor.getDefaultCursor());
                        UtilsFileProcessing.openFile(destination);
                        return null;
                    }
                });
            }
            else {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        WLOptionPane.showMessageDialog(WorkspaceExportDialog.this,
                                "<html>Could not export the Workspace to the destination folder. "
                                        + "<br>Please make sure to select an empty folder for the exported Workspace to be written to.</html>",
                                "Could not Export the Workspace", JOptionPane.ERROR_MESSAGE);
                    }
                });
            }
        }
        catch (Exception ex) {
            WildLogApp.LOGGER.log(Level.ERROR, ex.toString(), ex);
            WLOptionPane.showMessageDialog(app.getMainFrame(),
                    "Could not export the Workspace successfully.",
                    "Export Workspace Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private class ProgressCounter {
        public int counter = 0;
    }

    private int getNumberOfSelectedNodes(TreeModel inModel, DefaultMutableTreeNode inNode) {
        int count = 0;
        if (inNode.getUserObject() instanceof WorkspaceTreeDataWrapper) {
            WorkspaceTreeDataWrapper dataWrapper = (WorkspaceTreeDataWrapper) inNode.getUserObject();
            if (dataWrapper.isSelected()) {
                count = 1;
            }
        }
        int numberOfChildren = inModel.getChildCount(inNode);
        for (int i = 0; i < numberOfChildren; i++) {
            count += getNumberOfSelectedNodes(inModel, (DefaultMutableTreeNode) inModel.getChild(inNode, i));
        }
        return count;
    }

    private File showFileChooser() {
        WLFileChooser fileChooser = new WLFileChooser();
        fileChooser.setDialogTitle("Select the destination folder for the export");
        fileChooser.setDialogType(JFileChooser.CUSTOM_DIALOG);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.ERROR_OPTION || result != JFileChooser.APPROVE_OPTION || fileChooser.getSelectedFile() == null) {
            return null;
        }
        else {
            if (fileChooser.getSelectedFile().isDirectory()) {
                return fileChooser.getSelectedFile();
            }
            else {
                return fileChooser.getSelectedFile().getParentFile();
            }
        }
    }

    private void exportRecords(WildLogDBI inNewDBI, Path inDestinationWorkspace, DefaultMutableTreeNode inNode, int inTotalNodes, 
            ProgressbarTask inProgressbarTask, ProgressCounter inCounter, Set<String> inUniqueElementsPerVisit, 
            LocalDate inStartDate, LocalDate inEndDate) {
        if (inNode.getUserObject() instanceof WorkspaceTreeDataWrapper) {
            WorkspaceTreeDataWrapper dataWrapper = (WorkspaceTreeDataWrapper) inNode.getUserObject();
            if (dataWrapper.isSelected()) {
                if (dataWrapper.getDataObject() instanceof Location) {
                    Location location = app.getDBI().findLocation(((Location) dataWrapper.getDataObject()).getID(), null, Location.class);
                    if (chkReduceGPS.isSelected()) {
                        location.setLatSeconds(0.0);
                        location.setLonSeconds(0.0);
                        location.setGPSAccuracy(GPSAccuracy.TERRIBLE);
                        location.setGPSAccuracyValue(GPSAccuracy.TERRIBLE.getMaxMeters());
                    }
                    if (chkRemoveDescriptions.isSelected()) {
                        location.setDescription("");
                    }
                    if (inNewDBI.findLocation(location.getID(), null, Location.class) == null) {
                        inNewDBI.createLocation(location, true);
                        saveFiles(inNewDBI, inDestinationWorkspace, location);
                    }
                }
                else
                if (dataWrapper.getDataObject() instanceof Visit) {
                    Visit visit = app.getDBI().findVisit(((Visit) dataWrapper.getDataObject()).getID(), null, true, Visit.class);
                    if (chkRemoveDescriptions.isSelected()) {
                        visit.setDescription("");
                    }
                    if (inNewDBI.findVisit(visit.getID(), null, true, Visit.class) == null) {
                        inNewDBI.createVisit(visit, true);
                        saveFiles(inNewDBI, inDestinationWorkspace, visit);
                    }
                }
                else
                if (dataWrapper.getDataObject() instanceof Element) {
                    Element element = app.getDBI().findElement(((Element) dataWrapper.getDataObject()).getID(), null, Element.class);
                    if (inNewDBI.findElement(element.getID(), null, Element.class) == null) {
                        inNewDBI.createElement(element, true);
                        saveFiles(inNewDBI, inDestinationWorkspace, element);
                    }
                }
                else
                if (dataWrapper.getDataObject() instanceof SightingWrapper) {
                    Sighting sighting = app.getDBI().findSighting((((SightingWrapper) dataWrapper.getDataObject()).getSighting()).getID(), true, Sighting.class);
                    boolean doExport = true;
                    // Check whether to limit to only first element per visit
                    if (chkOnlyFirstSighting.isSelected()) {
                        if (!inUniqueElementsPerVisit.add(sighting.getVisitID()+ "-" + sighting.getElementID())) {
                            doExport = false;
                        }
                    }
                    // Check dates
                    if (doExport && inStartDate != null) {
                        if (UtilsTime.getLocalDateFromDate(sighting.getDate()).isBefore(inStartDate)) {
                            doExport = false;
                        }
                    }
                    if (doExport && inEndDate != null) {
                        if (UtilsTime.getLocalDateFromDate(sighting.getDate()).isAfter(inEndDate)) {
                            doExport = false;
                        }
                    }
                    // Continue to do the export if the validation (above) passed
                    if (doExport) {
                        if (chkReduceGPS.isSelected()) {
                            sighting.setLatSeconds(0.0);
                            sighting.setLonSeconds(0.0);
                            sighting.setGPSAccuracy(GPSAccuracy.TERRIBLE);
                            sighting.setGPSAccuracyValue(GPSAccuracy.TERRIBLE.getMaxMeters());
                        }
                        if (chkRemoveDescriptions.isSelected()) {
                            sighting.setDetails("");
                        }
                        if (chkRemoveTime.isSelected()) {
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTime(sighting.getDate());
                            calendar.set(Calendar.HOUR_OF_DAY, 0);
                            calendar.set(Calendar.MINUTE, 0);
                            calendar.set(Calendar.SECOND, 0);
                            calendar.set(Calendar.MILLISECOND, 0);
                            sighting.setDate(calendar.getTime());
                        }
                        if (inNewDBI.countSightings(sighting.getID(), 0, 0, 0) == 0) {
                            // Note: The sighting ID needs to be the same for the linked images to work...
                            inNewDBI.createSighting(sighting, true);
                            saveFiles(inNewDBI, inDestinationWorkspace, sighting);
                            // Save ook die iNaturalist linked data
                            INaturalistLinkedData linkedData = app.getDBI().findINaturalistLinkedData(sighting.getID(), 0, INaturalistLinkedData.class);
                            if (linkedData != null) {
                                inNewDBI.createINaturalistLinkedData(linkedData);
                            }
                        }
                    }
                }
                inCounter.counter++;
            }
            inProgressbarTask.setTaskProgress(3 + (int)(((double)inCounter.counter/(double)inTotalNodes)*92.0));
            inProgressbarTask.setMessage("Workspace Export: " + inProgressbarTask.getProgress() + "%");
        }
        for (int t = 0; t < treWorkspace.getModel().getChildCount(inNode); t++) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) treWorkspace.getModel().getChild(inNode, t);
            exportRecords(inNewDBI, inDestinationWorkspace, childNode, inTotalNodes, inProgressbarTask, inCounter, inUniqueElementsPerVisit, inStartDate, inEndDate);
        }
    }

    private void saveFiles(WildLogDBI inNewDBI, Path inDestinationWorkspace, DataObjectWithWildLogFile inDataObjectWithWildLogFile) {
        if (!rdbExportNoFiles.isSelected()) {
            WildLogFileType fileType = null;
            if (rdbExportImagesOnly.isSelected()) {
                fileType = WildLogFileType.IMAGE;
            }
            List<WildLogFile> listFiles = app.getDBI().listWildLogFiles(inDataObjectWithWildLogFile.getWildLogFileID(), fileType, WildLogFile.class);
            for (WildLogFile wildLogFile : listFiles) {
                if (inNewDBI.findWildLogFile(wildLogFile.getID(), 0, null, null, WildLogFile.class) == null) {
                    Path source;
                    Path destination;
                    if (rdbExportThumbnails.isSelected() && WildLogFileType.IMAGE.equals(wildLogFile.getFileType())) {
                        source = wildLogFile.getAbsoluteThumbnailPath((WildLogThumbnailSizes) cmbThumbnailSize.getSelectedItem());
                        destination = inDestinationWorkspace.resolve(wildLogFile.getRelativePath().getParent().resolve(source.getFileName()));
                    }
                    else {
                        source = wildLogFile.getAbsolutePath();
                        destination = inDestinationWorkspace.resolve(wildLogFile.getRelativePath());
                    }
                    UtilsFileProcessing.copyFile(source, destination, false, true);
                    wildLogFile.setDBFilePath(inDestinationWorkspace.relativize(destination).toString());
                    wildLogFile.setFilename(destination.getFileName().toString());
                    inNewDBI.createWildLogFile(wildLogFile, true);
                }
                if (rdbExportDefaultImagesOnly.isSelected()) {
                    break;
                }
            }
        }
    }

    private void rdbExportAllFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbExportAllFilesActionPerformed
       if (rdbExportAllFiles.isSelected()) {
           rdbExportOriginalImages.setEnabled(true);
           rdbExportThumbnails.setEnabled(true);
       }
    }//GEN-LAST:event_rdbExportAllFilesActionPerformed

    private void rdbExportImagesOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbExportImagesOnlyActionPerformed
        if (rdbExportImagesOnly.isSelected()) {
           rdbExportOriginalImages.setEnabled(true);
           rdbExportThumbnails.setEnabled(true);
       }
    }//GEN-LAST:event_rdbExportImagesOnlyActionPerformed

    private void rdbExportNoFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbExportNoFilesActionPerformed
        if (rdbExportNoFiles.isSelected()) {
           rdbExportOriginalImages.setEnabled(false);
           rdbExportThumbnails.setEnabled(false);
       }
    }//GEN-LAST:event_rdbExportNoFilesActionPerformed

    private void treWorkspaceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treWorkspaceMousePressed
        // Gebruk die muis se posisie om die node te kry want die LastSelected node is verkeerd, veral as mens die +/- gebruik om te expand/colapse...
        TreePath clickedPath = treWorkspace.getPathForLocation(evt.getX(), evt.getY());
        if (clickedPath != null && clickedPath.getLastPathComponent() != null) {
            if (((DefaultMutableTreeNode) clickedPath.getLastPathComponent()).getUserObject() instanceof WorkspaceTreeDataWrapper) {
                // Get the selected node and change the isSelected property
                WorkspaceTreeDataWrapper dataWrapper = (WorkspaceTreeDataWrapper) ((DefaultMutableTreeNode) clickedPath.getLastPathComponent()).getUserObject();
                dataWrapper.setIsSelected(!dataWrapper.isSelected());
                // Also update all sub nodes
                if (!evt.isControlDown() || !dataWrapper.isSelected()) {
                    selectChildren((DefaultMutableTreeNode) clickedPath.getLastPathComponent());
                }
                if (dataWrapper.isSelected()) {
                    selectParent((DefaultMutableTreeNode) clickedPath.getLastPathComponent());
                }
            }
            // Need to repaint the tree to make sure all icons are refreshed, otherwise Java does the "smart" thing and and caches painted nodes lower down.
            treWorkspace.repaint();
        }
    }//GEN-LAST:event_treWorkspaceMousePressed

    private void selectChildren(DefaultMutableTreeNode inParentNode) {
        for (int t = 0; t < treWorkspace.getModel().getChildCount(inParentNode); t++) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) treWorkspace.getModel().getChild(inParentNode, t);
            WorkspaceTreeDataWrapper dataWrapper = (WorkspaceTreeDataWrapper) childNode.getUserObject();
            dataWrapper.setIsSelected(((WorkspaceTreeDataWrapper) inParentNode.getUserObject()).isSelected());
            selectChildren(childNode);
        }
    }

    private void selectParent(DefaultMutableTreeNode inNode) {
        if (((DefaultMutableTreeNode) inNode.getParent()).getUserObject() instanceof WorkspaceTreeDataWrapper) {
            ((WorkspaceTreeDataWrapper) ((DefaultMutableTreeNode) inNode.getParent()).getUserObject()).setIsSelected(
                    ((WorkspaceTreeDataWrapper) inNode.getUserObject()).isSelected());
            selectParent((DefaultMutableTreeNode) inNode.getParent());
        }
    }

    private void rdbOrderByLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbOrderByLocationActionPerformed
        if (rdbOrderByLocation.isSelected()) {
            loadLocationTree();
        }
    }//GEN-LAST:event_rdbOrderByLocationActionPerformed

    private void rdbOrderByElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbOrderByElementActionPerformed
        if (rdbOrderByElement.isSelected()) {
            loadElementTree();
        }
    }//GEN-LAST:event_rdbOrderByElementActionPerformed

    private void rdbExportDefaultImagesOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbExportDefaultImagesOnlyActionPerformed
        if (rdbExportDefaultImagesOnly.isSelected()) {
           rdbExportOriginalImages.setEnabled(true);
           rdbExportThumbnails.setEnabled(true);
       }
    }//GEN-LAST:event_rdbExportDefaultImagesOnlyActionPerformed

    private void rdbExportThumbnailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbExportThumbnailsActionPerformed
        if (rdbExportThumbnails.isSelected()) {
            cmbThumbnailSize.setEnabled(true);
        }
    }//GEN-LAST:event_rdbExportThumbnailsActionPerformed

    private void rdbExportOriginalImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbExportOriginalImagesActionPerformed
        if (rdbExportOriginalImages.isSelected()) {
            cmbThumbnailSize.setEnabled(false);
        }
    }//GEN-LAST:event_rdbExportOriginalImagesActionPerformed

    private void loadLocationTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("WildLog Workspace");
        List<Location> locations;
        if (lstSightings == null) {
            locations = new ArrayList<Location>(app.getDBI().listLocations(null, Location.class));
        }
        else {
            Set<Long> uniqueLocations = new HashSet<>();
            locations = new ArrayList<>();
            for (Sighting sighting : lstSightings) {
                if (!uniqueLocations.contains(sighting.getLocationID())) {
                    uniqueLocations.add(sighting.getLocationID());
                    locations.add(app.getDBI().findLocation(sighting.getLocationID(), null, Location.class));
                }
            }
        }
        Map<Long, DefaultMutableTreeNode> mapElements;
        Map<Long, DefaultMutableTreeNode> mapVisits;
        Collections.sort(locations);
        for (Location location : locations) {
            mapElements = new HashMap<>(500);
            mapVisits = new HashMap<>(500);
            DefaultMutableTreeNode locationNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(location, false));
            root.add(locationNode);
            List<Sighting> sightings = app.getDBI().listSightings(0, location.getID(), 0, true, Sighting.class);
            Collections.sort(sightings, new Comparator<Sighting>() {
                @Override
                public int compare(Sighting sighting1, Sighting sighting2) {
                    int result = sighting1.getCachedVisitName().compareTo(sighting2.getCachedVisitName());
                    if (result == 0) {
                        result = sighting1.getCachedElementName().compareTo(sighting2.getCachedElementName());
                        if (result == 0) {
                            result = sighting1.getDate().compareTo(sighting2.getDate());
                        }
                    }
                    return result;
                }
            });
            for (Sighting sighting : sightings) {
                boolean found = false;
                if (lstSightings == null) {
                    found = true;
                }
                else {
                    for (Sighting tempSighting : lstSightings) {
                        if (sighting.getID()== tempSighting.getID()) {
                            found = true;
                            break;
                        }
                    }
                }
                if (found) {
                    DefaultMutableTreeNode visitNode = mapVisits.get(sighting.getVisitID());
                    if (visitNode == null) {
                        visitNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(app.getDBI().findVisit(sighting.getVisitID(), null, true, Visit.class), false));
                        mapVisits.put(sighting.getVisitID(), visitNode);
                        // Clear die hashmap hier as 'n nuwe visit gelaai word (die sightings behoort volgens visit gesort te wees, so die visit sal nie weer verskyn nie.
                        mapElements.clear();
                    }
                    locationNode.add(visitNode);
                    DefaultMutableTreeNode elementNode = mapElements.get(sighting.getElementID());
                    if (elementNode == null) {
                        elementNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(app.getDBI().findElement(sighting.getElementID(), null, Element.class), false));
                        mapElements.put(sighting.getElementID(), elementNode);
                    }
                    visitNode.add(elementNode);
                    DefaultMutableTreeNode sightingNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(new SightingWrapper(sighting, true), false));
                    elementNode.add(sightingNode);
                }
            }
        }
        treWorkspace.setModel(new DefaultTreeModel(root));
    }

    private void loadElementTree() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("WildLog Workspace");
        List<Element> elements;
        if (lstSightings == null) {
            elements = app.getDBI().listElements(null, null, null, Element.class);
        }
        else {
            Set<Long> uniqueElements = new HashSet<>();
            elements = new ArrayList<>();
            for (Sighting sighting : lstSightings) {
                if (!uniqueElements.contains(sighting.getElementID())) {
                    uniqueElements.add(sighting.getElementID());
                    elements.add(app.getDBI().findElement(sighting.getElementID(), null, Element.class));
                }
            }
        }
        Map<Long, DefaultMutableTreeNode> mapLocations;
        Map<Long, DefaultMutableTreeNode> mapVisits;
        Collections.sort(elements);
        for (Element element : elements) {
            mapLocations = new HashMap<>(100);
            mapVisits = new HashMap<>(500);
            DefaultMutableTreeNode elementNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(element, false));
            root.add(elementNode);
            List<Sighting> sightings = app.getDBI().listSightings(element.getID(), 0, 0, true, Sighting.class);
            Collections.sort(sightings, new Comparator<Sighting>() {
                @Override
                public int compare(Sighting sighting1, Sighting sighting2) {
                    int result = sighting1.getCachedLocationName().compareTo(sighting2.getCachedLocationName());
                    if (result == 0) {
                        result = sighting1.getCachedVisitName().compareTo(sighting2.getCachedVisitName());
                        if (result == 0) {
                            result = sighting1.getDate().compareTo(sighting2.getDate());
                        }
                    }
                    return result;
                }
            });
            for (Sighting sighting : sightings) {
                boolean found = false;
                if (lstSightings == null) {
                    found = true;
                }
                else {
                    for (Sighting tempSighting : lstSightings) {
                        if (sighting.getID() == tempSighting.getID()) {
                            found = true;
                            break;
                        }
                    }
                }
                if (found) {
                    DefaultMutableTreeNode locationNode = mapLocations.get(sighting.getLocationID());
                    if (locationNode == null) {
                        locationNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(app.getDBI().findLocation(sighting.getLocationID(), null, Location.class), false));
                        mapLocations.put(sighting.getLocationID(), locationNode);
                    }
                    elementNode.add(locationNode);
                    DefaultMutableTreeNode visitNode = mapVisits.get(sighting.getVisitID());
                    if (visitNode == null) {
                        visitNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(app.getDBI().findVisit(sighting.getVisitID(), null, true, Visit.class), false));
                        mapVisits.put(sighting.getVisitID(), visitNode);
                    }
                    locationNode.add(visitNode);
                    DefaultMutableTreeNode sightingNode = new DefaultMutableTreeNode(new WorkspaceTreeDataWrapper(new SightingWrapper(sighting, true), false));
                    visitNode.add(sightingNode);
                }
            }
        }
        treWorkspace.setModel(new DefaultTreeModel(root));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JCheckBox chkCreateZIP;
    private javax.swing.JCheckBox chkDefaultDestinationFolder;
    private javax.swing.JCheckBox chkIncludeWildLogApp;
    private javax.swing.JCheckBox chkOnlyFirstSighting;
    private javax.swing.JCheckBox chkReduceGPS;
    private javax.swing.JCheckBox chkRemoveDescriptions;
    private javax.swing.JCheckBox chkRemoveTime;
    private javax.swing.JComboBox<WildLogThumbnailSizes> cmbThumbnailSize;
    private org.jdesktop.swingx.JXDatePicker dtpEndDate;
    private org.jdesktop.swingx.JXDatePicker dtpStartDate;
    private javax.swing.ButtonGroup grpFiles;
    private javax.swing.ButtonGroup grpImages;
    private javax.swing.ButtonGroup grpTreeOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JRadioButton rdbExportAllFiles;
    private javax.swing.JRadioButton rdbExportDefaultImagesOnly;
    private javax.swing.JRadioButton rdbExportImagesOnly;
    private javax.swing.JRadioButton rdbExportNoFiles;
    private javax.swing.JRadioButton rdbExportOriginalImages;
    private javax.swing.JRadioButton rdbExportThumbnails;
    private javax.swing.JRadioButton rdbOrderByElement;
    private javax.swing.JRadioButton rdbOrderByLocation;
    private javax.swing.JTree treWorkspace;
    // End of variables declaration//GEN-END:variables
}
