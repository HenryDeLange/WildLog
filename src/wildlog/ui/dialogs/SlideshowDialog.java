package wildlog.ui.dialogs;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import javax.imageio.stream.FileImageOutputStream;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.dataobjects.WildLogFile;
import wildlog.movies.gifmovie.AnimatedGIFWriter;
import wildlog.movies.utils.UtilsMovies;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.ProgressbarTask;
import wildlog.utils.UtilsConcurency;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.UtilsImageProcessing;
import wildlog.utils.WildLogPaths;
import wildlog.utils.WildLogSystemImages;


public class SlideshowDialog extends JDialog {
    private final WildLogApp app;
    private final Visit visit;
    private final Location location;
    private final Element element;
    private final List<Sighting> lstSightings;

    
    public SlideshowDialog(WildLogApp inApp, Visit inVisit, Location inLocation, Element inElement, List<Sighting> inLstSightings) {
        super();
        WildLogApp.LOGGER.log(Level.INFO, "[SlideshowDialog]");
        // Set passed in values
        app = inApp;
        visit = inVisit;
        location = inLocation;
        element = inElement;
        lstSightings = inLstSightings;
        // Auto generated code
        initComponents();
        // Determine what buttons to show
        if (visit == null && location == null && element == null) {
            btnSlideshow.setVisible(false);
            btnSlideshowSightings.setVisible(false);
            btnGIFAllSightings.setVisible(false);
        }
        if (lstSightings == null || lstSightings.isEmpty()) {
            btnSlideshowSelectedSightings.setVisible(false);
            btnGIFSelectedSightings.setVisible(false);
        }
        // Pack
        pack();
        // Setup the default behavior
        UtilsDialog.addEscapeKeyListener(this);
        UtilsDialog.setDialogToCenter(app.getMainFrame(), this);
        UtilsDialog.addModalBackgroundPanel(app.getMainFrame(), this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSlideshow = new javax.swing.JButton();
        btnSlideshowSightings = new javax.swing.JButton();
        btnSlideshowSelectedSightings = new javax.swing.JButton();
        btnGIFAllSightings = new javax.swing.JButton();
        btnGIFSelectedSightings = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Available Slideshows");
        setIconImage(new ImageIcon(app.getClass().getResource("resources/icons/Slideshow.gif")).getImage());
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        btnSlideshow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshow.setText("Slideshow of the Images");
        btnSlideshow.setToolTipText("Create a SlideShow (MJPEG Video) using the Images from this entity.");
        btnSlideshow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshow.setFocusPainted(false);
        btnSlideshow.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshow.setIconTextGap(10);
        btnSlideshow.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshow.setMaximumSize(new java.awt.Dimension(320, 35));
        btnSlideshow.setMinimumSize(new java.awt.Dimension(320, 35));
        btnSlideshow.setName("btnSlideshow"); // NOI18N
        btnSlideshow.setPreferredSize(new java.awt.Dimension(320, 35));
        btnSlideshow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshow);

        btnSlideshowSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowSightings.setText("Slideshow of all the Observations' Images");
        btnSlideshowSightings.setToolTipText("Create a SlideShow (MJPEG Video) using the Images from all the linked Observations.");
        btnSlideshowSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowSightings.setFocusPainted(false);
        btnSlideshowSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowSightings.setIconTextGap(10);
        btnSlideshowSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowSightings.setMaximumSize(new java.awt.Dimension(320, 35));
        btnSlideshowSightings.setMinimumSize(new java.awt.Dimension(320, 35));
        btnSlideshowSightings.setName("btnSlideshowSightings"); // NOI18N
        btnSlideshowSightings.setPreferredSize(new java.awt.Dimension(320, 35));
        btnSlideshowSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowSightings);

        btnSlideshowSelectedSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowSelectedSightings.setText("Slideshow of the Selected Observations' Images");
        btnSlideshowSelectedSightings.setToolTipText("Create a SlideShow (MJPEG Video) using the Images from the selected Observations.");
        btnSlideshowSelectedSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowSelectedSightings.setFocusPainted(false);
        btnSlideshowSelectedSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowSelectedSightings.setIconTextGap(10);
        btnSlideshowSelectedSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowSelectedSightings.setMaximumSize(new java.awt.Dimension(320, 35));
        btnSlideshowSelectedSightings.setMinimumSize(new java.awt.Dimension(320, 35));
        btnSlideshowSelectedSightings.setName("btnSlideshowSelectedSightings"); // NOI18N
        btnSlideshowSelectedSightings.setPreferredSize(new java.awt.Dimension(320, 35));
        btnSlideshowSelectedSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowSelectedSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowSelectedSightings);

        btnGIFAllSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/GIF.png"))); // NOI18N
        btnGIFAllSightings.setText("Animated GIF of all the Observations' Images");
        btnGIFAllSightings.setToolTipText("Create a SlideShow (Animated GIF) using the Images from all the linked Observations.");
        btnGIFAllSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGIFAllSightings.setFocusPainted(false);
        btnGIFAllSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnGIFAllSightings.setIconTextGap(10);
        btnGIFAllSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnGIFAllSightings.setMaximumSize(new java.awt.Dimension(320, 35));
        btnGIFAllSightings.setMinimumSize(new java.awt.Dimension(320, 35));
        btnGIFAllSightings.setName("btnGIFAllSightings"); // NOI18N
        btnGIFAllSightings.setPreferredSize(new java.awt.Dimension(320, 35));
        btnGIFAllSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGIFAllSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnGIFAllSightings);

        btnGIFSelectedSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/GIF.png"))); // NOI18N
        btnGIFSelectedSightings.setText("Animated GIF of the Selected Observations' Images");
        btnGIFSelectedSightings.setToolTipText("Create a SlideShow (Animated GIF) using the Images from the selected Observations.");
        btnGIFSelectedSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGIFSelectedSightings.setFocusPainted(false);
        btnGIFSelectedSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnGIFSelectedSightings.setIconTextGap(10);
        btnGIFSelectedSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnGIFSelectedSightings.setMaximumSize(new java.awt.Dimension(320, 35));
        btnGIFSelectedSightings.setMinimumSize(new java.awt.Dimension(320, 35));
        btnGIFSelectedSightings.setName("btnGIFSelectedSightings"); // NOI18N
        btnGIFSelectedSightings.setPreferredSize(new java.awt.Dimension(320, 35));
        btnGIFSelectedSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGIFSelectedSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnGIFSelectedSightings);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSlideshowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowActionPerformed
        if (visit != null) {
            createSlideshowWithoutSightings(visit.getName(), visit.getWildLogFileID());
        }
        if (location != null) {
            createSlideshowWithoutSightings(location.getName(), location.getWildLogFileID());
        }
        if (element != null) {
            createSlideshowWithoutSightings(element.getPrimaryName(), element.getWildLogFileID());
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowActionPerformed

    private void btnSlideshowSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowSightingsActionPerformed
        Sighting tempSighting = new Sighting();
        if (visit != null) {
            tempSighting.setVisitName(visit.getName());
            createSlideshowWithSightings(visit.getName(), app.getDBI().list(tempSighting, false));
        }
        if (location != null) {
            tempSighting.setLocationName(location.getName());
            createSlideshowWithSightings(location.getName(), app.getDBI().list(tempSighting, false));
        }
        if (element != null) {
            tempSighting.setElementName(element.getPrimaryName());
            createSlideshowWithSightings(element.getPrimaryName(), app.getDBI().list(tempSighting, false));
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowSightingsActionPerformed

    private void btnGIFAllSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGIFAllSightingsActionPerformed
        final Sighting tempSighting = new Sighting();
        final String tempName;
        if (element != null) {
            tempName = element.getPrimaryName();
            tempSighting.setElementName(element.getPrimaryName());
        }
        else
        if (location != null) {
            tempName = location.getName();
            tempSighting.setLocationName(location.getName());
        }
        else
        if (visit != null) {
            tempName = visit.getName();
            tempSighting.setVisitName(visit.getName());
        }
        else {
            tempName = null;
        }
        if (tempName != null) {
            createGIF(tempName, app.getDBI().list(tempSighting, false));
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnGIFAllSightingsActionPerformed

    private void btnSlideshowSelectedSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowSelectedSightingsActionPerformed
        if (lstSightings != null && !lstSightings.isEmpty()) {
            createSlideshowWithSightings("Observations", lstSightings);
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowSelectedSightingsActionPerformed

    private void btnGIFSelectedSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGIFSelectedSightingsActionPerformed
        if (lstSightings != null && !lstSightings.isEmpty()) {
            createGIF("Observations", lstSightings);
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnGIFSelectedSightingsActionPerformed

    private void createSlideshowWithoutSightings(String inName, String inWildLogFileID) {
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + inName + "'");
                List<String> slideshowList = UtilsMovies.getFilePaths(app, new WildLogFile(inWildLogFileID));
                setMessage("Creating the Slideshow for '" + inName + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(inName + ".mov"));
                setMessage("Done with the Slideshow for '" + inName + "'");
                return null;
            }
        });
    }
    
    private void createSlideshowWithSightings(String inName, List<Sighting> inLstSightings) {
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + inName + "'");
                // Get all the files for each Sighting
                Collections.sort(inLstSightings);
                List<String> slideshowList = new ArrayList<String>(inLstSightings.size() * 3);
                for (Sighting tempSighting : inLstSightings) {
                    slideshowList.addAll(UtilsMovies.getFilePaths(app, new WildLogFile(tempSighting.getWildLogFileID())));
                }
                // Now create the slideshow
                setMessage("Creating the Slideshow for '" + inName + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(inName + "_Observations.mov"));
                setMessage("Done with the Slideshow for '" + inName + "'");
                return null;
            }
        });
    }
    
    private void createGIF(final String inTempName, final List<Sighting> inLstSighting) {
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Animated GIF for '" + inTempName + "'");
                if (!inLstSighting.isEmpty()) {
                    Collections.sort(inLstSighting);
                    setProgress(1);
                    setMessage("Creating the Animated GIF for '" + inTempName + "' " + getProgress() + "%");
                    List<String> slideshowList = new ArrayList<String>(inLstSighting.size() * 3);
                    for (Sighting tempSighting : inLstSighting) {
                        slideshowList.addAll(UtilsMovies.getFilePaths(app, new WildLogFile(tempSighting.getWildLogFileID())));
                    }
                    // Now create the GIF
                    if (!slideshowList.isEmpty()) {
                        Path outputPath = WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(inTempName + "_Observations.gif");
                        Files.createDirectories(outputPath.getParent());
                        ImageOutputStream output = null;
                        try {
                            output = new FileImageOutputStream(outputPath.toFile());
                            int thumbnailSize = app.getWildLogOptions().getDefaultSlideshowSize();
                            ImageIcon image = UtilsImageProcessing.getScaledIcon(WildLogSystemImages.MOVIES.getWildLogFile().getAbsolutePath(), thumbnailSize, false);
                            BufferedImage bufferedImage = new BufferedImage(image.getIconWidth(), image.getIconHeight(), BufferedImage.TYPE_INT_RGB);
                            Graphics2D graphics2D = bufferedImage.createGraphics();
                            graphics2D.drawImage(image.getImage(),
                                    (thumbnailSize - image.getIconWidth())/2,
                                    (thumbnailSize - image.getIconHeight())/2,
                                    image.getIconWidth(),
                                    image.getIconHeight(),
                                    Color.BLACK, null);
                            int timeBetweenFrames = (int) (1000.0 / ((double) app.getWildLogOptions().getDefaultSlideshowSpeed()));
                            AnimatedGIFWriter gifWriter = new AnimatedGIFWriter(output, bufferedImage.getType(), timeBetweenFrames, true);
                            gifWriter.writeToGIF(bufferedImage);
                            setProgress(2);
                            setMessage("Creating the Animated GIF for '" + inTempName + "' " + getProgress() + "%");
                            for (int t = 0; t < slideshowList.size(); t++) {
                                image = UtilsImageProcessing.getScaledIcon(Paths.get(slideshowList.get(t)), thumbnailSize, true);
                                bufferedImage = new BufferedImage(thumbnailSize, thumbnailSize, BufferedImage.TYPE_INT_RGB);
                                graphics2D = bufferedImage.createGraphics();
                                graphics2D.drawImage(image.getImage(),
                                        (thumbnailSize - image.getIconWidth())/2,
                                        (thumbnailSize - image.getIconHeight())/2,
                                        image.getIconWidth(),
                                        image.getIconHeight(),
                                        Color.BLACK, null);
                                gifWriter.writeToGIF(bufferedImage);
                                setProgress(2 + (int)((((double)t)/((double)slideshowList.size()))*98));
                                setMessage("Creating the Animated GIF for '" + inTempName + "' " + getProgress() + "%");
                            }
                            gifWriter.finishGIF();
                        }
                        catch (IOException ex) {
                            WildLogApp.LOGGER.log(Level.SEVERE, ex.toString(), ex);
                        }
                        finally {
                            if (output != null) {
                                try {
                                    output.flush();
                                }
                                catch (IOException ex) {
                                    WildLogApp.LOGGER.log(Level.SEVERE, ex.toString(), ex);
                                }
                                try {
                                    output.close();
                                }
                                catch (IOException ex) {
                                    WildLogApp.LOGGER.log(Level.SEVERE, ex.toString(), ex);
                                }
                            }
                        }
                        UtilsFileProcessing.openFile(outputPath.getParent());
                    }
                }
                setProgress(100);
                setMessage("Done with the Animated GIF for '" + inTempName + "'");
                return null;
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGIFAllSightings;
    private javax.swing.JButton btnGIFSelectedSightings;
    private javax.swing.JButton btnSlideshow;
    private javax.swing.JButton btnSlideshowSelectedSightings;
    private javax.swing.JButton btnSlideshowSightings;
    // End of variables declaration//GEN-END:variables
}
