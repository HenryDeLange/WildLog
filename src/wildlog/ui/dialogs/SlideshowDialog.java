package wildlog.ui.dialogs;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.imageio.stream.FileImageOutputStream;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.dataobjects.WildLogFile;
import wildlog.movies.gifmovie.AnimatedGIFWriter;
import wildlog.movies.utils.UtilsMovies;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.ProgressbarTask;
import wildlog.utils.UtilsConcurency;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.UtilsImageProcessing;
import wildlog.utils.WildLogPaths;
import wildlog.utils.WildLogSystemImages;


public class SlideshowDialog extends JDialog {
    private final WildLogApp app;
    private final Visit visit;
    private final Location location;
    private final Element element;

    
    public SlideshowDialog(WildLogApp inApp, Visit inVisit, Location inLocation, Element inElement) {
        super();
        System.out.println("Using SlideshowDialog");
        // Set passed in values
        app = inApp;
        visit = inVisit;
        location = inLocation;
        element = inElement;
        // Auto generated code
        initComponents();
        // Determine what buttons to show
        if (visit == null) {
            btnSlideshowVisit.setVisible(false);
            btnSlideshowVisitSightings.setVisible(false);
        }
        if (location == null) {
            btnSlideshowLocation.setVisible(false);
            btnSlideshowLocationSightings.setVisible(false);
        }
        if (element == null) {
            btnSlideshowElement.setVisible(false);
            btnSlideshowElementSightings.setVisible(false);
        }
        // Pack
        pack();
        // Setup the default behavior
        UtilsDialog.addEscapeKeyListener(this);
        UtilsDialog.setDialogToCenter(app.getMainFrame(), this);
        UtilsDialog.addModalBackgroundPanel(app.getMainFrame(), this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSlideshowVisit = new javax.swing.JButton();
        btnSlideshowVisitSightings = new javax.swing.JButton();
        btnSlideshowLocation = new javax.swing.JButton();
        btnSlideshowLocationSightings = new javax.swing.JButton();
        btnSlideshowElement = new javax.swing.JButton();
        btnSlideshowElementSightings = new javax.swing.JButton();
        btnGIFElementSightings = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Available Slideshows");
        setIconImage(new ImageIcon(app.getClass().getResource("resources/icons/Slideshow.gif")).getImage());
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        btnSlideshowVisit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowVisit.setText("Slideshow of the Period's Images");
        btnSlideshowVisit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowVisit.setFocusPainted(false);
        btnSlideshowVisit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowVisit.setIconTextGap(10);
        btnSlideshowVisit.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowVisit.setMaximumSize(new java.awt.Dimension(260, 35));
        btnSlideshowVisit.setMinimumSize(new java.awt.Dimension(260, 35));
        btnSlideshowVisit.setName("btnSlideshowVisit"); // NOI18N
        btnSlideshowVisit.setPreferredSize(new java.awt.Dimension(260, 35));
        btnSlideshowVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowVisitActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowVisit);

        btnSlideshowVisitSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowVisitSightings.setText("Slideshow of the Observations' Images");
        btnSlideshowVisitSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowVisitSightings.setFocusPainted(false);
        btnSlideshowVisitSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowVisitSightings.setIconTextGap(10);
        btnSlideshowVisitSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowVisitSightings.setMaximumSize(new java.awt.Dimension(260, 35));
        btnSlideshowVisitSightings.setMinimumSize(new java.awt.Dimension(260, 35));
        btnSlideshowVisitSightings.setName("btnSlideshowVisitSightings"); // NOI18N
        btnSlideshowVisitSightings.setPreferredSize(new java.awt.Dimension(260, 35));
        btnSlideshowVisitSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowVisitSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowVisitSightings);

        btnSlideshowLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowLocation.setText("Slideshow of the Place's Images");
        btnSlideshowLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowLocation.setFocusPainted(false);
        btnSlideshowLocation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowLocation.setIconTextGap(10);
        btnSlideshowLocation.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowLocation.setMaximumSize(new java.awt.Dimension(260, 35));
        btnSlideshowLocation.setMinimumSize(new java.awt.Dimension(260, 35));
        btnSlideshowLocation.setName("btnSlideshowLocation"); // NOI18N
        btnSlideshowLocation.setPreferredSize(new java.awt.Dimension(260, 35));
        btnSlideshowLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowLocationActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowLocation);

        btnSlideshowLocationSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowLocationSightings.setText("Slideshow of the Observations' Images");
        btnSlideshowLocationSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowLocationSightings.setFocusPainted(false);
        btnSlideshowLocationSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowLocationSightings.setIconTextGap(10);
        btnSlideshowLocationSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowLocationSightings.setMaximumSize(new java.awt.Dimension(260, 35));
        btnSlideshowLocationSightings.setMinimumSize(new java.awt.Dimension(260, 35));
        btnSlideshowLocationSightings.setName("btnSlideshowLocationSightings"); // NOI18N
        btnSlideshowLocationSightings.setPreferredSize(new java.awt.Dimension(260, 35));
        btnSlideshowLocationSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowLocationSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowLocationSightings);

        btnSlideshowElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowElement.setText("Slideshow of the Creature's Images");
        btnSlideshowElement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowElement.setFocusPainted(false);
        btnSlideshowElement.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowElement.setIconTextGap(10);
        btnSlideshowElement.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowElement.setMaximumSize(new java.awt.Dimension(260, 35));
        btnSlideshowElement.setMinimumSize(new java.awt.Dimension(260, 35));
        btnSlideshowElement.setName("btnSlideshowElement"); // NOI18N
        btnSlideshowElement.setPreferredSize(new java.awt.Dimension(260, 35));
        btnSlideshowElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowElementActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowElement);

        btnSlideshowElementSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Slideshow.gif"))); // NOI18N
        btnSlideshowElementSightings.setText("Slideshow of the Observations' Images");
        btnSlideshowElementSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlideshowElementSightings.setFocusPainted(false);
        btnSlideshowElementSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSlideshowElementSightings.setIconTextGap(10);
        btnSlideshowElementSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnSlideshowElementSightings.setMaximumSize(new java.awt.Dimension(260, 35));
        btnSlideshowElementSightings.setMinimumSize(new java.awt.Dimension(260, 35));
        btnSlideshowElementSightings.setName("btnSlideshowElementSightings"); // NOI18N
        btnSlideshowElementSightings.setPreferredSize(new java.awt.Dimension(260, 35));
        btnSlideshowElementSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlideshowElementSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnSlideshowElementSightings);

        btnGIFElementSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/GIF.png"))); // NOI18N
        btnGIFElementSightings.setText("Animated GIF of the Observations' Images");
        btnGIFElementSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGIFElementSightings.setFocusPainted(false);
        btnGIFElementSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnGIFElementSightings.setIconTextGap(10);
        btnGIFElementSightings.setMargin(new java.awt.Insets(2, 6, 2, 6));
        btnGIFElementSightings.setMaximumSize(new java.awt.Dimension(260, 35));
        btnGIFElementSightings.setMinimumSize(new java.awt.Dimension(260, 35));
        btnGIFElementSightings.setName("btnGIFElementSightings"); // NOI18N
        btnGIFElementSightings.setPreferredSize(new java.awt.Dimension(260, 35));
        btnGIFElementSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGIFElementSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnGIFElementSightings);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSlideshowVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowVisitActionPerformed
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + visit.getName() + "'");
                List<String> slideshowList = UtilsMovies.getFilePaths(app, new WildLogFile(visit.getWildLogFileID()));
                setMessage("Creating the Slideshow for '" + visit.getName() + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(visit.getName() + ".mov"));
                setMessage("Done with the Slideshow for '" + visit.getName() + "'");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowVisitActionPerformed

    private void btnSlideshowVisitSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowVisitSightingsActionPerformed
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + visit.getName() + "'");
                Sighting temp = new Sighting();
                temp.setVisitName(visit.getName());
                List<Sighting> sightingList = app.getDBI().list(temp, false);
                Collections.sort(sightingList);
                List<String> slideshowList = new ArrayList<String>(sightingList.size() * 3);
                for (Sighting tempSighting : sightingList) {
                    slideshowList.addAll(UtilsMovies.getFilePaths(app, new WildLogFile(tempSighting.getWildLogFileID())));
                }
                // Now create the slideshow
                setMessage("Creating the Slideshow for '" + visit.getName() + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(visit.getName() + "_Observations.mov"));
                setMessage("Done with the Slideshow for '" + visit.getName() + "'");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowVisitSightingsActionPerformed

    private void btnSlideshowLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowLocationActionPerformed
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + location.getName() + "'");
                List<String> slideshowList = UtilsMovies.getFilePaths(app, new WildLogFile(location.getWildLogFileID()));
                setMessage("Creating the Slideshow for '" + location.getName() + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(location.getName() + ".mov"));
                setMessage("Done with the Slideshow for '" + location.getName() + "'");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowLocationActionPerformed

    private void btnSlideshowLocationSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowLocationSightingsActionPerformed
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + location.getName() + "'");
                Sighting temp = new Sighting();
                temp.setLocationName(location.getName());
                List<Sighting> sightingList = app.getDBI().list(temp, false);
                Collections.sort(sightingList);
                List<String> slideshowList = new ArrayList<String>(sightingList.size() * 3);
                for (Sighting tempSighting : sightingList) {
                    slideshowList.addAll(UtilsMovies.getFilePaths(app, new WildLogFile(tempSighting.getWildLogFileID())));
                }
                // Now create the slideshow
                setMessage("Creating the Slideshow for '" + location.getName() + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(location.getName() + "_Observations.mov"));
                setMessage("Done with the Slideshow for '" + location.getName() + "'");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowLocationSightingsActionPerformed

    private void btnSlideshowElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowElementActionPerformed
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + element.getPrimaryName() + "'");
                List<String> slideshowList = UtilsMovies.getFilePaths(app, new WildLogFile(element.getWildLogFileID()));
                setMessage("Creating the Slideshow for '" + element.getPrimaryName() + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(element.getPrimaryName() + ".mov"));
                setMessage("Done with the Slideshow for '" + element.getPrimaryName() + "'");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowElementActionPerformed

    private void btnSlideshowElementSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlideshowElementSightingsActionPerformed
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                setMessage("Creating the Slideshow for '" + element.getPrimaryName() + "'");
                Sighting temp = new Sighting();
                temp.setElementName(element.getPrimaryName());
                List<Sighting> sightingList = app.getDBI().list(temp, false);
                Collections.sort(sightingList);
                List<String> slideshowList = new ArrayList<String>(sightingList.size() * 3);
                for (Sighting tempSighting : sightingList) {
                    slideshowList.addAll(UtilsMovies.getFilePaths(app, new WildLogFile(tempSighting.getWildLogFileID())));
                }
                // Now create the slideshow
                setMessage("Creating the Slideshow for '" + element.getPrimaryName() + "' (Busy writing the file, this may take a while.)");
                UtilsMovies.generateSlideshow(slideshowList, app,
                        WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(element.getPrimaryName() + "_Observations.mov"));
                setMessage("Done with the Slideshow for '" + element.getPrimaryName() + "'");
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnSlideshowElementSightingsActionPerformed

    private void btnGIFElementSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGIFElementSightingsActionPerformed
        final Sighting temp = new Sighting();
        final String tempName;
        if (element != null) {
            tempName = element.getPrimaryName();
            temp.setElementName(element.getPrimaryName());
        }
        else
        if (location != null) {
            tempName = location.getName();
            temp.setLocationName(location.getName());
        }
        else
        if (visit != null) {
            tempName = visit.getName();
            temp.setVisitName(visit.getName());
        }
        else {
            tempName = null;
        }
        if (tempName != null) {
            UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
                @Override
                protected Object doInBackground() throws Exception {
                    setMessage("Creating the Animated GIF for '" + tempName + "'");
                    List<Sighting> sightingList = app.getDBI().list(temp, false);
                    if (!sightingList.isEmpty()) {
                        Collections.sort(sightingList);
                        setProgress(1);
                        setMessage("Creating the Animated GIF for '" + tempName + "' " + getProgress() + "%");
                        List<String> slideshowList = new ArrayList<String>(sightingList.size() * 3);
                        for (Sighting tempSighting : sightingList) {
                            slideshowList.addAll(UtilsMovies.getFilePaths(app, new WildLogFile(tempSighting.getWildLogFileID())));
                        }
                        // Now create the GIF
                        if (!slideshowList.isEmpty()) {
                            Path outputPath = WildLogPaths.WILDLOG_EXPORT_SLIDESHOW.getAbsoluteFullPath().resolve(tempName + "_Observations.gif");
                            Files.createDirectories(outputPath.getParent());
                            ImageOutputStream output = null;
                            try {
                                output = new FileImageOutputStream(outputPath.toFile());
                                int thumbnailSize = app.getWildLogOptions().getDefaultSlideshowSize();
                                ImageIcon image = UtilsImageProcessing.getScaledIcon(WildLogSystemImages.MOVIES.getWildLogFile().getAbsolutePath(), thumbnailSize);
                                BufferedImage bufferedImage = new BufferedImage(image.getIconWidth(), image.getIconHeight(), BufferedImage.TYPE_INT_RGB);
                                Graphics2D graphics2D = bufferedImage.createGraphics();
                                graphics2D.drawImage(image.getImage(), 
                                            (thumbnailSize - image.getIconWidth())/2, 
                                            (thumbnailSize - image.getIconHeight())/2, 
                                            image.getIconWidth(), 
                                            image.getIconHeight(), 
                                            Color.BLACK, null);
                                int timeBetweenFrames = (int) (1000.0 / ((double) app.getWildLogOptions().getDefaultSlideshowSpeed()));
                                AnimatedGIFWriter gifWriter = new AnimatedGIFWriter(output, bufferedImage.getType(), timeBetweenFrames, true);
                                gifWriter.writeToGIF(bufferedImage);
                                setProgress(2);
                                setMessage("Creating the Animated GIF for '" + tempName + "' " + getProgress() + "%");
                                for (int t = 0; t < slideshowList.size(); t++) {
                                    image = UtilsImageProcessing.getScaledIcon(Paths.get(slideshowList.get(t)), thumbnailSize);
                                    bufferedImage = new BufferedImage(thumbnailSize, thumbnailSize, BufferedImage.TYPE_INT_RGB);
                                    graphics2D = bufferedImage.createGraphics();
                                    graphics2D.drawImage(image.getImage(), 
                                            (thumbnailSize - image.getIconWidth())/2, 
                                            (thumbnailSize - image.getIconHeight())/2, 
                                            image.getIconWidth(), 
                                            image.getIconHeight(), 
                                            Color.BLACK, null);
                                    gifWriter.writeToGIF(bufferedImage);
                                    setProgress(2 + (int)((((double)t)/((double)slideshowList.size()))*98));
                                    setMessage("Creating the Animated GIF for '" + tempName + "' " + getProgress() + "%");
                                }
                                gifWriter.finishGIF();
                            }
                            catch (IOException ex) {
                                ex.printStackTrace(System.err);
                            }
                            finally {
                                if (output != null) {
                                    try {
                                        output.flush();
                                    }
                                    catch (IOException ex) {
                                        ex.printStackTrace(System.err);
                                    }
                                    try {
                                        output.close();
                                    }
                                    catch (IOException ex) {
                                        ex.printStackTrace(System.err);
                                    }
                                }
                            }
                            UtilsFileProcessing.openFile(outputPath.getParent());
                        }
                    }
                    setProgress(100);
                    setMessage("Done with the Animated GIF for '" + tempName + "'");
                    return null;
                }
            });
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnGIFElementSightingsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGIFElementSightings;
    private javax.swing.JButton btnSlideshowElement;
    private javax.swing.JButton btnSlideshowElementSightings;
    private javax.swing.JButton btnSlideshowLocation;
    private javax.swing.JButton btnSlideshowLocationSightings;
    private javax.swing.JButton btnSlideshowVisit;
    private javax.swing.JButton btnSlideshowVisitSightings;
    // End of variables declaration//GEN-END:variables
}
