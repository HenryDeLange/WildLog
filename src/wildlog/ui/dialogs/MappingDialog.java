package wildlog.ui.dialogs;

import java.awt.Color;
import java.io.File;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.enums.Latitudes;
import wildlog.data.enums.Longitudes;
import wildlog.maps.kml.UtilsKML;
import wildlog.maps.utils.UtilsMapGenerator;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.ProgressbarTask;
import wildlog.ui.maps.MapsBaseDialog;
import wildlog.utils.UtilsConcurency;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.WildLogPaths;


public class MappingDialog extends JDialog {
    private final WildLogApp app;
    private final Location location;
    private final Element element;
    private final Visit visit;
    private final Sighting sighting;
    private final List<Sighting> lstSightings;

    
    public MappingDialog(WildLogApp inApp,
            Location inLocationToMap,
            Element inElementToMap,
            Visit inVisit,
            Sighting inSighting,
            List<Sighting> inLstSightings) {
        super(inApp.getMainFrame());
        System.out.println("[MappingDialog]");
        // Set passed in values
        app = inApp;
        location = inLocationToMap;
        element = inElementToMap;
        visit = inVisit;
        sighting = inSighting;
        lstSightings = inLstSightings;
        // Auto generated code
        initComponents();

        // Determine what buttons to show
        if (location == null) {
            btnViewLocation.setVisible(false);
            btnViewAllSightingsForLocation.setVisible(false);
        }
        if (element == null) {
            btnViewAllSightingsForElement.setVisible(false);
            btnViewDistributionMap.setVisible(false);
            btnViewSightingsAndDistributionMap.setVisible(false);
            btnViewDistributionMap.setVisible(false);
            btnViewSightingsAndDistributionMap.setVisible(false);
        }
        else {
            if (element.getScientificName() != null && !element.getScientificName().isEmpty()) {
                File file = WildLogPaths.WILDLOG_MAPS.getAbsoluteFullPath().resolve(element.getScientificName()).resolve(element.getScientificName() + ".shp").toFile();
                if (!file.exists() || file.isDirectory()) {
                    btnViewDistributionMap.setVisible(false);
                    btnViewSightingsAndDistributionMap.setVisible(false);
                }
            }
            else {
                btnViewDistributionMap.setVisible(false);
                btnViewSightingsAndDistributionMap.setVisible(false);
            }
        }
        if (location == null && element == null && visit == null && lstSightings == null) {
            btnOpenKmlViewer.setVisible(false);
        }
        if (visit == null) {
            btnViewAllSightingsForVisit.setVisible(false);
        }
        if (sighting == null) {
            btnViewSelectedSighting.setVisible(false);
        }
        if (inLstSightings == null) {
            btnViewListOfSightings.setVisible(false);
        }
        // Pack
        pack();
        // Setup the default behavior
        UtilsDialog.addEscapeKeyListener(this);
        UtilsDialog.setDialogToCenter(app.getMainFrame(), this);
        UtilsDialog.addModalBackgroundPanel(app.getMainFrame(), this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNewMAPS = new javax.swing.JButton();
        btnViewAllSightingsForLocation = new javax.swing.JButton();
        btnViewLocation = new javax.swing.JButton();
        btnViewAllSightingsForVisit = new javax.swing.JButton();
        btnViewAllSightingsForElement = new javax.swing.JButton();
        btnViewSelectedSighting = new javax.swing.JButton();
        btnViewListOfSightings = new javax.swing.JButton();
        btnViewSightingsAndDistributionMap = new javax.swing.JButton();
        btnViewDistributionMap = new javax.swing.JButton();
        btnOpenKmlViewer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Available Maps");
        setIconImage(new ImageIcon(app.getClass().getResource("resources/icons/Map_Small.gif")).getImage());
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        btnNewMAPS.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map_Small.gif"))); // NOI18N
        btnNewMAPS.setText("NEW MAPS");
        btnNewMAPS.setToolTipText("");
        btnNewMAPS.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNewMAPS.setFocusPainted(false);
        btnNewMAPS.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnNewMAPS.setIconTextGap(11);
        btnNewMAPS.setMargin(new java.awt.Insets(2, 11, 2, 8));
        btnNewMAPS.setMaximumSize(new java.awt.Dimension(275, 35));
        btnNewMAPS.setMinimumSize(new java.awt.Dimension(275, 35));
        btnNewMAPS.setName("btnNewMAPS"); // NOI18N
        btnNewMAPS.setPreferredSize(new java.awt.Dimension(275, 35));
        btnNewMAPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewMAPSActionPerformed(evt);
            }
        });
        getContentPane().add(btnNewMAPS);

        btnViewAllSightingsForLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewAllSightingsForLocation.setText("View map of Observations at the Place");
        btnViewAllSightingsForLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewAllSightingsForLocation.setFocusPainted(false);
        btnViewAllSightingsForLocation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewAllSightingsForLocation.setIconTextGap(10);
        btnViewAllSightingsForLocation.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewAllSightingsForLocation.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForLocation.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForLocation.setName("btnViewAllSightingsForLocation"); // NOI18N
        btnViewAllSightingsForLocation.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllSightingsForLocationActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewAllSightingsForLocation);

        btnViewLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewLocation.setText("View map of the Place");
        btnViewLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewLocation.setFocusPainted(false);
        btnViewLocation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewLocation.setIconTextGap(10);
        btnViewLocation.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewLocation.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewLocation.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewLocation.setName("btnViewLocation"); // NOI18N
        btnViewLocation.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewLocationActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewLocation);

        btnViewAllSightingsForVisit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewAllSightingsForVisit.setText("View map of Observations during the Period");
        btnViewAllSightingsForVisit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewAllSightingsForVisit.setFocusPainted(false);
        btnViewAllSightingsForVisit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewAllSightingsForVisit.setIconTextGap(10);
        btnViewAllSightingsForVisit.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewAllSightingsForVisit.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForVisit.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForVisit.setName("btnViewAllSightingsForVisit"); // NOI18N
        btnViewAllSightingsForVisit.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllSightingsForVisitActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewAllSightingsForVisit);

        btnViewAllSightingsForElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewAllSightingsForElement.setText("View map of Observations of the Creature");
        btnViewAllSightingsForElement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewAllSightingsForElement.setFocusPainted(false);
        btnViewAllSightingsForElement.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewAllSightingsForElement.setIconTextGap(10);
        btnViewAllSightingsForElement.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewAllSightingsForElement.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForElement.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForElement.setName("btnViewAllSightingsForElement"); // NOI18N
        btnViewAllSightingsForElement.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewAllSightingsForElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllSightingsForElementActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewAllSightingsForElement);

        btnViewSelectedSighting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewSelectedSighting.setText("View map of the selected Observation");
        btnViewSelectedSighting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewSelectedSighting.setFocusPainted(false);
        btnViewSelectedSighting.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewSelectedSighting.setIconTextGap(10);
        btnViewSelectedSighting.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewSelectedSighting.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewSelectedSighting.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewSelectedSighting.setName("btnViewSelectedSighting"); // NOI18N
        btnViewSelectedSighting.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewSelectedSighting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSelectedSightingActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewSelectedSighting);

        btnViewListOfSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewListOfSightings.setText("View map of the Observation(s)");
        btnViewListOfSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewListOfSightings.setFocusPainted(false);
        btnViewListOfSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewListOfSightings.setIconTextGap(10);
        btnViewListOfSightings.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewListOfSightings.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewListOfSightings.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewListOfSightings.setName("btnViewListOfSightings"); // NOI18N
        btnViewListOfSightings.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewListOfSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewListOfSightingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewListOfSightings);

        btnViewSightingsAndDistributionMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewSightingsAndDistributionMap.setText("View map of Distribution and Observations");
        btnViewSightingsAndDistributionMap.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewSightingsAndDistributionMap.setFocusPainted(false);
        btnViewSightingsAndDistributionMap.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewSightingsAndDistributionMap.setIconTextGap(10);
        btnViewSightingsAndDistributionMap.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewSightingsAndDistributionMap.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewSightingsAndDistributionMap.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewSightingsAndDistributionMap.setName("btnViewSightingsAndDistributionMap"); // NOI18N
        btnViewSightingsAndDistributionMap.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewSightingsAndDistributionMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSightingsAndDistributionMapActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewSightingsAndDistributionMap);

        btnViewDistributionMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map.gif"))); // NOI18N
        btnViewDistributionMap.setText("View map of Distribution");
        btnViewDistributionMap.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewDistributionMap.setFocusPainted(false);
        btnViewDistributionMap.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewDistributionMap.setIconTextGap(10);
        btnViewDistributionMap.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnViewDistributionMap.setMaximumSize(new java.awt.Dimension(275, 35));
        btnViewDistributionMap.setMinimumSize(new java.awt.Dimension(275, 35));
        btnViewDistributionMap.setName("btnViewDistributionMap"); // NOI18N
        btnViewDistributionMap.setPreferredSize(new java.awt.Dimension(275, 35));
        btnViewDistributionMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDistributionMapActionPerformed(evt);
            }
        });
        getContentPane().add(btnViewDistributionMap);

        btnOpenKmlViewer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/GoogleEarth.png"))); // NOI18N
        btnOpenKmlViewer.setText("Open KML File (needs external viewer)");
        btnOpenKmlViewer.setToolTipText("Open a KML file for all relevant Observations and linked records. Can be opened in Google Earth, etc.");
        btnOpenKmlViewer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOpenKmlViewer.setFocusPainted(false);
        btnOpenKmlViewer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnOpenKmlViewer.setIconTextGap(11);
        btnOpenKmlViewer.setMargin(new java.awt.Insets(2, 11, 2, 8));
        btnOpenKmlViewer.setMaximumSize(new java.awt.Dimension(275, 35));
        btnOpenKmlViewer.setMinimumSize(new java.awt.Dimension(275, 35));
        btnOpenKmlViewer.setName("btnOpenKmlViewer"); // NOI18N
        btnOpenKmlViewer.setPreferredSize(new java.awt.Dimension(275, 35));
        btnOpenKmlViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenKmlViewerActionPerformed(evt);
            }
        });
        getContentPane().add(btnOpenKmlViewer);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewLocationActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, false);
        // Load points
        if (location.getLatitude() != null && location.getLongitude() != null)
            if (!location.getLatitude().equals(Latitudes.NONE) && !location.getLongitude().equals(Longitudes.NONE)) {
                double lat = location.getLatDegrees();
                lat = lat + location.getLatMinutes()/60.0;
                lat = lat + (location.getLatSeconds()/60.0)/60.0;
                if (location.getLatitude().equals(Latitudes.SOUTH))
                    lat = -1 * lat;
                double lon = location.getLonDegrees();
                lon = lon + location.getLonMinutes()/60.0;
                lon = lon + (location.getLonSeconds()/60.0)/60.0;
                if (location.getLongitude().equals(Longitudes.WEST))
                    lon = -1 * lon;
                UtilsMapGenerator.addPoint(lat, lon, new Color(230, 190, 50), location, app, false);
            }
        setVisible(false);
        dispose();
        // Open Map
        if (app.getWildLogOptions().isIsOnlinemapTheDefault()) {
            app.getMapOnline().setTitle("WildLog Map - Online: " + location.getName());
            app.getMapOnline().setLocationRelativeTo(app.getMainFrame());
            app.getMapOnline().showMap(Color.yellow);
        }
        else {
            app.getMapOffline().changeTitle("WildLog Map - Offline: " + location.getName());
            app.getMapOffline().showMap(app);
        }
    }//GEN-LAST:event_btnViewLocationActionPerformed

    private void btnViewAllSightingsForLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllSightingsForLocationActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, false);
        // Load points
        Sighting tempSighting = new Sighting();
        tempSighting.setLocationName(location.getName());
        List<Sighting> sightings = app.getDBI().list(tempSighting, false);
        for (int i = 0; i < sightings.size(); i++) {
            if (sightings.get(i).getLatitude() != null && sightings.get(i).getLongitude() != null) {
                if (!sightings.get(i).getLatitude().equals(Latitudes.NONE) && !sightings.get(i).getLongitude().equals(Longitudes.NONE)) {
                    double lat = sightings.get(i).getLatDegrees();
                    lat = lat + sightings.get(i).getLatMinutes()/60.0;
                    lat = lat + (sightings.get(i).getLatSeconds()/60.0)/60.0;
                    if (sightings.get(i).getLatitude().equals(Latitudes.SOUTH))
                        lat = -1 * lat;
                    double lon = sightings.get(i).getLonDegrees();
                    lon = lon + sightings.get(i).getLonMinutes()/60.0;
                    lon = lon + (sightings.get(i).getLonSeconds()/60.0)/60.0;
                    if (sightings.get(i).getLongitude().equals(Longitudes.WEST))
                        lon = -1 * lon;
                    UtilsMapGenerator.addPoint(lat, lon, new Color(230, 90, 50), sightings.get(i), app, false);
                }
            }
        }
        setVisible(false);
        dispose();
        // Open Map
        if (app.getWildLogOptions().isIsOnlinemapTheDefault()) {
            app.getMapOnline().setTitle("WildLog Map - Online: " + location.getName() + " (Observations)");
            app.getMapOnline().setLocationRelativeTo(app.getMainFrame());
            app.getMapOnline().showMap(Color.yellow);
        }
        else {
            app.getMapOffline().changeTitle("WildLog Map - Offline: " + location.getName() + " (Observations)");
            app.getMapOffline().showMap(app);
        }
    }//GEN-LAST:event_btnViewAllSightingsForLocationActionPerformed

    private void btnViewAllSightingsForElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllSightingsForElementActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, false);
        // Load points
        Sighting sigting = new Sighting();
        sigting.setElementName(element.getPrimaryName());
        List<Sighting> sightingList = app.getDBI().list(sigting, false);
        boolean foundPosition;
        for (int t = 0; t < sightingList.size(); t++) {
            foundPosition = false;
            if (sightingList.get(t).getLatitude() != null && sightingList.get(t).getLongitude() != null)
            if (!sightingList.get(t).getLatitude().equals(Latitudes.NONE) && !sightingList.get(t).getLongitude().equals(Longitudes.NONE)) {
                double lat = sightingList.get(t).getLatDegrees();
                lat = lat + sightingList.get(t).getLatMinutes()/60.0;
                lat = lat + (sightingList.get(t).getLatSeconds()/60.0)/60.0;
                if (sightingList.get(t).getLatitude().equals(Latitudes.SOUTH))
                    lat = -1 * lat;
                double lon = sightingList.get(t).getLonDegrees();
                lon = lon + sightingList.get(t).getLonMinutes()/60.0;
                lon = lon + (sightingList.get(t).getLonSeconds()/60.0)/60.0;
                if (sightingList.get(t).getLongitude().equals(Longitudes.WEST))
                    lon = -1 * lon;
                UtilsMapGenerator.addPoint(lat, lon, new Color(230, 90, 50), sightingList.get(t), app, false);
                foundPosition = true;
            }
            // If the sighting did not have a position use the location's
            if (foundPosition == false) {
                Location tempLocation = app.getDBI().find(new Location(sightingList.get(t).getLocationName()));
                double lat = tempLocation.getLatDegrees();
                lat = lat + tempLocation.getLatMinutes()/60.0;
                lat = lat + (tempLocation.getLatSeconds()/60.0)/60.0;
                if (tempLocation.getLatitude().equals(Latitudes.SOUTH))
                    lat = -1 * lat;
                double lon = tempLocation.getLonDegrees();
                lon = lon + tempLocation.getLonMinutes()/60.0;
                lon = lon + (tempLocation.getLonSeconds()/60.0)/60.0;
                if (tempLocation.getLongitude().equals(Longitudes.WEST))
                    lon = -1 * lon;
                UtilsMapGenerator.addPoint(lat, lon, new Color(230, 190, 50), sightingList.get(t), app, false);
            }
        }
        setVisible(false);
        dispose();
        // Open Map
        if (app.getWildLogOptions().isIsOnlinemapTheDefault()) {
            app.getMapOnline().setTitle("WildLog Map - Online: " + element.getPrimaryName());
            app.getMapOnline().setLocationRelativeTo(this);
            app.getMapOnline().showMap(Color.yellow);
        }
        else {
            app.getMapOffline().changeTitle("WildLog Map - Offline: " + element.getPrimaryName());
            app.getMapOffline().showMap(app);
        }
    }//GEN-LAST:event_btnViewAllSightingsForElementActionPerformed

    private void btnOpenKmlViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenKmlViewerActionPerformed
        UtilsConcurency.kickoffProgressbarTask(app, new ProgressbarTask(app) {
            @Override
            protected Object doInBackground() throws Exception {
                if (location != null) {
                    UtilsKML.exportKML(location, this, app, true);
                }
                if (element != null) {
                    UtilsKML.exportKML(element, this, app, true);
                }
                if (visit != null) {
                    UtilsKML.exportKML(visit, this, app, true);
                }
                if (lstSightings != null) {
                    for (Sighting tempSighting : lstSightings) {
                        UtilsKML.exportKML(tempSighting, this, app, false);
                    }
                    UtilsFileProcessing.openFile(WildLogPaths.WILDLOG_EXPORT_KML.getAbsoluteFullPath());
                }
                return null;
            }
        });
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnOpenKmlViewerActionPerformed

    private void btnViewDistributionMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDistributionMapActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, true);
        File file = WildLogPaths.WILDLOG_MAPS.getAbsoluteFullPath().resolve(element.getScientificName()).resolve(element.getScientificName() + ".shp").toFile();
        UtilsMapGenerator.addDistributionMap(app, file);
        setVisible(false);
        dispose();
        // Open Map
        app.getMapOffline().changeTitle("WildLog Map - Offline: " + element.getPrimaryName() + " - Distribution");
        app.getMapOffline().showMap(app);
    }//GEN-LAST:event_btnViewDistributionMapActionPerformed

    private void btnViewSightingsAndDistributionMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSightingsAndDistributionMapActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, true);
        // Load distribution map
        File file = WildLogPaths.WILDLOG_MAPS.getAbsoluteFullPath().resolve(element.getScientificName()).resolve(element.getScientificName() + ".shp").toFile();
        UtilsMapGenerator.addDistributionMap(app, file);
        // Load points
        Sighting sigting = new Sighting();
        sigting.setElementName(element.getPrimaryName());
        List<Sighting> sightingList = app.getDBI().list(sigting, false);
        boolean foundPosition;
        for (int t = 0; t < sightingList.size(); t++) {
            foundPosition = false;
            if (sightingList.get(t).getLatitude() != null && sightingList.get(t).getLongitude() != null)
            if (!sightingList.get(t).getLatitude().equals(Latitudes.NONE) && !sightingList.get(t).getLongitude().equals(Longitudes.NONE)) {
                double lat = sightingList.get(t).getLatDegrees();
                lat = lat + sightingList.get(t).getLatMinutes()/60.0;
                lat = lat + (sightingList.get(t).getLatSeconds()/60.0)/60.0;
                if (sightingList.get(t).getLatitude().equals(Latitudes.SOUTH))
                    lat = -1 * lat;
                double lon = sightingList.get(t).getLonDegrees();
                lon = lon + sightingList.get(t).getLonMinutes()/60.0;
                lon = lon + (sightingList.get(t).getLonSeconds()/60.0)/60.0;
                if (sightingList.get(t).getLongitude().equals(Longitudes.WEST))
                    lon = -1 * lon;
                UtilsMapGenerator.addPoint(lat, lon, new Color(230, 90, 50), sightingList.get(t), app, true);
                foundPosition = true;
            }
            // If the sighting did not have a position use the location's
            if (foundPosition == false) {
                Location tempLocation = app.getDBI().find(new Location(sightingList.get(t).getLocationName()));
                double lat = tempLocation.getLatDegrees();
                lat = lat + tempLocation.getLatMinutes()/60.0;
                lat = lat + (tempLocation.getLatSeconds()/60.0)/60.0;
                if (tempLocation.getLatitude().equals(Latitudes.SOUTH))
                    lat = -1 * lat;
                double lon = tempLocation.getLonDegrees();
                lon = lon + tempLocation.getLonMinutes()/60.0;
                lon = lon + (tempLocation.getLonSeconds()/60.0)/60.0;
                if (tempLocation.getLongitude().equals(Longitudes.WEST))
                    lon = -1 * lon;
                UtilsMapGenerator.addPoint(lat, lon, new Color(230, 190, 50), sightingList.get(t), app, true);
            }
        }
        setVisible(false);
        dispose();
        // Open Map
        app.getMapOffline().changeTitle("WildLog Map - Offline: " + element.getPrimaryName() + " - Distribution");
        app.getMapOffline().showMap(app);
    }//GEN-LAST:event_btnViewSightingsAndDistributionMapActionPerformed

    private void btnViewAllSightingsForVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllSightingsForVisitActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, false);
        // Load points
        Sighting tempSighting = new Sighting();
        tempSighting.setVisitName(visit.getName());
        List<Sighting> sightings = app.getDBI().list(tempSighting, false);
        for (int t = 0; t < sightings.size(); t++) {
            if (sightings.get(t).getLatitude() != null && sightings.get(t).getLongitude() != null)
            if (!sightings.get(t).getLatitude().equals(Latitudes.NONE) && !sightings.get(t).getLongitude().equals(Longitudes.NONE)) {
                double lat = sightings.get(t).getLatDegrees();
                lat = lat + sightings.get(t).getLatMinutes()/60.0;
                lat = lat + (sightings.get(t).getLatSeconds()/60.0)/60.0;
                if (sightings.get(t).getLatitude().equals(Latitudes.SOUTH))
                    lat = -1 * lat;
                double lon = sightings.get(t).getLonDegrees();
                lon = lon + sightings.get(t).getLonMinutes()/60.0;
                lon = lon + (sightings.get(t).getLonSeconds()/60.0)/60.0;
                if (sightings.get(t).getLongitude().equals(Longitudes.WEST))
                    lon = -1 * lon;
                UtilsMapGenerator.addPoint(lat, lon, new Color(230, 190, 50), sightings.get(t), app, false);
            }
        }
        setVisible(false);
        dispose();
        // Open Map
        if (app.getWildLogOptions().isIsOnlinemapTheDefault()) {
            app.getMapOnline().setTitle("WildLog Map - Online: " + visit.getName());
            app.getMapOnline().setLocationRelativeTo(this);
            app.getMapOnline().showMap(Color.yellow);
        }
        else {
            app.getMapOffline().changeTitle("WildLog Map - Offline: " + visit.getName());
            app.getMapOffline().showMap(app);
        }
    }//GEN-LAST:event_btnViewAllSightingsForVisitActionPerformed

    private void btnViewSelectedSightingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSelectedSightingActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, false);
        // Load points
        if (sighting != null) {
            if (sighting.getLatitude() != null && sighting.getLongitude() != null)
            if (!sighting.getLatitude().equals(Latitudes.NONE) && !sighting.getLongitude().equals(Longitudes.NONE)) {
                double lat = sighting.getLatDegrees();
                lat = lat + sighting.getLatMinutes()/60.0;
                lat = lat + (sighting.getLatSeconds()/60.0)/60.0;
                if (sighting.getLatitude().equals(Latitudes.SOUTH))
                    lat = -1 * lat;
                double lon = sighting.getLonDegrees();
                lon = lon + sighting.getLonMinutes()/60.0;
                lon = lon + (sighting.getLonSeconds()/60.0)/60.0;
                if (sighting.getLongitude().equals(Longitudes.WEST))
                    lon = -1 * lon;
                UtilsMapGenerator.addPoint(lat, lon, new Color(230, 90, 50), sighting, app, false);
            }
        }
        setVisible(false);
        dispose();
        // Open Map
        if (sighting != null) {
            if (app.getWildLogOptions().isIsOnlinemapTheDefault()) {
                app.getMapOnline().setTitle("WildLog Map - Online: " + sighting.getDisplayName()+ " (Observations)");
                app.getMapOnline().setLocationRelativeTo(this);
                app.getMapOnline().showMap(Color.yellow);
            }
            else {
                app.getMapOffline().changeTitle("WildLog Map - Offline: " + sighting.getDisplayName() + " (Observations)");
                app.getMapOffline().showMap(app);
            }
        }
    }//GEN-LAST:event_btnViewSelectedSightingActionPerformed

    private void btnViewListOfSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewListOfSightingsActionPerformed
        // Clear old points
        UtilsMapGenerator.clearMap(app, false);
        // Load points
        for (Sighting sighting : lstSightings) {
            if (sighting.getLatitude() != null && sighting.getLongitude() != null) {
                if (!sighting.getLatitude().equals(Latitudes.NONE) && !sighting.getLongitude().equals(Longitudes.NONE)) {
                    double lat = sighting.getLatDegrees();
                    lat = lat + sighting.getLatMinutes()/60.0;
                    lat = lat + (sighting.getLatSeconds()/60.0)/60.0;
                    if (sighting.getLatitude().equals(Latitudes.SOUTH))
                        lat = -1 * lat;
                    double lon = sighting.getLonDegrees();
                    lon = lon + sighting.getLonMinutes()/60.0;
                    lon = lon + (sighting.getLonSeconds()/60.0)/60.0;
                    if (sighting.getLongitude().equals(Longitudes.WEST))
                        lon = -1 * lon;
                    UtilsMapGenerator.addPoint(lat, lon, new Color(230, 90, 50), sighting, app, false);
                }
            }
        }
        setVisible(false);
        dispose();
        // Open Map
        if (app.getWildLogOptions().isIsOnlinemapTheDefault()) {
            app.getMapOnline().setTitle("WildLog Map - Online: Observations");
            app.getMapOnline().setLocationRelativeTo(this);
            app.getMapOnline().showMap(Color.yellow);
        }
        else {
            app.getMapOffline().changeTitle("WildLog Map - Offline: Observations");
            app.getMapOffline().showMap(app);
        }
    }//GEN-LAST:event_btnViewListOfSightingsActionPerformed

    private void btnNewMAPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewMAPSActionPerformed
// TODO: Handle the Location, Element, etc.
        MapsBaseDialog dialog = new MapsBaseDialog("WildLog Maps - " + "TODO: SOME NAME", 
                app.getDBI().list(new Sighting(), true));
        dialog.setVisible(true);
    }//GEN-LAST:event_btnNewMAPSActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewMAPS;
    private javax.swing.JButton btnOpenKmlViewer;
    private javax.swing.JButton btnViewAllSightingsForElement;
    private javax.swing.JButton btnViewAllSightingsForLocation;
    private javax.swing.JButton btnViewAllSightingsForVisit;
    private javax.swing.JButton btnViewDistributionMap;
    private javax.swing.JButton btnViewListOfSightings;
    private javax.swing.JButton btnViewLocation;
    private javax.swing.JButton btnViewSelectedSighting;
    private javax.swing.JButton btnViewSightingsAndDistributionMap;
    // End of variables declaration//GEN-END:variables
}
