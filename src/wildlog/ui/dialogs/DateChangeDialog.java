package wildlog.ui.dialogs;

import java.time.LocalDateTime;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.SpinnerFixer;
import wildlog.ui.utils.UtilsTime;


public class DateChangeDialog extends JDialog {
    private WildLogApp app;
    private final Visit visit;

    
    public DateChangeDialog(WildLogApp inApp, JFrame inParent, Visit inVisit) {
        super(inParent);
        System.out.println("[DateChangeDialog]");
        visit = inVisit;
        // Do the setup (this is where the shared setup happens)
        doSetup(inApp);
        // Setup the default behavior (this is for JFrames)
        UtilsDialog.setDialogToCenter(inParent, this);
        UtilsDialog.addModalBackgroundPanel(inParent, this);
    }

    public DateChangeDialog(WildLogApp inApp, JDialog inParent, Visit inVisit) {
        super(inParent);
        System.out.println("[DateChangeDialog]");
        visit = inVisit;
        // Do the setup (this is where the shared setup happens)
        doSetup(inApp);
        // Setup the default behavior (this is for JDialogs)
        UtilsDialog.setDialogToCenter(inParent, this);
        UtilsDialog.addModalBackgroundPanel(inParent, this);
    }

    private void doSetup(WildLogApp inApp) {
        app = inApp;
        // Need to set a few settings on the content pane before continuing (for example size, background color, etc.)
        getContentPane().setPreferredSize(getPreferredSize());
        // Initialize the auto generated code
        initComponents();
        // Setup the default behavior
        UtilsDialog.addEscapeKeyListener(this);
        // Setup the glasspane on this dialog as well for the JOptionPane's
        UtilsDialog.addModalBackgroundPanel(this, null);
        // Fix spinners
        SpinnerFixer.configureSpinners(spnDays);
        SpinnerFixer.configureSpinners(spnHours);
        SpinnerFixer.configureSpinners(spnMinutes);
        SpinnerFixer.configureSpinners(spnSeconds);
        // Set focus
        btnSave.requestFocusInWindow();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btnSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        rdbIncrease = new javax.swing.JRadioButton();
        rdbDecrease = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        spnDays = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spnHours = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spnMinutes = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        spnSeconds = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adjust Date and Time");
        setIconImage(new ImageIcon(app.getClass().getResource("resources/icons/Visit.gif")).getImage());
        setMinimumSize(new java.awt.Dimension(415, 155));
        setModal(true);
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(415, 155));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Update.png"))); // NOI18N
        btnSave.setToolTipText("Perform the date and time change on the Observations.");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setFocusPainted(false);
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 110, 60));

        jLabel1.setText("<html>Please specify by how much the Date and Time should be adjusted.</html>");
        jLabel1.setName("jLabel1"); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 270, 40));

        jSeparator1.setName("jSeparator1"); // NOI18N
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 55, 270, 5));

        jLabel6.setText("The Date and Time should");
        jLabel6.setName("jLabel6"); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 65, -1, 20));

        buttonGroup1.add(rdbIncrease);
        rdbIncrease.setText("Increase");
        rdbIncrease.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbIncrease.setFocusPainted(false);
        rdbIncrease.setName("rdbIncrease"); // NOI18N
        getContentPane().add(rdbIncrease, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 63, -1, -1));

        buttonGroup1.add(rdbDecrease);
        rdbDecrease.setText("Decrease");
        rdbDecrease.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbDecrease.setFocusPainted(false);
        rdbDecrease.setName("rdbDecrease"); // NOI18N
        getContentPane().add(rdbDecrease, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 63, -1, -1));

        jLabel2.setText("Days:");
        jLabel2.setName("jLabel2"); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 95, -1, 20));

        spnDays.setModel(new javax.swing.SpinnerNumberModel(0, 0, 365000, 1));
        spnDays.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spnDays.setEditor(new javax.swing.JSpinner.NumberEditor(spnDays, "0"));
        spnDays.setName("spnDays"); // NOI18N
        getContentPane().add(spnDays, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 95, 50, -1));

        jLabel3.setText("Hours:");
        jLabel3.setName("jLabel3"); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 95, -1, 20));

        spnHours.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        spnHours.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spnHours.setEditor(new javax.swing.JSpinner.NumberEditor(spnHours, "0"));
        spnHours.setName("spnHours"); // NOI18N
        getContentPane().add(spnHours, new org.netbeans.lib.awtextra.AbsoluteConstraints(142, 95, 40, -1));

        jLabel4.setText("Minutes:");
        jLabel4.setName("jLabel4"); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 95, -1, 20));

        spnMinutes.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        spnMinutes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spnMinutes.setEditor(new javax.swing.JSpinner.NumberEditor(spnMinutes, "0"));
        spnMinutes.setName("spnMinutes"); // NOI18N
        getContentPane().add(spnMinutes, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 95, 50, -1));

        jLabel5.setText("Seconds:");
        jLabel5.setName("jLabel5"); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(302, 95, -1, 20));

        spnSeconds.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        spnSeconds.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        spnSeconds.setEditor(new javax.swing.JSpinner.NumberEditor(spnSeconds, "0"));
        spnSeconds.setName("spnSeconds"); // NOI18N
        getContentPane().add(spnSeconds, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 95, 50, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (!rdbIncrease.isSelected() && !rdbDecrease.isSelected()) {
            getGlassPane().setVisible(true);
            JOptionPane.showConfirmDialog(this,
                    "Select either the Increase or Decrease option before continuing.",
                    "Specify Adjustment Direction", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
            getGlassPane().setVisible(false);
        }
        else {
            // Update the Sightings
            List<Sighting> listSightings = app.getDBI().list(new Sighting(null, null, visit.getName()), false);
            for (Sighting sighting : listSightings) {
                LocalDateTime currentSightingTime = UtilsTime.getLocalDateTimeFromDate(sighting.getDate());
                if (rdbIncrease.isSelected()) {
                    // Plus time
                    LocalDateTime newTime = currentSightingTime
                            .plusDays((int) spnDays.getValue())
                            .plusHours((int) spnHours.getValue())
                            .plusMinutes((int) spnMinutes.getValue())
                            .plusSeconds((int) spnSeconds.getValue());
                    sighting.setDate(UtilsTime.getDateFromLocalDateTime(newTime));
                }
                else {
                    // Minus time
                    LocalDateTime newTime = currentSightingTime
                            .minusDays((int) spnDays.getValue())
                            .minusHours((int) spnHours.getValue())
                            .minusMinutes((int) spnMinutes.getValue())
                            .minusSeconds((int) spnSeconds.getValue());
                    sighting.setDate(UtilsTime.getDateFromLocalDateTime(newTime));
                }
                // Because the sighting's date changed I need to recalculate the Sun and Moon phase
                UtilsTime.calculateSunAndMoon(sighting);
                // Save the changes
                app.getDBI().createOrUpdate(sighting, false);
            }
            // We are done, dispose this dialog
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton rdbDecrease;
    private javax.swing.JRadioButton rdbIncrease;
    private javax.swing.JSpinner spnDays;
    private javax.swing.JSpinner spnHours;
    private javax.swing.JSpinner spnMinutes;
    private javax.swing.JSpinner spnSeconds;
    // End of variables declaration//GEN-END:variables
}
