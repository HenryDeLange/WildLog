package wildlog.ui.reports;

import com.pdfjet.A4;
import com.pdfjet.Box;
import com.pdfjet.Color;
import com.pdfjet.CoreFont;
import com.pdfjet.Font;
import com.pdfjet.Image;
import com.pdfjet.ImageType;
import com.pdfjet.PDF;
import com.pdfjet.Page;
import com.pdfjet.TextLine;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.JFXPanel;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.Chart;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.StackedBarChart;
import javafx.scene.image.WritableImage;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JToggleButton;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.enums.ActiveTimeSpesific;
import wildlog.data.enums.Age;
import wildlog.data.enums.Certainty;
import wildlog.data.enums.ElementType;
import wildlog.data.enums.GPSAccuracy;
import wildlog.data.enums.LifeStatus;
import wildlog.data.enums.Moonlight;
import wildlog.data.enums.Sex;
import wildlog.data.enums.SightingEvidence;
import wildlog.data.enums.TimeAccuracy;
import wildlog.data.enums.VisitType;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.reports.helpers.FilterProperties;
import wildlog.ui.reports.implementations.helpers.AbstractReport;
import wildlog.ui.utils.UtilsTime;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.WildLogPaths;


public class ReportsBaseDialog extends JFrame {
    private final JFXPanel jfxPanel;
    private final List<Sighting> lstOriginalData;
    private List<Sighting> lstFilteredData;
    private List<Element> lstFilteredElements;
    private List<Location> lstFilteredLocations;
    private List<Visit> lstFilteredVisits;
//    private List<Sighting> lstFilteredSightings;
    private FilterProperties filterProperties = null;

    public ReportsBaseDialog(String inTitle, List<Sighting> inSightings, List<AbstractReport> inLstReports) {
        super(inTitle);
        lstOriginalData = inSightings;
        lstFilteredData = getCopiedList(lstOriginalData);
        initComponents();
        Platform.setImplicitExit(false);
        jfxPanel = new JFXPanel();
        pnlChartArea.add(jfxPanel, BorderLayout.CENTER);
        UtilsDialog.setDialogToCenter(WildLogApp.getApplication().getMainFrame(), this);
        UtilsDialog.setupGlassPaneOnMainFrame(this);
        for (final AbstractReport<Sighting> report : inLstReports) {
            report.setChartOptionsPanel(pnlChartOptions);
            JToggleButton reportButton = new JToggleButton(report.getReportButtonName(), 
                    new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Report_Small.gif")), false);
            reportButton.setFocusPainted(false);
            reportButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            reportButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            reportButton.setIconTextGap(8);
            reportButton.setMargin(new java.awt.Insets(2, 4, 2, 4));
            reportButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    report.setDataList(lstFilteredData);
                    report.setupChartOptionsPanel();
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            jfxPanel.setScene(new Scene(report.createChart()));
                        }
                    });
                }
            });
            btnGroupForReportTypes.add(reportButton);
            pnlAvailableReports.add(reportButton);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupForReportTypes = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlReportsAndFilters = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlAvailableReports = new javax.swing.JPanel();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        btnFilterProperties = new javax.swing.JButton();
        btnFilterElement = new javax.swing.JButton();
        btnFilterLocation = new javax.swing.JButton();
        btnFilterVisit = new javax.swing.JButton();
        btnFilterSightings = new javax.swing.JButton();
        btnResetFilters = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        lblTotalRecords = new javax.swing.JLabel();
        lblFilteredRecords = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pnlChartArea = new javax.swing.JPanel();
        pnlChartOptions = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("WildLog Reports");
        setIconImage(new ImageIcon(WildLogApp.getApplication().getClass().getResource("resources/icons/Report.gif")).getImage());

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Export.png"))); // NOI18N
        jButton1.setText("Export Report");
        jButton1.setToolTipText("Export the report to PDF or PNG.");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Report Types", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jScrollPane1.setBorder(null);

        pnlAvailableReports.setLayout(new org.jdesktop.swingx.VerticalLayout());

        btnGroupForReportTypes.add(jToggleButton4);
        jToggleButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Report_Small.gif"))); // NOI18N
        jToggleButton4.setText("Test Chart 4");
        jToggleButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton4.setFocusPainted(false);
        jToggleButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jToggleButton4.setIconTextGap(8);
        jToggleButton4.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        pnlAvailableReports.add(jToggleButton4);

        btnGroupForReportTypes.add(jToggleButton5);
        jToggleButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Report_Small.gif"))); // NOI18N
        jToggleButton5.setText("jToggleButton5");
        jToggleButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton5.setFocusPainted(false);
        jToggleButton5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jToggleButton5.setIconTextGap(8);
        jToggleButton5.setMargin(new java.awt.Insets(2, 4, 2, 4));
        pnlAvailableReports.add(jToggleButton5);

        btnGroupForReportTypes.add(jToggleButton3);
        jToggleButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Report_Small.gif"))); // NOI18N
        jToggleButton3.setText("Test Chart 3");
        jToggleButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton3.setFocusPainted(false);
        jToggleButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jToggleButton3.setIconTextGap(8);
        jToggleButton3.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        pnlAvailableReports.add(jToggleButton3);

        btnGroupForReportTypes.add(jToggleButton2);
        jToggleButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Report_Small.gif"))); // NOI18N
        jToggleButton2.setText("Test Chart 2");
        jToggleButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jToggleButton2.setFocusPainted(false);
        jToggleButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jToggleButton2.setIconTextGap(8);
        jToggleButton2.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        pnlAvailableReports.add(jToggleButton2);

        jScrollPane1.setViewportView(pnlAvailableReports);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Report Data Options", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        btnFilterProperties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Browse.png"))); // NOI18N
        btnFilterProperties.setText("Filter on Properties");
        btnFilterProperties.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterProperties.setFocusPainted(false);
        btnFilterProperties.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterPropertiesActionPerformed(evt);
            }
        });

        btnFilterElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Element.gif"))); // NOI18N
        btnFilterElement.setText("Filter by Creature");
        btnFilterElement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterElement.setFocusPainted(false);
        btnFilterElement.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterElementActionPerformed(evt);
            }
        });

        btnFilterLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Location.gif"))); // NOI18N
        btnFilterLocation.setText("Filter by Place");
        btnFilterLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterLocation.setFocusPainted(false);
        btnFilterLocation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterLocationActionPerformed(evt);
            }
        });

        btnFilterVisit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Visit.gif"))); // NOI18N
        btnFilterVisit.setText("Filter by Period");
        btnFilterVisit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterVisit.setFocusPainted(false);
        btnFilterVisit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterVisitActionPerformed(evt);
            }
        });

        btnFilterSightings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Sighting Small.gif"))); // NOI18N
        btnFilterSightings.setText("View Filtered Observations");
        btnFilterSightings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterSightings.setFocusPainted(false);
        btnFilterSightings.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterSightings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterSightingsActionPerformed(evt);
            }
        });

        btnResetFilters.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Refresh.png"))); // NOI18N
        btnResetFilters.setText("Reset Active Data Filters");
        btnResetFilters.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResetFilters.setFocusPainted(false);
        btnResetFilters.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Selected Records:");

        lblTotalRecords.setText(Integer.toString(lstOriginalData.size()));

        lblFilteredRecords.setText(Integer.toString(lstFilteredData.size()));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Total Records:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalRecords)
                    .addComponent(lblFilteredRecords))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblTotalRecords))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFilteredRecords)
                    .addComponent(jLabel10))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnResetFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnFilterLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnFilterVisit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnFilterElement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnFilterSightings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnFilterProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(btnFilterProperties)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFilterElement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFilterLocation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFilterVisit)
                .addGap(10, 10, 10)
                .addComponent(btnFilterSightings)
                .addGap(10, 10, 10)
                .addComponent(btnResetFilters)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout pnlReportsAndFiltersLayout = new javax.swing.GroupLayout(pnlReportsAndFilters);
        pnlReportsAndFilters.setLayout(pnlReportsAndFiltersLayout);
        pnlReportsAndFiltersLayout.setHorizontalGroup(
            pnlReportsAndFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlReportsAndFiltersLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnlReportsAndFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
        pnlReportsAndFiltersLayout.setVerticalGroup(
            pnlReportsAndFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReportsAndFiltersLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        jSplitPane1.setLeftComponent(pnlReportsAndFilters);

        pnlChartArea.setLayout(new java.awt.BorderLayout());

        pnlChartOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Report Display Options", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        pnlChartOptions.setPreferredSize(new java.awt.Dimension(144, 50));
        org.jdesktop.swingx.HorizontalLayout horizontalLayout1 = new org.jdesktop.swingx.HorizontalLayout();
        horizontalLayout1.setGap(5);
        pnlChartOptions.setLayout(horizontalLayout1);

        jButton2.setText("Change Chart Colors");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setFocusPainted(false);
        pnlChartOptions.add(jButton2);

        pnlChartArea.add(pnlChartOptions, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setRightComponent(pnlChartArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed

    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                Chart chart = createBarChart3(lstFilteredData);
                jfxPanel.setScene(new Scene(chart));
            }
        });
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Files.createDirectories(WildLogPaths.WILDLOG_EXPORT_PDF.getAbsoluteFullPath());
                    PDF pdf = new PDF(new BufferedOutputStream(new FileOutputStream(WildLogPaths.WILDLOG_EXPORT_PDF.getAbsoluteFullPath().resolve("ReportToets.pdf").toFile())));
                    Page page = new Page(pdf, A4.LANDSCAPE);
                    Font font = new Font(pdf, CoreFont.HELVETICA);
                    // The snapshot needs to be loaded from a JavaFX thread
                    WritableImage writableImage = jfxPanel.getScene().snapshot(null);
                    BufferedImage bufferedImage = SwingFXUtils.fromFXImage(writableImage, null);
                    ByteArrayOutputStream output = new ByteArrayOutputStream() {
                            @Override
                            public synchronized byte[] toByteArray() {
                                // Return the original array, not a copy (for performance benifits)
                                return this.buf;
                            }
                        };
//                    ImageIO.write(bufferedImage, "png", WildLogPaths.WILDLOG_EXPORT_PDF.getAbsoluteFullPath().resolve("ReportToets.png").toFile());
                    ImageIO.write(bufferedImage, "png", output);
                    ByteArrayInputStream inputStream = new ByteArrayInputStream(output.toByteArray(), 0, output.size());
                    Image embeddedImage = new Image(pdf, inputStream, ImageType.PNG);
                    TextLine text = new TextLine(font, "Report XXX");
                    text.setLocation(90f, 30f);
                    text.drawOn(page);
                    embeddedImage.setLocation(90f, 40f);
                    // Convert the pixels (image) to points (page).
                    // Basically 1 point is 1/72 inch and we are assuming the default dpi is still 96 (72/96 = 0.75).
                    // Then scale it to the total page size wich is in points.
                    embeddedImage.scaleBy((bufferedImage.getWidth()*0.75)/page.getWidth());
                    
                    Box box = new Box();
                    box.setSize(bufferedImage.getWidth(), bufferedImage.getHeight());
                    box.setColor(Color.black);
                    box.drawOn(page);
                    
                    embeddedImage.drawOn(page);
                    pdf.close();
                    UtilsFileProcessing.openFile(WildLogPaths.WILDLOG_EXPORT_PDF.getAbsoluteFullPath());
                }
                catch (Exception ex) {
                    ex.printStackTrace(System.err);
                }
                finally {
                    // TODO: close, flush, etc.
                }
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        Visit searchVisit = new Visit();
        searchVisit.setType(VisitType.REMOTE_CAMERA);
        List<Visit> lstVisits = WildLogApp.getApplication().getDBI().list(searchVisit);
        List<Sighting> lstSightings = new ArrayList<>(lstVisits.size() * 5);
        for (Visit visit : lstVisits) {
            lstSightings.addAll(WildLogApp.getApplication().getDBI().list(new Sighting(null, visit.getLocationName(), visit.getName())));
        }
        Set<String> setElementCount = new HashSet<>();
        for (Sighting sighting : lstSightings) {
            if (ElementType.MAMMAL.equals(WildLogApp.getApplication().getDBI().find(new Element(sighting.getElementName())).getType())) {
                if (!setElementCount.contains(sighting.getElementName())) {
                    System.out.println(sighting.getElementName());
                }
                setElementCount.add(sighting.getElementName());
            }
        }
        System.out.println("Total camera trap mammals: " + setElementCount.size());
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                Chart chart = createBarChart4(lstSightings);
                jfxPanel.setScene(new Scene(chart));
            }
        });
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void btnFilterElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterElementActionPerformed
        FilterDataListDialog<Element> dialog = new FilterDataListDialog<Element>(this, lstOriginalData, lstFilteredElements, Element.class);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            lstFilteredElements = dialog.getSelectedData();
            // Filter the original results using the provided values
            doFiltering();
        }
    }//GEN-LAST:event_btnFilterElementActionPerformed

    private void btnFilterLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterLocationActionPerformed
        FilterDataListDialog<Location> dialog = new FilterDataListDialog<Location>(this, lstOriginalData, lstFilteredLocations, Location.class);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            lstFilteredLocations = dialog.getSelectedData();
            // Filter the original results using the provided values
            doFiltering();
        }
    }//GEN-LAST:event_btnFilterLocationActionPerformed

    private void btnFilterVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterVisitActionPerformed
        FilterDataListDialog<Visit> dialog = new FilterDataListDialog<Visit>(this, lstOriginalData, lstFilteredVisits, Visit.class);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            lstFilteredVisits = dialog.getSelectedData();
            // Filter the original results using the provided values
            doFiltering();
        }
    }//GEN-LAST:event_btnFilterVisitActionPerformed

    private void btnFilterSightingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterSightingsActionPerformed
        FilterDataListDialog<Sighting> dialog = new FilterDataListDialog<Sighting>(this, lstOriginalData, lstFilteredData, Sighting.class);
        dialog.setVisible(true);
//        if (dialog.isSelectionMade()) {
//            lstFilteredSightings = dialog.getSelectedData();
//            // Filter the original results using the provided values
//            doFiltering();
//        }
    }//GEN-LAST:event_btnFilterSightingsActionPerformed

    private void btnFilterPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterPropertiesActionPerformed
        FilterPropertiesDialog<Sighting> dialog = new FilterPropertiesDialog<>(this, lstOriginalData, filterProperties);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            filterProperties = dialog.getSelectedFilterProperties();
            // Filter the original results using the provided values
            doFiltering();
        }
    }//GEN-LAST:event_btnFilterPropertiesActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        lstFilteredData = getCopiedList(lstOriginalData);
        lblFilteredRecords.setText(Integer.toString(lstFilteredData.size()));
    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private Chart createBarChart3(List<Sighting> inSightings) {
        // TODO: mak die opsie om hierdie per spesie te sien of almal saam
        NumberAxis axisY = new NumberAxis();
        axisY.setLabel("Number of Observations");
        axisY.setAutoRanging(true);
        CategoryAxis axisX = new CategoryAxis();
        ObservableList timeCategories = FXCollections.<String>observableArrayList();
        for (int h = 0; h < 24; h++) {
            for (int m = 0; m < 2; m++) {
                String hours;
                if (h < 10) {
                    hours = "0" + h;
                }
                else {
                    hours = ""+h;
                }
                String mins;
                if (m == 0) {
                    mins = "00";
                }
                else {
                    mins = ""+(m*30);
                }
                timeCategories.add(hours + ":" + mins);
            }
        }
        axisX.setCategories(timeCategories);
        axisX.setTickLabelRotation(-90);
        ObservableList<LineChart.Series> chartData = FXCollections.observableArrayList();
        ObservableList allSightings = FXCollections.observableArrayList();
        Map<String, Integer> mapCounter = new HashMap<>();
        for (Sighting sighting : inSightings) {
            Integer currentValue = mapCounter.get(getTimeAsString(sighting.getDate()));
            if (currentValue == null) {
                currentValue = 0;
            }
            currentValue = currentValue.intValue() + 1;
            mapCounter.put(getTimeAsString(sighting.getDate()), currentValue);
        }
        List<String> keys = new ArrayList<>(mapCounter.keySet());
        Collections.sort(keys);
        for (String key : keys) {
            allSightings.add(new LineChart.Data(key, mapCounter.get(key)));
        }
        chartData.add(new LineChart.Series("Observations (" + inSightings.size() + ")", allSightings));
        LineChart chart = new LineChart(axisX, axisY, chartData);
        return chart;
    }
    
    private String getTimeAsString(Date inDate) {
        // TODO: Maak die interfal verstelbaar (5min,10min,15min,30min,1uur,2ure)
        LocalDateTime currentSightingTime = UtilsTime.getLocalDateTimeFromDate(inDate);
        LocalTime time = currentSightingTime.toLocalTime();
        String hours;
        if (time.getHour() < 10) {
            hours = "0" + time.getHour();
        }
        else {
            hours = ""+time.getHour();
        }
        String mins;
        if (time.getMinute() < 30) {
            mins = "00";
        }
        else {
            mins = ""+(time.getMinute()/30)*30;
        }
        return hours + ":" + mins;
    }
    
    private Chart createBarChart4(List<Sighting> inSightings) {
        NumberAxis axisY = new NumberAxis();
        axisY.setLabel("Number of Camera Trap Observations");
        axisY.setAutoRanging(true);
        CategoryAxis axisX = new CategoryAxis();
        axisX.setCategories(FXCollections.<String>observableArrayList(ActiveTimeSpesific.getEnumListAsString()));
        axisX.setTickLabelRotation(-90);
        ObservableList<BarChart.Series> chartData = FXCollections.observableArrayList();
        Map<String, ObservableList> groupedData = new HashMap<>();
        for (Sighting sighting : inSightings) {
            ObservableList allSightings = groupedData.get(sighting.getElementName());
            if (allSightings == null) {
                allSightings = FXCollections.observableArrayList();
                groupedData.put(sighting.getElementName(), allSightings);
            }
            allSightings.add(new BarChart.Data(sighting.getTimeOfDay().toString(), 1));
        }
        for (String key : groupedData.keySet()) {
            BarChart.Series series = new BarChart.Series(key + " (" + groupedData.get(key).size() + ")", groupedData.get(key));
            chartData.add(series);
        }
        StackedBarChart chart = new StackedBarChart(axisX, axisY, chartData);
        return chart;
    }
    
    private void doFiltering() {
        // All filters need to be taken into account all the time, even if only one was changed the results must still fullfill the other filters...
        lstFilteredData = new ArrayList<>(lstOriginalData.size());
        for (Sighting sighting : lstOriginalData) {
            // Check filtered Elements
            if (lstFilteredElements != null) {
                boolean found = false;
                for (Element element : lstFilteredElements) {
                    if (sighting.getElementName().equals(element.getPrimaryName())) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    continue;
                }
            }
            // Check filtered Locations
            if (lstFilteredLocations != null) {
                boolean found = false;
                for (Location location : lstFilteredLocations) {
                    if (sighting.getLocationName().equals(location.getName())) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    continue;
                }
            }
            // Check filtered Visits
            if (lstFilteredVisits != null) {
                boolean found = false;
                for (Visit visit : lstFilteredVisits) {
                    if (sighting.getVisitName().equals(visit.getName())) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    continue;
                }
            }
            // Check filtered Sightings
            // TODO: mmm dit gaan dalk tricky wees...
            
            // Check filtered Properties
            if (filterProperties != null) {
                // Date
                if (filterProperties.getStartDate() != null) {
                    if (UtilsTime.getLocalDateFromDate(sighting.getDate()).isBefore(filterProperties.getStartDate())) {
                        continue;
                    }
                }
                if (filterProperties.getEndDate() != null) {
                    if (UtilsTime.getLocalDateFromDate(sighting.getDate()).isAfter(filterProperties.getEndDate())) {
                        continue;
                    }
                }
                // Time
                if (filterProperties.getStartTime() != null) {
                    if (UtilsTime.getLocalTimeFromDate(sighting.getDate()).isBefore(filterProperties.getStartTime())) {
                        continue;
                    }
                }
                if (filterProperties.getEndTime() != null) {
                    if (UtilsTime.getLocalTimeFromDate(sighting.getDate()).isAfter(filterProperties.getEndTime())) {
                        continue;
                    }
                }
                // Time of day
                if (filterProperties.getActiveTimes() != null) {
                    boolean found = false;
                    for (ActiveTimeSpesific activeTimeSpesific : filterProperties.getActiveTimes()) {
                        if (activeTimeSpesific.equals(sighting.getTimeOfDay())) {
                            found = true;
                            break;
                        }
                        if (activeTimeSpesific.equals(ActiveTimeSpesific.UNKNOWN)) {
                            if (sighting.getTimeOfDay() == null || ActiveTimeSpesific.NONE.equals(sighting.getTimeOfDay())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Moonlight
                if (filterProperties.getMoonlights() != null) {
                    boolean found = false;
                    for (Moonlight moonlight : filterProperties.getMoonlights()) {
                        if (moonlight.equals(sighting.getMoonlight())) {
                            found = true;
                            break;
                        }
                        if (moonlight.equals(Moonlight.UNKNOWN)) {
                            if (sighting.getMoonlight() == null || Moonlight.NONE.equals(sighting.getMoonlight())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Moonphase
                if (!(filterProperties.isMoonphaseIsLess() && filterProperties.isMoonphaseIsMore()) && sighting.getMoonPhase()  >= 0) {
                    boolean found = false;
                    if (filterProperties.getMoonphase() == sighting.getMoonPhase()) {
                        found = true;
                    }
                    else
                    if (filterProperties.isMoonphaseIsLess() && sighting.getMoonPhase() < filterProperties.getMoonphase()) {
                        found = true;
                    }
                    else
                    if (filterProperties.isMoonphaseIsMore() && sighting.getMoonPhase() > filterProperties.getMoonphase()) {
                        found = true;
                    }
                    if (!found) {
                        continue;
                    }
                }
                
                // Visit Type
                if (filterProperties.getVisitTypes() != null) {
                    boolean found = false;
                    Visit visit = WildLogApp.getApplication().getDBI().find(new Visit(sighting.getVisitName()));
                    for (VisitType visitType : filterProperties.getVisitTypes()) {
                        if (visit != null) {
                            if (visitType.equals(visit.getType())) {
                                found = true;
                                break;
                            }
                            if (visitType.equals(VisitType.UNKNOWN)) {
                                if (visit.getType() == null || VisitType.NONE.equals(visit.getType())) {
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Evidence
                if (filterProperties.getEvidences() != null) {
                    boolean found = false;
                    for (SightingEvidence sightingEvidence : filterProperties.getEvidences()) {
                        if (sightingEvidence.equals(sighting.getSightingEvidence())) {
                            found = true;
                            break;
                        }
                        if (sightingEvidence.equals(SightingEvidence.UNKNOWN)) {
                            if (sighting.getSightingEvidence() == null || SightingEvidence.NONE.equals(sighting.getSightingEvidence())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Life Status
                if (filterProperties.getLifeStatuses() != null) {
                    boolean found = false;
                    for (LifeStatus lifeStatus : filterProperties.getLifeStatuses()) {
                        if (lifeStatus.equals(sighting.getLifeStatus())) {
                            found = true;
                            break;
                        }
                        if (lifeStatus.equals(LifeStatus.UNKNOWN)) {
                            if (sighting.getLifeStatus() == null || LifeStatus.NONE.equals(sighting.getLifeStatus())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Time Accuracy
                if (filterProperties.getTimeAccuracies() != null) {
                    boolean found = false;
                    for (TimeAccuracy timeAccuracy : filterProperties.getTimeAccuracies()) {
                        if (timeAccuracy.equals(sighting.getTimeAccuracy())) {
                            found = true;
                            break;
                        }
                        if (timeAccuracy.equals(TimeAccuracy.UNKNOWN)) {
                            if (sighting.getTimeAccuracy() == null || TimeAccuracy.NONE.equals(sighting.getTimeAccuracy())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Sighting Certianty
                if (filterProperties.getCertainties() != null) {
                    boolean found = false;
                    for (Certainty certainty : filterProperties.getCertainties()) {
                        if (certainty.equals(sighting.getCertainty())) {
                            found = true;
                            break;
                        }
                        if (certainty.equals(Certainty.UNKNOWN)) {
                            if (sighting.getCertainty() == null || Certainty.NONE.equals(sighting.getCertainty())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // GPS Certainty
                if (filterProperties.getGPSAccuracies() != null) {
                    boolean found = false;
                    for (GPSAccuracy gpsAccuracy : filterProperties.getGPSAccuracies()) {
                        if (gpsAccuracy.equals(sighting.getGPSAccuracy())) {
                            found = true;
                            break;
                        }
                        if (gpsAccuracy.equals(GPSAccuracy.UNKNOWN)) {
                            if (sighting.getGPSAccuracy() == null || GPSAccuracy.NONE.equals(sighting.getGPSAccuracy())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Age
                if (filterProperties.getAges() != null) {
                    boolean found = false;
                    for (Age age : filterProperties.getAges()) {
                        if (age.equals(sighting.getAge())) {
                            found = true;
                            break;
                        }
                        if (age.equals(Age.UNKNOWN)) {
                            if (sighting.getAge() == null || Age.NONE.equals(sighting.getAge())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Sex
                if (filterProperties.getSexes() != null) {
                    boolean found = false;
                    for (Sex sex : filterProperties.getSexes()) {
                        if (sex.equals(sighting.getSex())) {
                            found = true;
                            break;
                        }
                        if (sex.equals(Sex.UNKNOWN)) {
                            if (sighting.getSex() == null || Sex.NONE.equals(sighting.getSex())) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Number of individuals
                if (!(filterProperties.isNumberOfElementsIsLess()&& filterProperties.isNumberOfElementsIsMore()) && sighting.getNumberOfElements() >= 0) {
                    boolean found = false;
                    if (filterProperties.getNumberOfElements() == sighting.getNumberOfElements()) {
                        found = true;
                    }
                    else
                    if (filterProperties.isNumberOfElementsIsLess() && sighting.getNumberOfElements() < filterProperties.getNumberOfElements()) {
                        found = true;
                    }
                    else
                    if (filterProperties.isNumberOfElementsIsMore() && sighting.getNumberOfElements() > filterProperties.getNumberOfElements()) {
                        found = true;
                    }
                    if (!found) {
                        continue;
                    }
                }
                // Tag
                if (sighting.getTag() == null || sighting.getTag().trim().isEmpty()) {
                    if (!filterProperties.isIncludeEmptyTags()) {
                        continue;
                    }
                }
                else
                if (filterProperties.getTags() != null && !filterProperties.getTags().isEmpty()) {
                    boolean found = false;
                    for (String tag : filterProperties.getTags()) {
                        if (!tag.trim().isEmpty() && sighting.getTag().trim().toLowerCase().contains(tag.trim().toLowerCase())) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        continue;
                    }
                }
            }
            // If we haven't breaked from the for loop yet (aka continued to the next record), 
            // then this record can be added to the list
            lstFilteredData.add(sighting.cloneShallow());
        }
        lblFilteredRecords.setText(Integer.toString(lstFilteredData.size()));
        // Redraw the chart
        for (Enumeration<AbstractButton> buttons = btnGroupForReportTypes.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                button.doClick();
            }
        }
    }
    
    private List<Sighting> getCopiedList(List<Sighting> inList) {
        List<Sighting> list = new ArrayList<>(inList.size());
        for (Sighting sighting : inList) {
            list.add(sighting.cloneShallow());
        }
        return list;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilterElement;
    private javax.swing.JButton btnFilterLocation;
    private javax.swing.JButton btnFilterProperties;
    private javax.swing.JButton btnFilterSightings;
    private javax.swing.JButton btnFilterVisit;
    private javax.swing.ButtonGroup btnGroupForReportTypes;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JLabel lblFilteredRecords;
    private javax.swing.JLabel lblTotalRecords;
    private javax.swing.JPanel pnlAvailableReports;
    private javax.swing.JPanel pnlChartArea;
    private javax.swing.JPanel pnlChartOptions;
    private javax.swing.JPanel pnlReportsAndFilters;
    // End of variables declaration//GEN-END:variables
}
