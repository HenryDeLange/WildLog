package wildlog.ui.panels;

import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.dataobjects.WildLogFile;
import wildlog.data.enums.ElementType;
import wildlog.data.enums.VisitType;
import wildlog.data.enums.WildLogThumbnailSizes;
import wildlog.ui.dialogs.ExportDialog;
import wildlog.ui.dialogs.FilterDataListDialog;
import wildlog.ui.dialogs.FilterPropertiesDialog;
import wildlog.ui.dialogs.MappingDialog;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.UtilsPanelGenerator;
import wildlog.ui.helpers.UtilsTableGenerator;
import wildlog.ui.panels.interfaces.PanelCanSetupHeader;
import wildlog.ui.panels.interfaces.PanelNeedsRefreshWhenDataChanges;
import wildlog.ui.reports.ReportsBaseDialog;
import wildlog.ui.reports.helpers.FilterProperties;
import wildlog.ui.utils.UtilsUI;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.UtilsImageProcessing;


public class PanelTabSightings extends JPanel implements PanelNeedsRefreshWhenDataChanges {
    private final WildLogApp app;
    private final JTabbedPane tabbedPanel;
    private List<Sighting> lstOriginalData;
    private List<Element> lstFilteredElements;
    private List<Location> lstFilteredLocations;
    private List<Visit> lstFilteredVisits;
    private FilterProperties filterProperties;

    public PanelTabSightings(WildLogApp inApp, JTabbedPane inTabbedPanel) {
        app = inApp;
        tabbedPanel = inTabbedPanel;
        setupDefaultFilters();
        // Continue loading the components
        initComponents();
        lblImage.setIcon(UtilsImageProcessing.getScaledIconForNoFiles(WildLogThumbnailSizes.NORMAL));
        // Add key listeners to table to allow the selection of rows based on key events.
        UtilsUI.attachKeyListernerToSelectKeyedRows(tblSightings);
        // Add listner to auto resize columns.
        UtilsTableGenerator.setupColumnResizingListener(tblSightings, 1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSightings = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btnGoSighting = new javax.swing.JButton();
        btnAddSighting = new javax.swing.JButton();
        btnDeleteSighting = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        pnlViews = new javax.swing.JPanel();
        btnGoLocation = new javax.swing.JButton();
        btnGoVisit = new javax.swing.JButton();
        btnGoElement = new javax.swing.JButton();
        pnlFeatures = new javax.swing.JPanel();
        btnViewMap = new javax.swing.JButton();
        btnViewExport = new javax.swing.JButton();
        btnViewReport = new javax.swing.JButton();
        pnlFilters = new javax.swing.JPanel();
        btnFilterLocation = new javax.swing.JButton();
        btnFilterVisit = new javax.swing.JButton();
        btnFilterElements = new javax.swing.JButton();
        btnFilterProperties = new javax.swing.JButton();
        btnResetFilters = new javax.swing.JButton();
        lblFilterDetails = new javax.swing.JLabel();

        setBackground(new java.awt.Color(235, 233, 221));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblSightings.setAutoCreateRowSorter(true);
        tblSightings.setMaximumSize(new java.awt.Dimension(300, 300));
        tblSightings.setMinimumSize(new java.awt.Dimension(300, 300));
        tblSightings.setSelectionBackground(new java.awt.Color(125, 120, 93));
        tblSightings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSightingsMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSightingsMouseReleased(evt);
            }
        });
        tblSightings.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblSightingsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblSightingsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblSightings);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("All Observations:");

        btnGoSighting.setBackground(new java.awt.Color(235, 233, 221));
        btnGoSighting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Go.gif"))); // NOI18N
        btnGoSighting.setToolTipText("Open a tab for the selected Observation.");
        btnGoSighting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGoSighting.setFocusPainted(false);
        btnGoSighting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoSightingActionPerformed(evt);
            }
        });

        btnAddSighting.setBackground(new java.awt.Color(235, 233, 221));
        btnAddSighting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Add.gif"))); // NOI18N
        btnAddSighting.setToolTipText("Open a popup box to add a new Observation.");
        btnAddSighting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddSighting.setFocusPainted(false);
        btnAddSighting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSightingActionPerformed(evt);
            }
        });

        btnDeleteSighting.setBackground(new java.awt.Color(235, 233, 221));
        btnDeleteSighting.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Delete.gif"))); // NOI18N
        btnDeleteSighting.setToolTipText("<html>Delete the selected Observation. <br/>This will delete all linked files as well.</html>");
        btnDeleteSighting.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteSighting.setFocusPainted(false);
        btnDeleteSighting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSightingActionPerformed(evt);
            }
        });

        lblImage.setBackground(new java.awt.Color(0, 0, 0));
        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblImage.setMaximumSize(new java.awt.Dimension(300, 300));
        lblImage.setMinimumSize(new java.awt.Dimension(300, 300));
        lblImage.setOpaque(true);
        lblImage.setPreferredSize(new java.awt.Dimension(300, 300));
        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblImageMouseReleased(evt);
            }
        });

        pnlViews.setBackground(new java.awt.Color(235, 233, 221));
        pnlViews.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "View", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 51, 51))); // NOI18N

        btnGoLocation.setBackground(new java.awt.Color(235, 233, 221));
        btnGoLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Location.gif"))); // NOI18N
        btnGoLocation.setText("View  Place");
        btnGoLocation.setToolTipText("Open a tab for the selected Period.");
        btnGoLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGoLocation.setFocusPainted(false);
        btnGoLocation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnGoLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoLocationActionPerformed(evt);
            }
        });

        btnGoVisit.setBackground(new java.awt.Color(235, 233, 221));
        btnGoVisit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Visit.gif"))); // NOI18N
        btnGoVisit.setText("View Period");
        btnGoVisit.setToolTipText("Open a tab for the selected Creature.");
        btnGoVisit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGoVisit.setFocusPainted(false);
        btnGoVisit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnGoVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoVisitActionPerformed(evt);
            }
        });

        btnGoElement.setBackground(new java.awt.Color(235, 233, 221));
        btnGoElement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Element.gif"))); // NOI18N
        btnGoElement.setText("View Creatures");
        btnGoElement.setToolTipText("Open a tab for the selected Creature.");
        btnGoElement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGoElement.setFocusPainted(false);
        btnGoElement.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnGoElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoElementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlViewsLayout = new javax.swing.GroupLayout(pnlViews);
        pnlViews.setLayout(pnlViewsLayout);
        pnlViewsLayout.setHorizontalGroup(
            pnlViewsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewsLayout.createSequentialGroup()
                .addGroup(pnlViewsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGoVisit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(btnGoElement, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(btnGoLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        pnlViewsLayout.setVerticalGroup(
            pnlViewsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewsLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(btnGoLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGoVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGoElement, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pnlFeatures.setBackground(new java.awt.Color(235, 233, 221));
        pnlFeatures.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Features", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 51, 51))); // NOI18N

        btnViewMap.setBackground(new java.awt.Color(235, 233, 221));
        btnViewMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Map_Small.gif"))); // NOI18N
        btnViewMap.setText("View Map");
        btnViewMap.setToolTipText("Show available maps for these Observations.");
        btnViewMap.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewMap.setFocusPainted(false);
        btnViewMap.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMapActionPerformed(evt);
            }
        });

        btnViewExport.setBackground(new java.awt.Color(235, 233, 221));
        btnViewExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Export.png"))); // NOI18N
        btnViewExport.setText("View Exports");
        btnViewExport.setToolTipText("Show available exports for these Observations.");
        btnViewExport.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewExport.setFocusPainted(false);
        btnViewExport.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewExportActionPerformed(evt);
            }
        });

        btnViewReport.setBackground(new java.awt.Color(235, 233, 221));
        btnViewReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Report_Small.gif"))); // NOI18N
        btnViewReport.setText("View Reports");
        btnViewReport.setToolTipText("Show available reports for these Observations.");
        btnViewReport.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewReport.setFocusPainted(false);
        btnViewReport.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFeaturesLayout = new javax.swing.GroupLayout(pnlFeatures);
        pnlFeatures.setLayout(pnlFeaturesLayout);
        pnlFeaturesLayout.setHorizontalGroup(
            pnlFeaturesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFeaturesLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pnlFeaturesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnViewExport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnViewReport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(btnViewMap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        pnlFeaturesLayout.setVerticalGroup(
            pnlFeaturesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFeaturesLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(btnViewMap, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewReport, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewExport, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pnlFilters.setBackground(new java.awt.Color(235, 233, 221));
        pnlFilters.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Observations Filters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        btnFilterLocation.setBackground(new java.awt.Color(235, 233, 221));
        btnFilterLocation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Location.gif"))); // NOI18N
        btnFilterLocation.setText("Filter by Place");
        btnFilterLocation.setToolTipText("Filter the Observations according to its Place.");
        btnFilterLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterLocation.setFocusPainted(false);
        btnFilterLocation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterLocation.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnFilterLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterLocationActionPerformed(evt);
            }
        });

        btnFilterVisit.setBackground(new java.awt.Color(235, 233, 221));
        btnFilterVisit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Visit.gif"))); // NOI18N
        btnFilterVisit.setText("Filter by Period");
        btnFilterVisit.setToolTipText("Filter the Observations according to its Period.");
        btnFilterVisit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterVisit.setFocusPainted(false);
        btnFilterVisit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterVisit.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnFilterVisit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterVisitActionPerformed(evt);
            }
        });

        btnFilterElements.setBackground(new java.awt.Color(235, 233, 221));
        btnFilterElements.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Element.gif"))); // NOI18N
        btnFilterElements.setText("Filter by Creature");
        btnFilterElements.setToolTipText("Filter the Observations according to its Creature.");
        btnFilterElements.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterElements.setFocusPainted(false);
        btnFilterElements.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterElements.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btnFilterElements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterElementsActionPerformed(evt);
            }
        });

        btnFilterProperties.setBackground(new java.awt.Color(235, 233, 221));
        btnFilterProperties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/FilterSightings.png"))); // NOI18N
        btnFilterProperties.setText("Filter Observations");
        btnFilterProperties.setToolTipText("Filter the Observations according to the value of its data fields.");
        btnFilterProperties.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFilterProperties.setFocusPainted(false);
        btnFilterProperties.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnFilterProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterPropertiesActionPerformed(evt);
            }
        });

        btnResetFilters.setBackground(new java.awt.Color(235, 233, 221));
        btnResetFilters.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Refresh.png"))); // NOI18N
        btnResetFilters.setText("Reset all filters");
        btnResetFilters.setToolTipText("Remove all the active filters.");
        btnResetFilters.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResetFilters.setFocusPainted(false);
        btnResetFilters.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        lblFilterDetails.setText("<html>Loading filters...</html>");
        lblFilterDetails.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout pnlFiltersLayout = new javax.swing.GroupLayout(pnlFilters);
        pnlFilters.setLayout(pnlFiltersLayout);
        pnlFiltersLayout.setHorizontalGroup(
            pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltersLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFiltersLayout.createSequentialGroup()
                        .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFiltersLayout.createSequentialGroup()
                                .addComponent(btnFilterProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnResetFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFiltersLayout.createSequentialGroup()
                                .addComponent(btnFilterLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnFilterVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(btnFilterElements, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(pnlFiltersLayout.createSequentialGroup()
                        .addComponent(lblFilterDetails)
                        .addContainerGap())))
        );
        pnlFiltersLayout.setVerticalGroup(
            pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFiltersLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilterLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilterVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilterElements, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(pnlFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilterProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnResetFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(lblFilterDetails)
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlViews, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteSighting, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddSighting, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGoSighting, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pnlFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(pnlFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pnlFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(13, 13, 13)
                        .addComponent(btnGoSighting, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnAddSighting, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnDeleteSighting, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(pnlViews, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblSightingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSightingsMouseClicked
        if (evt.getClickCount() == 2) {
            btnGoSightingActionPerformed(null);
        }
    }//GEN-LAST:event_tblSightingsMouseClicked

    private void tblSightingsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSightingsMouseReleased
        if (tblSightings.getSelectedRowCount() == 1) {
            Sighting sighting = app.getDBI().find(new Sighting((Long)tblSightings.getModel().getValueAt(
                            tblSightings.convertRowIndexToModel(tblSightings.getSelectedRow()), 8)));
            List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(sighting.getWildLogFileID()));
            if (fotos.size() > 0 ) {
                UtilsImageProcessing.setupFoto(sighting.getWildLogFileID(), 0, lblImage, WildLogThumbnailSizes.NORMAL, app);
            }
            else {
                lblImage.setIcon(UtilsImageProcessing.getScaledIconForNoFiles(WildLogThumbnailSizes.NORMAL));
            }
        }
        else {
            lblImage.setIcon(UtilsImageProcessing.getScaledIconForNoFiles(WildLogThumbnailSizes.NORMAL));
        }
    }//GEN-LAST:event_tblSightingsMouseReleased

    private void tblSightingsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSightingsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnGoSightingActionPerformed(null);
        }
        else
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            btnDeleteSightingActionPerformed(null);
        }
    }//GEN-LAST:event_tblSightingsKeyPressed

    private void tblSightingsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSightingsKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            tblSightingsMouseReleased(null);
        }
    }//GEN-LAST:event_tblSightingsKeyReleased

    private void btnGoSightingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoSightingActionPerformed
        if (tblSightings.getSelectedRowCount() == 1) {
            Sighting sighting = app.getDBI().find(new Sighting((long) tblSightings.getModel().getValueAt(
                    tblSightings.convertRowIndexToModel(tblSightings.getSelectedRow()), 8)));
            Element element = app.getDBI().find(new Element((String) tblSightings.getModel().getValueAt(
                    tblSightings.convertRowIndexToModel(tblSightings.getSelectedRow()), 1)));
            Location location = app.getDBI().find(new Location((String) tblSightings.getModel().getValueAt(
                    tblSightings.convertRowIndexToModel(tblSightings.getSelectedRow()), 2)));
            Visit visit = app.getDBI().find(new Visit((String) tblSightings.getModel().getValueAt(
                    tblSightings.convertRowIndexToModel(tblSightings.getSelectedRow()), 3)));
            PanelSighting dialog = new PanelSighting(
                    app, app.getMainFrame(), "Edit an Existing Observation",
                    sighting, location, visit, element, this, false, false, false);
            dialog.setVisible(true);
            doTheRefresh(this);
        }
        else {
            UtilsDialog.showDialogBackgroundWrapper(app.getMainFrame(), new UtilsDialog.DialogWrapper() {
                    @Override
                    public int showDialog() {
                        JOptionPane.showMessageDialog(app.getMainFrame(),
                                "Only one Observation can be viewed at a time. Please select one row in the table and try again.",
                                "Select One Observation", JOptionPane.WARNING_MESSAGE);
                        return 0;
                    }
           });
        }
    }//GEN-LAST:event_btnGoSightingActionPerformed

    private void btnGoElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoElementActionPerformed
        if (tblSightings.getSelectedRowCount() >= 1) {
            app.getMainFrame().getGlassPane().setVisible(true);
            app.getMainFrame().getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            for (int t = 0; t < tblSightings.getSelectedRows().length; t++) {
                UtilsPanelGenerator.openPanelAsTab(app, (String)(tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(tblSightings.getSelectedRows()[t]), 1)),
                    PanelCanSetupHeader.TabTypes.ELEMENT, tabbedPanel, null);
            }
            app.getMainFrame().getGlassPane().setCursor(Cursor.getDefaultCursor());
            app.getMainFrame().getGlassPane().setVisible(false);
        }
    }//GEN-LAST:event_btnGoElementActionPerformed

    private void btnAddSightingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSightingActionPerformed
        tblSightings.clearSelection();
        PanelSighting dialog = new PanelSighting(
                app, app.getMainFrame(), "Add a New Observation",
                new Sighting(), null, null, null, this, true, false, false);
        dialog.setVisible(true);
        doTheRefresh(this);
    }//GEN-LAST:event_btnAddSightingActionPerformed

    private void btnDeleteSightingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSightingActionPerformed
        if (tblSightings.getSelectedRowCount() > 0) {
           int result = UtilsDialog.showDialogBackgroundWrapper(app.getMainFrame(), new UtilsDialog.DialogWrapper() {
                    @Override
                    public int showDialog() {
                        return JOptionPane.showConfirmDialog(app.getMainFrame(),
                                "Are you sure you want to delete the selected Observation(s)? This will delete all files linked to the Observation(s) as well.",
                                "Delete Observations(s)", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                    }
           });
            if (result == JOptionPane.YES_OPTION) {
                for (int row : tblSightings.getSelectedRows())  {
                    Sighting sighting = app.getDBI().find(new Sighting((Long)tblSightings.getModel().getValueAt(
                            tblSightings.convertRowIndexToModel(row), 8)));
                    app.getDBI().delete(sighting);
                }
                doTheRefresh(this);
            }
        }
    }//GEN-LAST:event_btnDeleteSightingActionPerformed

    private void btnGoLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoLocationActionPerformed
        if (tblSightings.getSelectedRowCount() >= 1) {
            app.getMainFrame().getGlassPane().setVisible(true);
            app.getMainFrame().getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            for (int t = 0; t < tblSightings.getSelectedRows().length; t++) {
                UtilsPanelGenerator.openPanelAsTab(app, (String)(tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(tblSightings.getSelectedRows()[t]), 2)),
                    PanelCanSetupHeader.TabTypes.LOCATION, tabbedPanel, null);
            }
            app.getMainFrame().getGlassPane().setCursor(Cursor.getDefaultCursor());
            app.getMainFrame().getGlassPane().setVisible(false);
        }
    }//GEN-LAST:event_btnGoLocationActionPerformed

    private void lblImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseReleased
        if (tblSightings.getSelectedRowCount() == 1) {
            Sighting tempSighting = app.getDBI().find(new Sighting((long)tblSightings.getModel().getValueAt(
                    tblSightings.convertRowIndexToModel(tblSightings.getSelectedRow()), 8)));
            UtilsFileProcessing.openFile(tempSighting.getWildLogFileID(), 0, app);
        }
    }//GEN-LAST:event_lblImageMouseReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
// FIXME: Daar is 'n probleem as nuwe visits, sightings ens ge-add was want dan is hulle nie in die lyste nie...        
    // Setup full lists for the first time if they were null
        if (lstFilteredLocations == null) {
            lstFilteredLocations = app.getDBI().list(new Location());
        }
        if (lstFilteredVisits == null) {
            lstFilteredVisits = app.getDBI().list(new Visit());
        }
        if (lstFilteredElements == null) {
            lstFilteredElements = app.getDBI().list(new Element());
        }
        // Load the table
        UtilsTableGenerator.setupSightingTableForMainTab(app, tblSightings, lblFilterDetails, 
                filterProperties, lstFilteredLocations, lstFilteredVisits, lstFilteredElements);
    }//GEN-LAST:event_formComponentShown

    @Override
    public void doTheRefresh(Object inIndicator) {
        formComponentShown(null);
    }
    
    private void btnGoVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoVisitActionPerformed
        if (tblSightings.getSelectedRowCount() >= 1) {
            app.getMainFrame().getGlassPane().setVisible(true);
            app.getMainFrame().getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            for (int t = 0; t < tblSightings.getSelectedRows().length; t++) {
                UtilsPanelGenerator.openPanelAsTab(app, (String)(tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(tblSightings.getSelectedRows()[t]), 3)),
                    PanelCanSetupHeader.TabTypes.VISIT, tabbedPanel, 
                    new Location((String)(tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(tblSightings.getSelectedRows()[t]), 2))));
            }
            app.getMainFrame().getGlassPane().setCursor(Cursor.getDefaultCursor());
            app.getMainFrame().getGlassPane().setVisible(false);
        }
    }//GEN-LAST:event_btnGoVisitActionPerformed

    private void btnFilterPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterPropertiesActionPerformed
        FilterPropertiesDialog<Sighting> dialog = new FilterPropertiesDialog<>(app.getMainFrame(), lstOriginalData, filterProperties);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            filterProperties = dialog.getSelectedFilterProperties();
            // Filter the original results using the provided values
            UtilsTableGenerator.setupSightingTableForMainTab(app, tblSightings, lblFilterDetails, 
                    filterProperties, lstFilteredLocations, lstFilteredVisits, lstFilteredElements);
        }
    }//GEN-LAST:event_btnFilterPropertiesActionPerformed

    private void btnFilterElementsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterElementsActionPerformed
        FilterDataListDialog<Element> dialog = new FilterDataListDialog<Element>(app.getMainFrame(), 
                app.getDBI().list(new Element()), lstFilteredElements);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            lstFilteredElements = dialog.getSelectedData();
            // Filter the original results using the provided values
            UtilsTableGenerator.setupSightingTableForMainTab(app, tblSightings, lblFilterDetails, 
                    filterProperties, lstFilteredLocations, lstFilteredVisits, lstFilteredElements);
        }
    }//GEN-LAST:event_btnFilterElementsActionPerformed

    private void btnFilterLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterLocationActionPerformed
        FilterDataListDialog<Location> dialog = new FilterDataListDialog<Location>(app.getMainFrame(), 
                app.getDBI().list(new Location()), lstFilteredLocations);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            lstFilteredLocations = dialog.getSelectedData();
            // Filter the original results using the provided values
            UtilsTableGenerator.setupSightingTableForMainTab(app, tblSightings, lblFilterDetails, 
                    filterProperties, lstFilteredLocations, lstFilteredVisits, lstFilteredElements);
        }
    }//GEN-LAST:event_btnFilterLocationActionPerformed

    private void btnFilterVisitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterVisitActionPerformed
        List<Visit> lstVisitsWithSelectedLocations = new ArrayList<>(lstFilteredLocations.size() * 5);
        for (Location location : lstFilteredLocations) {
            lstVisitsWithSelectedLocations.addAll(app.getDBI().list(new Visit(null, location.getName())));
        }
        FilterDataListDialog<Visit> dialog = new FilterDataListDialog<Visit>(app.getMainFrame(), 
                lstVisitsWithSelectedLocations, lstFilteredVisits);
        dialog.setVisible(true);
        if (dialog.isSelectionMade()) {
            lstFilteredVisits = dialog.getSelectedData();
            // Filter the original results using the provided values
            UtilsTableGenerator.setupSightingTableForMainTab(app, tblSightings, lblFilterDetails, 
                    filterProperties, lstFilteredLocations, lstFilteredVisits, lstFilteredElements);
        }
    }//GEN-LAST:event_btnFilterVisitActionPerformed

    private void btnViewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMapActionPerformed
        List<Sighting> lstSightingsToUse = getListOfSightingsFromTable();
        if (!lstSightingsToUse.isEmpty()) {
            MappingDialog dialog = new MappingDialog(app, null, null, null, null, lstSightingsToUse);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_btnViewMapActionPerformed

    private void btnViewReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewReportActionPerformed
        List<Sighting> lstSightingsToUse = getListOfSightingsFromTable();
        if (!lstSightingsToUse.isEmpty()) {
            ReportsBaseDialog dialog = new ReportsBaseDialog("WildLog Reports - Observations", lstSightingsToUse);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_btnViewReportActionPerformed

    private void btnViewExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewExportActionPerformed
        List<Sighting> lstSightingsToUse = getListOfSightingsFromTable();
        if (!lstSightingsToUse.isEmpty()) {
            ExportDialog dialog = new ExportDialog(app, null, null, null, null, lstSightingsToUse);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_btnViewExportActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        setupDefaultFilters();
        UtilsTableGenerator.setupSightingTableForMainTab(app, tblSightings, lblFilterDetails, 
                filterProperties, lstFilteredLocations, lstFilteredVisits, lstFilteredElements);
    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private List<Sighting> getListOfSightingsFromTable() {
        List<Sighting> lstSightingsToMap;
        if (tblSightings.getSelectedRowCount() == 0) {
            // Use all Sightings
            lstSightingsToMap = new ArrayList<>(tblSightings.getRowCount());
            for (int row = 0; row < tblSightings.getModel().getRowCount(); row++) {
                Sighting sighting = app.getDBI().find(new Sighting((long) tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(row), 8)));
                sighting.setCachedVisitType((VisitType) tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(row), 4));
                sighting.setCachedElementType((ElementType) tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(row), 5));
                lstSightingsToMap.add(sighting);
            }
        }
        else {
            // Use selected Sightings
            lstSightingsToMap = new ArrayList<>(tblSightings.getSelectedRowCount());
            for (int row : tblSightings.getSelectedRows()) {
                Sighting sighting = app.getDBI().find(new Sighting((long) tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(row), 8)));
                sighting.setCachedVisitType((VisitType) tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(row), 4));
                sighting.setCachedElementType((ElementType) tblSightings.getModel().getValueAt(
                        tblSightings.convertRowIndexToModel(row), 5));
                lstSightingsToMap.add(sighting);
            }
        }
        return lstSightingsToMap;
    }
    
    private void setupDefaultFilters() {
        // Setup new FilterProperties
        filterProperties = new FilterProperties();
        filterProperties.setStartDate(LocalDate.now().minusMonths(3));
        filterProperties.setEndDate(LocalDate.now());
        filterProperties.setStartTime(LocalTime.MIN);
        filterProperties.setEndTime(LocalTime.MAX);
        filterProperties.setActiveTimes(new ArrayList<>(0));
        filterProperties.setMoonlights(new ArrayList<>(0));
        filterProperties.setMoonphase(0);
        filterProperties.setMoonphaseIsLess(true);
        filterProperties.setMoonphaseIsMore(true);
        filterProperties.setVisitTypes(new ArrayList<>(0));
        filterProperties.setEvidences(new ArrayList<>(0));
        filterProperties.setLifeStatuses(new ArrayList<>(0));
        filterProperties.setTimeAccuracies(new ArrayList<>(0));
        filterProperties.setCertainties(new ArrayList<>(0));
        filterProperties.setGPSAccuracies(new ArrayList<>(0));
        filterProperties.setAges(new ArrayList<>(0));
        filterProperties.setSexes(new ArrayList<>(0));
        filterProperties.setNumberOfElements(0);
        filterProperties.setNumberOfElementsIsLess(true);
        filterProperties.setNumberOfElementsIsMore(true);
        filterProperties.setTags(new ArrayList<>(0));
        filterProperties.setIncludeEmptyTags(true);
        filterProperties.setElementTypes(new ArrayList<>(0));
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSighting;
    private javax.swing.JButton btnDeleteSighting;
    private javax.swing.JButton btnFilterElements;
    private javax.swing.JButton btnFilterLocation;
    private javax.swing.JButton btnFilterProperties;
    private javax.swing.JButton btnFilterVisit;
    private javax.swing.JButton btnGoElement;
    private javax.swing.JButton btnGoLocation;
    private javax.swing.JButton btnGoSighting;
    private javax.swing.JButton btnGoVisit;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JButton btnViewExport;
    private javax.swing.JButton btnViewMap;
    private javax.swing.JButton btnViewReport;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFilterDetails;
    private javax.swing.JLabel lblImage;
    private javax.swing.JPanel pnlFeatures;
    private javax.swing.JPanel pnlFilters;
    private javax.swing.JPanel pnlViews;
    private javax.swing.JTable tblSightings;
    // End of variables declaration//GEN-END:variables
}
