package wildlog.ui.panels;

import java.awt.Cursor;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import mediautil.gen.Log;
import mediautil.image.jpeg.LLJTran;
import mediautil.image.jpeg.LLJTranException;
import wildlog.WildLogApp;
import wildlog.data.dataobjects.Element;
import wildlog.data.dataobjects.Location;
import wildlog.data.dataobjects.Sighting;
import wildlog.data.dataobjects.Visit;
import wildlog.data.dataobjects.WildLogFile;
import wildlog.data.dataobjects.interfaces.DataObjectWithHTML;
import wildlog.data.dataobjects.interfaces.DataObjectWithWildLogFile;
import wildlog.data.dataobjects.wrappers.SightingWrapper;
import wildlog.data.enums.ElementType;
import wildlog.data.enums.WildLogFileType;
import wildlog.data.enums.utils.WildLogThumbnailSizes;
import wildlog.html.utils.UtilsHTMLExportTypes;
import wildlog.ui.dialogs.ExportDialog;
import wildlog.ui.dialogs.MappingDialog;
import wildlog.ui.dialogs.ReportingDialog;
import wildlog.ui.dialogs.utils.UtilsDialog;
import wildlog.ui.helpers.UtilsPanelGenerator;
import wildlog.ui.helpers.cellrenderers.WildLogTreeCellRenderer;
import wildlog.ui.panels.interfaces.PanelCanSetupHeader;
import wildlog.ui.panels.interfaces.PanelNeedsRefreshWhenDataChanges;
import wildlog.ui.utils.UtilsUI;
import wildlog.utils.UtilsFileProcessing;
import wildlog.utils.UtilsImageProcessing;
import wildlog.utils.WildLogFileExtentions;
import wildlog.utils.WildLogPaths;


public class PanelTabBrowse extends JPanel implements PanelNeedsRefreshWhenDataChanges {
    private final Object imageCacheLock = new Object();
    private final int CACHE_LIMIT_FOR_SELECTED_NODE = 5;
    private final int CACHE_LIMIT_FOR_NEIGHBOURING_NODES = 3;
    private Map<String, Image> oldPreloadedImages = null;
    private ExecutorService executorService;
    private Enumeration<TreePath> previousExpandedTreeNodes;
    private TreePath previousSelectedTreeNode;
    private WildLogApp app;
    private JTabbedPane tabbedPanel;
    private Element searchElementBrowseTab;
    private int imageIndex = 0;

    public PanelTabBrowse(WildLogApp inApp, JTabbedPane inTabbedPanel) {
        app = inApp;
        tabbedPanel = inTabbedPanel;
        initComponents();
        // Setup image cache for the browse tab
        oldPreloadedImages = new HashMap<>(CACHE_LIMIT_FOR_SELECTED_NODE + CACHE_LIMIT_FOR_NEIGHBOURING_NODES);
        // Set some configuration for the tree browser
        treBrowsePhoto.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        treBrowsePhoto.setCellRenderer(new WildLogTreeCellRenderer(app));
        // Attach clipboard
        UtilsUI.attachClipboardPopup(txtBrowseInfo, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        rdbBrowseLocation = new javax.swing.JRadioButton();
        btnRefreshBrowseTree = new javax.swing.JButton();
        rdbBrowseElement = new javax.swing.JRadioButton();
        cmbElementTypesBrowseTab = new javax.swing.JComboBox();
        dtpStartDate = new org.jdesktop.swingx.JXDatePicker();
        rdbBrowseDate = new javax.swing.JRadioButton();
        btnRotate = new javax.swing.JButton();
        lblNumberOfImages = new javax.swing.JLabel();
        btnViewImage = new javax.swing.JButton();
        btnRefreshDates = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtBrowseInfo = new javax.swing.JTextPane();
        btnZoomOut = new javax.swing.JButton();
        btnDefault = new javax.swing.JButton();
        btnBrowseNext = new javax.swing.JButton();
        btnBrowsePrev = new javax.swing.JButton();
        btnZoomIn = new javax.swing.JButton();
        imgBrowsePhotos = new org.jdesktop.swingx.JXImageView();
        dtpEndDate = new org.jdesktop.swingx.JXDatePicker();
        btnGoBrowseSelection = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        treBrowsePhoto = new javax.swing.JTree();
        btnSetDefaultElementImage = new javax.swing.JButton();
        btnSetDefaultLocationImage = new javax.swing.JButton();
        btnSetDefaultVisitImage = new javax.swing.JButton();
        btnViewEXIF = new javax.swing.JButton();

        setBackground(new java.awt.Color(235, 233, 221));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        rdbBrowseLocation.setBackground(new java.awt.Color(235, 233, 221));
        buttonGroup1.add(rdbBrowseLocation);
        rdbBrowseLocation.setText("By Places");
        rdbBrowseLocation.setToolTipText("Sort the tree based on Places.");
        rdbBrowseLocation.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbBrowseLocation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdbBrowseLocationItemStateChanged(evt);
            }
        });

        btnRefreshBrowseTree.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Refresh.png"))); // NOI18N
        btnRefreshBrowseTree.setText("Reload Tree");
        btnRefreshBrowseTree.setToolTipText("This will collapse all tree nodes and reload the data.");
        btnRefreshBrowseTree.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnRefreshBrowseTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshBrowseTreeActionPerformed(evt);
            }
        });

        rdbBrowseElement.setBackground(new java.awt.Color(235, 233, 221));
        buttonGroup1.add(rdbBrowseElement);
        rdbBrowseElement.setText("By Creatures");
        rdbBrowseElement.setToolTipText("Sort the tree based on Creatures.");
        rdbBrowseElement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbBrowseElement.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdbBrowseElementItemStateChanged(evt);
            }
        });

        cmbElementTypesBrowseTab.setMaximumRowCount(9);
        cmbElementTypesBrowseTab.setModel(new DefaultComboBoxModel(wildlog.data.enums.ElementType.values()));
        cmbElementTypesBrowseTab.setSelectedItem(ElementType.NONE);
        cmbElementTypesBrowseTab.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbElementTypesBrowseTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbElementTypesBrowseTabActionPerformed(evt);
            }
        });

        dtpStartDate.setFormats(new SimpleDateFormat("dd MMM yyyy"));

        rdbBrowseDate.setBackground(new java.awt.Color(235, 233, 221));
        buttonGroup1.add(rdbBrowseDate);
        rdbBrowseDate.setText("By Date");
        rdbBrowseDate.setToolTipText("Sort the tree based on the Observations Dates.");
        rdbBrowseDate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rdbBrowseDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdbBrowseDateItemStateChanged(evt);
            }
        });

        btnRotate.setBackground(new java.awt.Color(235, 233, 221));
        btnRotate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Refresh.png"))); // NOI18N
        btnRotate.setText("Rotate Image");
        btnRotate.setToolTipText("Rotate the image counter clockwise.");
        btnRotate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRotate.setFocusPainted(false);
        btnRotate.setFocusable(false);
        btnRotate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnRotate.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotateActionPerformed(evt);
            }
        });

        lblNumberOfImages.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblNumberOfImages.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btnViewImage.setBackground(new java.awt.Color(235, 233, 221));
        btnViewImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/WildLog Icon Small.gif"))); // NOI18N
        btnViewImage.setText("Open Original File");
        btnViewImage.setToolTipText("Ask the opperating system to open the original file (outside of WildLog).");
        btnViewImage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewImage.setFocusPainted(false);
        btnViewImage.setFocusable(false);
        btnViewImage.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnViewImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewImageActionPerformed(evt);
            }
        });

        btnRefreshDates.setBackground(new java.awt.Color(235, 233, 221));
        btnRefreshDates.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Refresh.png"))); // NOI18N
        btnRefreshDates.setToolTipText("Refresh the tree based on the provided values.");
        btnRefreshDates.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefreshDates.setFocusPainted(false);
        btnRefreshDates.setIconTextGap(0);
        btnRefreshDates.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnRefreshDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDatesActionPerformed(evt);
            }
        });

        jScrollPane5.setMaximumSize(new java.awt.Dimension(320, 32767));
        jScrollPane5.setPreferredSize(new java.awt.Dimension(230, 600));

        txtBrowseInfo.setEditable(false);
        txtBrowseInfo.setContentType("text/html"); // NOI18N
        txtBrowseInfo.setText("");
        txtBrowseInfo.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtBrowseInfo.setMaximumSize(new java.awt.Dimension(250, 2147483647));
        jScrollPane5.setViewportView(txtBrowseInfo);

        btnZoomOut.setBackground(new java.awt.Color(235, 233, 221));
        btnZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Delete_Small.gif"))); // NOI18N
        btnZoomOut.setText("Zoom Out");
        btnZoomOut.setToolTipText("Zoom the image out.");
        btnZoomOut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnZoomOut.setFocusPainted(false);
        btnZoomOut.setFocusable(false);
        btnZoomOut.setIconTextGap(2);
        btnZoomOut.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });

        btnDefault.setBackground(new java.awt.Color(235, 233, 221));
        btnDefault.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/DefaultImage.gif"))); // NOI18N
        btnDefault.setText("Make Default");
        btnDefault.setToolTipText("Set the current file as the default (first) file.");
        btnDefault.setFocusPainted(false);
        btnDefault.setFocusable(false);
        btnDefault.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultActionPerformed(evt);
            }
        });

        btnBrowseNext.setBackground(new java.awt.Color(235, 233, 221));
        btnBrowseNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Next.gif"))); // NOI18N
        btnBrowseNext.setToolTipText("Load the next file.");
        btnBrowseNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBrowseNext.setFocusPainted(false);
        btnBrowseNext.setFocusable(false);
        btnBrowseNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseNextActionPerformed(evt);
            }
        });

        btnBrowsePrev.setBackground(new java.awt.Color(235, 233, 221));
        btnBrowsePrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Previous.gif"))); // NOI18N
        btnBrowsePrev.setToolTipText("Load the previous file.");
        btnBrowsePrev.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBrowsePrev.setFocusPainted(false);
        btnBrowsePrev.setFocusable(false);
        btnBrowsePrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowsePrevActionPerformed(evt);
            }
        });

        btnZoomIn.setBackground(new java.awt.Color(235, 233, 221));
        btnZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Add_Small.gif"))); // NOI18N
        btnZoomIn.setText("Zoom In");
        btnZoomIn.setToolTipText("Zoom the image in.");
        btnZoomIn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnZoomIn.setFocusPainted(false);
        btnZoomIn.setFocusable(false);
        btnZoomIn.setIconTextGap(2);
        btnZoomIn.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });

        imgBrowsePhotos.setBackground(new java.awt.Color(0, 0, 0));
        imgBrowsePhotos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout imgBrowsePhotosLayout = new javax.swing.GroupLayout(imgBrowsePhotos);
        imgBrowsePhotos.setLayout(imgBrowsePhotosLayout);
        imgBrowsePhotosLayout.setHorizontalGroup(
            imgBrowsePhotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imgBrowsePhotosLayout.setVerticalGroup(
            imgBrowsePhotosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 522, Short.MAX_VALUE)
        );

        dtpEndDate.setFormats(new SimpleDateFormat("dd MMM yyyy"));

        btnGoBrowseSelection.setBackground(new java.awt.Color(235, 233, 221));
        btnGoBrowseSelection.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Go.gif"))); // NOI18N
        btnGoBrowseSelection.setToolTipText("Open the selected tree entry.");
        btnGoBrowseSelection.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGoBrowseSelection.setFocusPainted(false);
        btnGoBrowseSelection.setFocusable(false);
        btnGoBrowseSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBrowseSelectionActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treBrowsePhoto.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treBrowsePhoto.setToolTipText("");
        treBrowsePhoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treBrowsePhotoMouseReleased(evt);
            }
        });
        treBrowsePhoto.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
                treBrowsePhotoTreeCollapsed(evt);
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                treBrowsePhotoTreeExpanded(evt);
            }
        });
        treBrowsePhoto.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treBrowsePhotoValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(treBrowsePhoto);

        btnSetDefaultElementImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Element.gif"))); // NOI18N
        btnSetDefaultElementImage.setText("Set Default");
        btnSetDefaultElementImage.setToolTipText("Set this file as the default for the relevant Creature.");
        btnSetDefaultElementImage.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSetDefaultElementImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDefaultElementImageActionPerformed(evt);
            }
        });

        btnSetDefaultLocationImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Location.gif"))); // NOI18N
        btnSetDefaultLocationImage.setText("Set Default");
        btnSetDefaultLocationImage.setToolTipText("Set this file as the default for the relevant Place.");
        btnSetDefaultLocationImage.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSetDefaultLocationImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDefaultLocationImageActionPerformed(evt);
            }
        });

        btnSetDefaultVisitImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/Visit.gif"))); // NOI18N
        btnSetDefaultVisitImage.setText("Set Default");
        btnSetDefaultVisitImage.setToolTipText("Set this file as the default for the relevant Period.");
        btnSetDefaultVisitImage.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnSetDefaultVisitImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetDefaultVisitImageActionPerformed(evt);
            }
        });

        btnViewEXIF.setBackground(new java.awt.Color(235, 233, 221));
        btnViewEXIF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/wildlog/resources/icons/EXIF.png"))); // NOI18N
        btnViewEXIF.setText("View EXIF");
        btnViewEXIF.setToolTipText("View the EXIF meta data for the image.");
        btnViewEXIF.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewEXIF.setFocusPainted(false);
        btnViewEXIF.setFocusable(false);
        btnViewEXIF.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnViewEXIF.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnViewEXIF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEXIFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rdbBrowseLocation)
                        .addGap(5, 5, 5)
                        .addComponent(rdbBrowseElement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdbBrowseDate))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(dtpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnRefreshDates, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(dtpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbElementTypesBrowseTab, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRefreshBrowseTree, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGoBrowseSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBrowsePrev)
                        .addGap(5, 5, 5)
                        .addComponent(lblNumberOfImages, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(btnBrowseNext)
                        .addGap(15, 15, 15)
                        .addComponent(btnZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnZoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(btnRotate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnViewEXIF))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDefault)
                        .addGap(25, 25, 25)
                        .addComponent(btnSetDefaultElementImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetDefaultLocationImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetDefaultVisitImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnViewImage))
                    .addComponent(imgBrowsePhotos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDefault)
                            .addComponent(btnSetDefaultElementImage)
                            .addComponent(btnSetDefaultLocationImage)
                            .addComponent(btnSetDefaultVisitImage)
                            .addComponent(btnViewImage))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnBrowsePrev, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                                .addComponent(btnBrowseNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNumberOfImages, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnZoomOut, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnZoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnViewEXIF, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRotate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(3, 3, 3)
                        .addComponent(imgBrowsePhotos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rdbBrowseLocation)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rdbBrowseElement)
                                        .addComponent(rdbBrowseDate)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRefreshDates, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dtpEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(5, 5, 5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbElementTypesBrowseTab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dtpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRefreshBrowseTree, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGoBrowseSelection, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rdbBrowseLocationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbBrowseLocationItemStateChanged
        if (rdbBrowseLocation.isSelected()) {
            dtpStartDate.setVisible(false);
            dtpEndDate.setVisible(false);
            btnRefreshDates.setVisible(false);
            cmbElementTypesBrowseTab.setVisible(false);
            txtBrowseInfo.setText("<body bgcolor='#FFFFFF'></body>");
            try {
                imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/NoFile.png"));
                lblNumberOfImages.setText("");
            }
            catch (IOException ex) {
                ex.printStackTrace(System.err);
            }
            browseByLocation();
        }
    }//GEN-LAST:event_rdbBrowseLocationItemStateChanged

    private void btnRefreshBrowseTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshBrowseTreeActionPerformed
        rdbBrowseLocationItemStateChanged(null);
        rdbBrowseElementItemStateChanged(null);
        rdbBrowseDateItemStateChanged(null);
    }//GEN-LAST:event_btnRefreshBrowseTreeActionPerformed

    private void rdbBrowseElementItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbBrowseElementItemStateChanged
        if (rdbBrowseElement.isSelected()) {
            dtpStartDate.setVisible(false);
            dtpEndDate.setVisible(false);
            btnRefreshDates.setVisible(true);
            cmbElementTypesBrowseTab.setVisible(true);
            txtBrowseInfo.setText("<body bgcolor='#FFFFFF'></body>");
            try {
                imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/NoFile.png"));
                lblNumberOfImages.setText("");
            }
            catch (IOException ex) {
                ex.printStackTrace(System.err);
            }
            browseByElement();
        }
    }//GEN-LAST:event_rdbBrowseElementItemStateChanged

    private void cmbElementTypesBrowseTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbElementTypesBrowseTabActionPerformed
        searchElementBrowseTab.setType((ElementType)cmbElementTypesBrowseTab.getSelectedItem());
        browseByElement();
    }//GEN-LAST:event_cmbElementTypesBrowseTabActionPerformed

    private void rdbBrowseDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbBrowseDateItemStateChanged
        if (rdbBrowseDate.isSelected()) {
            dtpStartDate.setVisible(true);
            dtpEndDate.setVisible(true);
            btnRefreshDates.setVisible(true);
            cmbElementTypesBrowseTab.setVisible(false);
            txtBrowseInfo.setText("<body bgcolor='#FFFFFF'></body>");
            try {
                imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/NoFile.png"));
                lblNumberOfImages.setText("");
            }
            catch (IOException ex) {
                ex.printStackTrace(System.err);
            }
            browseByDate();
        }
    }//GEN-LAST:event_rdbBrowseDateItemStateChanged

    private void btnRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotateActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof DataObjectWithWildLogFile) {
                DataObjectWithWildLogFile tempNode = (DataObjectWithWildLogFile)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> listWildLogFile = app.getDBI().list(new WildLogFile(tempNode.getWildLogFileID()));
                if (listWildLogFile != null && !listWildLogFile.isEmpty() && listWildLogFile.size() > imageIndex) {
                    WildLogFile wildLogFile = listWildLogFile.get(imageIndex);
                    if (WildLogFileType.IMAGE.equals(wildLogFile.getFileType()) && WildLogFileExtentions.Images.isJPG(wildLogFile.getAbsolutePath())) {
                        try {
                            app.getMainFrame().getGlassPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                            app.getMainFrame().getGlassPane().setVisible(true);
                            // Raise the Debug Level which is normally LEVEL_INFO. Only Warning messages will be printed by MediaUtil.
                            Log.debugLevel = Log.LEVEL_WARNING;
                            // Initialize LLJTran and Read the entire Image including Appx markers
                            LLJTran llj = new LLJTran(wildLogFile.getAbsolutePath().toFile());
                            // If you pass the 2nd parameter as false, Exif information is not loaded and hence will not be written.
                            llj.read(LLJTran.READ_ALL, true);
                            // Transform the image using default options along with transformation of the Orientation tags.
                            int options = LLJTran.OPT_DEFAULTS | LLJTran.OPT_XFORM_ORIENTATION;
                            llj.transform(LLJTran.ROT_90, options);
                            // Save the Vertical mirror of the Transformed image without Exif header.
                            if (!Files.exists(WildLogPaths.WILDLOG_TEMP.getAbsoluteFullPath())) {
                                Files.createDirectories(WildLogPaths.WILDLOG_TEMP.getAbsoluteFullPath());
                            }
                            OutputStream out = new BufferedOutputStream(new FileOutputStream(WildLogPaths.WILDLOG_TEMP.getAbsoluteFullPath().resolve("vmirror.jpg").toFile()));
                            // Turn off OPT_WRITE_APPXS flag to Skip writing Exif.
                            options = LLJTran.OPT_DEFAULTS & ~LLJTran.OPT_WRITE_APPXS;
                            // Save with vertical transformation without changing the llj image.
                            llj.transform(out, LLJTran.FLIP_V, options);
                            out.close();
                            // Get a new name for the file (because if the same name is used the ImageIcons don't get refreshed if they have been viewed already since Java chaches them)
                            WildLogFile newWildLogFile = new WildLogFile(wildLogFile.getId(), wildLogFile.getFilename(), wildLogFile.getDBFilePath(), wildLogFile.getFileType());
                            newWildLogFile.setDefaultFile(wildLogFile.isDefaultFile());
                            while (Files.exists(newWildLogFile.getAbsolutePath())) {
                                String newFilename = wildLogFile.getRelativePath().getFileName().toString();
                                newFilename = newFilename.substring(0, newFilename.lastIndexOf('.')) + "_r.jpg";
                                newWildLogFile.setDBFilePath(newWildLogFile.getRelativePath().getParent().resolve(newFilename).toString());
                            }
                            // Save the Image which is already transformed as specified by the input transformation earlier, along with the Exif header.
                            out = new BufferedOutputStream(new FileOutputStream(newWildLogFile.getAbsolutePath().toFile()));
                            llj.save(out, LLJTran.OPT_WRITE_ALL);
                            out.close();
                            // Delete old DB file enrty and save new one
                            app.getDBI().delete(wildLogFile);
                            app.getDBI().createOrUpdate(newWildLogFile, false);
                            // Cleanup
                            llj.freeMemory();
                            // Reload the image
                            oldPreloadedImages.remove(wildLogFile.getAbsolutePath().toString());
                            setupFile(app.getDBI().list(newWildLogFile));
                            // Recreate the thumbnails
                            for (WildLogThumbnailSizes size : WildLogThumbnailSizes.values()) {
                                newWildLogFile.getAbsoluteThumbnailPath(size);
                            }
                        }
                        catch (LLJTranException | IOException ex) {
                            ex.printStackTrace(System.err);
                        }
                        finally {
                            app.getMainFrame().getGlassPane().setCursor(Cursor.getDefaultCursor());
                            app.getMainFrame().getGlassPane().setVisible(false);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnRotateActionPerformed

    private void btnViewEXIFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEXIFActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsDialog.showExifPopup(tempLocation.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsDialog.showExifPopup(tempElement.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsDialog.showExifPopup(tempVisit.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                SightingWrapper tempSightingWrapper = (SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsDialog.showExifPopup(tempSightingWrapper.getSighting().getWildLogFileID(), imageIndex, app);
            }
        }
    }//GEN-LAST:event_btnViewEXIFActionPerformed

    private void btnViewImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewImageActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsFileProcessing.openFile(tempLocation.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsFileProcessing.openFile(tempElement.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsFileProcessing.openFile(tempVisit.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                SightingWrapper tempSightingWrapper = (SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsFileProcessing.openFile(tempSightingWrapper.getSighting().getWildLogFileID(), imageIndex, app);
            }
        }
    }//GEN-LAST:event_btnViewImageActionPerformed

    private void btnRefreshDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDatesActionPerformed
        if (rdbBrowseDate.isSelected()) {
            rdbBrowseDateItemStateChanged(null);
        }
        else
        // 'n "Klein hack" om te kry dat die dropdown reg wys... Dit het skielik begin verkeer resize (dalk die NB 7.3 upgrade of die nuwe JDK...)
        if (rdbBrowseElement.isSelected()) {
            cmbElementTypesBrowseTabActionPerformed(null);
        }
    }//GEN-LAST:event_btnRefreshDatesActionPerformed

    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed
        imgBrowsePhotos.setScale(imgBrowsePhotos.getScale()/1.5);
    }//GEN-LAST:event_btnZoomOutActionPerformed

    private void btnDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                imageIndex = UtilsImageProcessing.setMainImage(tempLocation.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                imageIndex = UtilsImageProcessing.setMainImage(tempElement.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                imageIndex = UtilsImageProcessing.setMainImage(tempVisit.getWildLogFileID(), imageIndex, app);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                SightingWrapper tempSightingWrapper = (SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                imageIndex = UtilsImageProcessing.setMainImage(tempSightingWrapper.getSighting().getWildLogFileID(), imageIndex, app);
            }
            imageIndex--;
            btnBrowseNextActionPerformed(evt);
        }
    }//GEN-LAST:event_btnDefaultActionPerformed

    private void btnBrowseNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseNextActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempLocation.getWildLogFileID()));
                loadNextFile(fotos);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempElement.getWildLogFileID()));
                loadNextFile(fotos);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempVisit.getWildLogFileID()));
                loadNextFile(fotos);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                Sighting tempSighting = ((SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject()).getSighting();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempSighting.getWildLogFileID()));
                loadNextFile(fotos);
            }
        }
    }//GEN-LAST:event_btnBrowseNextActionPerformed

    private void btnBrowsePrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowsePrevActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempLocation.getWildLogFileID()));
                loadPrevFile(fotos);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempElement.getWildLogFileID()));
                loadPrevFile(fotos);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempVisit.getWildLogFileID()));
                loadPrevFile(fotos);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                Sighting tempSighting = ((SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject()).getSighting();
                List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(tempSighting.getWildLogFileID()));
                loadPrevFile(fotos);
            }
        }
    }//GEN-LAST:event_btnBrowsePrevActionPerformed

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed
        imgBrowsePhotos.setScale(imgBrowsePhotos.getScale()*1.5);
    }//GEN-LAST:event_btnZoomInActionPerformed

    private void btnGoBrowseSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBrowseSelectionActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsPanelGenerator.openPanelAsTab(app, tempLocation.getName(), PanelCanSetupHeader.TabTypes.LOCATION, tabbedPanel, null);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsPanelGenerator.openPanelAsTab(app, tempElement.getPrimaryName(), PanelCanSetupHeader.TabTypes.ELEMENT, tabbedPanel, null);
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                UtilsPanelGenerator.openPanelAsTab(app, tempVisit.getName(), PanelCanSetupHeader.TabTypes.VISIT, tabbedPanel,
                    app.getDBI().find(new Location(tempVisit.getLocationName())));
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                Sighting tempSighting = ((SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject()).getSighting();
                PanelSighting dialog = new PanelSighting(
                    app, app.getMainFrame(), "Edit an Existing Sighting",
                    tempSighting,
                    app.getDBI().find(new Location(tempSighting.getLocationName())),
                    app.getDBI().find(new Visit(tempSighting.getVisitName())),
                    app.getDBI().find(new Element(tempSighting.getElementName())),
                    this,
                    false, false, false);
                dialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnGoBrowseSelectionActionPerformed

    private void treBrowsePhotoValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treBrowsePhotoValueChanged
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            imageIndex = 0;
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof DataObjectWithHTML
                && ((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof DataObjectWithWildLogFile) {
                txtBrowseInfo.setText(((DataObjectWithHTML)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject())
                    .toHTML(false, false, app, UtilsHTMLExportTypes.ForHTML, null)
                    .replace("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>", ""));
                List<WildLogFile> fotos = app.getDBI().list(
                    new WildLogFile(((DataObjectWithWildLogFile)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject())
                        .getWildLogFileID()));
                setupFile(fotos);
                if ((DataObjectWithWildLogFile)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                    btnSetDefaultElementImage.setEnabled(true);
                    btnSetDefaultLocationImage.setEnabled(true);
                    btnSetDefaultVisitImage.setEnabled(true);
                }
                else
                if ((DataObjectWithWildLogFile)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                    btnSetDefaultElementImage.setEnabled(false);
                    btnSetDefaultLocationImage.setEnabled(true);
                    btnSetDefaultVisitImage.setEnabled(false);
                }
                else {
                    btnSetDefaultElementImage.setEnabled(false);
                    btnSetDefaultLocationImage.setEnabled(false);
                    btnSetDefaultVisitImage.setEnabled(false);
                }
            }
            else {
                txtBrowseInfo.setText("<html><div style='font-size:9px;font-family:verdana;'><i>"
                        + "Select one of the categories to the left to browse by. "
                        + "<br><br>Left-click on a tree node to select it. "
                        + "<br><br>Right-click on a tree node for additional options. "
                        + "<br><br>Double-click or click the +/- icons to expand/collapse the tree node."
                        + "</i></div></html>");
                setupFile(null);
                btnSetDefaultElementImage.setEnabled(false);
                btnSetDefaultLocationImage.setEnabled(false);
                btnSetDefaultVisitImage.setEnabled(false);
            }
            // Maak paar display issues reg
            txtBrowseInfo.getCaret().setDot(0);
        }
        else {
            btnSetDefaultElementImage.setEnabled(false);
            btnSetDefaultLocationImage.setEnabled(false);
            btnSetDefaultVisitImage.setEnabled(false);
        }
    }//GEN-LAST:event_treBrowsePhotoValueChanged

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if (!rdbBrowseElement.isSelected() && !rdbBrowseLocation.isSelected() && !rdbBrowseDate.isSelected()) {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Please select a category above to browse...");
            treBrowsePhoto.setModel(new DefaultTreeModel(root));
            treBrowsePhoto.setSelectionRow(0);
            dtpStartDate.setVisible(false);
            dtpEndDate.setVisible(false);
            btnRefreshDates.setVisible(false);
            cmbElementTypesBrowseTab.setVisible(false);
        }
        else {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Loading...");
            treBrowsePhoto.setModel(new DefaultTreeModel(root));
            btnRefreshBrowseTreeActionPerformed(null);
        }
        // Expand tree nodes
        if (previousExpandedTreeNodes != null) {
            while (previousExpandedTreeNodes.hasMoreElements()) {
                TreePath expandedTreePath = previousExpandedTreeNodes.nextElement();
                for (Object object : expandedTreePath.getPath()) {
                    DefaultMutableTreeNode expandedNode = (DefaultMutableTreeNode) object;
                    for (int t = 0; t < treBrowsePhoto.getRowCount(); t++) {
                        TreePath tempTreePath = treBrowsePhoto.getPathForRow(t);
                        DefaultMutableTreeNode tempNode = (DefaultMutableTreeNode) tempTreePath.getLastPathComponent();
                        if (tempNode.getLevel() == expandedNode.getLevel()) {
                            if (tempNode.getUserObject().toString().equals(expandedNode.getUserObject().toString())) {
                                treBrowsePhoto.expandPath(tempTreePath);
                            }
                        }
                    }
                }
            }
        }
        // Select tree node
        if (previousSelectedTreeNode != null) {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) previousSelectedTreeNode.getLastPathComponent();
            for (int t = 0; t < treBrowsePhoto.getRowCount(); t++) {
                TreePath tempTreePath = treBrowsePhoto.getPathForRow(t);
                DefaultMutableTreeNode tempNode = (DefaultMutableTreeNode) tempTreePath.getLastPathComponent();
                if (tempNode.getLevel() == selectedNode.getLevel()) {
                    if (tempNode.getUserObject().toString().equals(selectedNode.getUserObject().toString())) {
                        treBrowsePhoto.setSelectionPath(tempTreePath);
                    }
                }
            }
        }
    }//GEN-LAST:event_formComponentShown

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        previousExpandedTreeNodes = treBrowsePhoto.getExpandedDescendants(treBrowsePhoto.getPathForRow(0));
        previousSelectedTreeNode = treBrowsePhoto.getSelectionPath();
    }//GEN-LAST:event_formComponentHidden

    private void treBrowsePhotoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treBrowsePhotoMouseReleased
        if (evt.isPopupTrigger() && (rdbBrowseElement.isSelected() || rdbBrowseLocation.isSelected() || rdbBrowseDate.isSelected())) {
            treBrowsePhoto.setSelectionPath(treBrowsePhoto.getPathForLocation(evt.getX(), evt.getY()));
            JPopupMenu popup = new JPopupMenu();
            // View
            JMenuItem mnuView = new JMenuItem("View",
                    UtilsImageProcessing.getScaledIcon(WildLogApp.class.getResource("resources/icons/WildLog Icon.gif"), WildLogThumbnailSizes.VERY_TINY.getSize()));
            mnuView.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    btnGoBrowseSelectionActionPerformed(null);
                }
            });
            popup.add(mnuView);
            // Map
            JMenuItem mnuMap = new JMenuItem("Map",
                    UtilsImageProcessing.getScaledIcon(WildLogApp.class.getResource("resources/icons/Map_Small.gif"), WildLogThumbnailSizes.VERY_TINY.getSize()));
            mnuMap.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                            Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            MappingDialog mappingDialog = new MappingDialog(app, tempLocation, null, null, null);
                            mappingDialog.setVisible(true);
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                            Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            MappingDialog mappingDialog = new MappingDialog(app, null, tempElement, null, null);
                            mappingDialog.setVisible(true);
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                            Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            MappingDialog mappingDialog = new MappingDialog(app, null, null, tempVisit, null);
                            mappingDialog.setVisible(true);
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                            Sighting tempSighting = ((SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject()).getSighting();
                            MappingDialog mappingDialog = new MappingDialog(app, null, null, null, tempSighting);
                            mappingDialog.setVisible(true);
                        }
                    }
                }
            });
            popup.add(mnuMap);
            // Report
            JMenuItem mnuReport = new JMenuItem("Report",
                    UtilsImageProcessing.getScaledIcon(WildLogApp.class.getResource("resources/icons/Report_Small.gif"), WildLogThumbnailSizes.VERY_TINY.getSize()));
            mnuReport.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    boolean somethingToReportOn = false;
                    if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                            Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            ReportingDialog dialog = new ReportingDialog(app, tempLocation, null, null, null, null);
                            dialog.setVisible(true);
                            somethingToReportOn = true;
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                            Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            ReportingDialog dialog = new ReportingDialog(app, null, tempElement, null, null, null);
                            dialog.setVisible(true);
                            somethingToReportOn = true;
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                            Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            ReportingDialog dialog = new ReportingDialog(app, null, null, tempVisit, null, null);
                            dialog.setVisible(true);
                            somethingToReportOn = true;
                        }
                    }
                    if (rdbBrowseDate.isSelected() && dtpStartDate.getDate() != null && dtpEndDate.getDate() != null) {
                        ReportingDialog dialog = new ReportingDialog(app, null, null, null, dtpStartDate.getDate(), dtpEndDate.getDate());
                        dialog.setVisible(true);
                        somethingToReportOn = true;
                    }
                    if (somethingToReportOn == false) {
                        UtilsDialog.showDialogBackgroundWrapper(app.getMainFrame(), new UtilsDialog.DialogWrapper() {
                            @Override
                            public int showDialog() {
                                return JOptionPane.showConfirmDialog(app.getMainFrame(),
                                    "Please select a Place, Period or Creature in the tree to the left, or specifiy a valid date range.",
                                    "No Report Available",
                                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                            }
                        });
                    }
                }
            });
            popup.add(mnuReport);
            // Export
            JMenuItem mnuExport = new JMenuItem("Export",
                    UtilsImageProcessing.getScaledIcon(WildLogApp.class.getResource("resources/icons/HTML Icon.gif"), WildLogThumbnailSizes.VERY_TINY.getSize()));
            mnuExport.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Location) {
                            Location tempLocation = (Location)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            ExportDialog exportDialog = new ExportDialog(app, tempLocation, null, null, null);
                            exportDialog.setVisible(true);
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Element) {
                            Element tempElement = (Element)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            ExportDialog exportDialog = new ExportDialog(app, null, tempElement, null, null);
                            exportDialog.setVisible(true);
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                            Visit tempVisit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                            ExportDialog exportDialog = new ExportDialog(app, null, null, tempVisit, null);
                            exportDialog.setVisible(true);
                        }
                        else
                        if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                            Sighting tempSighting = ((SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject()).getSighting();
                            ExportDialog exportDialog = new ExportDialog(app, null, null, null, tempSighting);
                            exportDialog.setVisible(true);
                        }
                    }
                }
            });
            popup.add(mnuExport);
            // Wrap up and show up the popup
            popup.pack();
            popup.show(evt.getComponent(), evt.getPoint().x, evt.getPoint().y);
            popup.setVisible(true);
        }
    }//GEN-LAST:event_treBrowsePhotoMouseReleased

    private void treBrowsePhotoTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_treBrowsePhotoTreeExpanded
        // Hierdie werk nie lekker met die browse button op die panels nie want die expand baie nodes op 'n slag...
//        // Re-setup the file to load the catch again for the new rows
//        List<WildLogFile> fotos = app.getDBI().list(
//            new WildLogFile(((DataObjectWithWildLogFile)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject())
//                .getWildLogFileID()));
//        setupFile(fotos);
    }//GEN-LAST:event_treBrowsePhotoTreeExpanded

    private void treBrowsePhotoTreeCollapsed(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_treBrowsePhotoTreeCollapsed
        // Hierdie werk nie lekker met die browse button op die panels nie want die expand baie nodes op 'n slag...
//        // Re-setup the file to load the catch again for the new rows
//        List<WildLogFile> fotos = app.getDBI().list(
//            new WildLogFile(((DataObjectWithWildLogFile)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject())
//                .getWildLogFileID()));
//        setupFile(fotos);
    }//GEN-LAST:event_treBrowsePhotoTreeCollapsed

    private void btnSetDefaultElementImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDefaultElementImageActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                SightingWrapper sightingWrapper = (SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> listWildLogFile = app.getDBI().list(new WildLogFile(sightingWrapper.getWildLogFileID()));
                if (listWildLogFile != null && !listWildLogFile.isEmpty() && listWildLogFile.size() > imageIndex) {
                    WildLogFile wildLogFile = listWildLogFile.get(imageIndex);
                    if (WildLogFileType.IMAGE.equals(wildLogFile.getFileType()) && WildLogFileExtentions.Images.isJPG(wildLogFile.getAbsolutePath())) {
                        List<WildLogFile> files = app.getDBI().list(new WildLogFile(Element.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getElementName()));
                        for (WildLogFile tempFile : files) {
                            tempFile.setDefaultFile(false);
                            app.getDBI().createOrUpdate(tempFile, true);
                        }
                        UtilsFileProcessing.performFileUpload(
                            Element.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getElementName(),
                            WildLogPaths.WildLogPathPrefixes.PREFIX_ELEMENT.toPath().resolve(sightingWrapper.getSighting().getElementName()),
                            new File[] {wildLogFile.getAbsolutePath().toFile()},
                            null,
                            WildLogThumbnailSizes.NORMAL,
                            app, true, null, true);
                        WildLogFile newWildLogFile = app.getDBI().find(new WildLogFile(
                                Element.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getElementName(), wildLogFile.getFilename(),
                                WildLogPaths.WILDLOG_FILES_IMAGES.getRelativePath().resolve(
                                    WildLogPaths.WildLogPathPrefixes.PREFIX_ELEMENT.toPath().resolve(sightingWrapper.getSighting().getElementName())
                                    .resolve(wildLogFile.getFilename())).toString(),
                                WildLogFileType.IMAGE));
                        newWildLogFile.setDefaultFile(true);
                        app.getDBI().createOrUpdate(newWildLogFile, true);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSetDefaultElementImageActionPerformed

    private void btnSetDefaultLocationImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDefaultLocationImageActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                SightingWrapper sightingWrapper = (SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> listWildLogFile = app.getDBI().list(new WildLogFile(sightingWrapper.getWildLogFileID()));
                if (listWildLogFile != null && !listWildLogFile.isEmpty() && listWildLogFile.size() > imageIndex) {
                    WildLogFile wildLogFile = listWildLogFile.get(imageIndex);
                    if (WildLogFileType.IMAGE.equals(wildLogFile.getFileType()) && WildLogFileExtentions.Images.isJPG(wildLogFile.getAbsolutePath())) {
                        List<WildLogFile> files = app.getDBI().list(new WildLogFile(Location.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getLocationName()));
                        for (WildLogFile tempFile : files) {
                            tempFile.setDefaultFile(false);
                            app.getDBI().createOrUpdate(tempFile, true);
                        }
                        UtilsFileProcessing.performFileUpload(
                            Location.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getLocationName(),
                            WildLogPaths.WildLogPathPrefixes.PREFIX_LOCATION.toPath().resolve(sightingWrapper.getSighting().getLocationName()),
                            new File[] {wildLogFile.getAbsolutePath().toFile()},
                            null,
                            WildLogThumbnailSizes.NORMAL,
                            app, true, null, true);
                        WildLogFile newWildLogFile = app.getDBI().find(new WildLogFile(
                                Location.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getLocationName(), wildLogFile.getFilename(),
                                WildLogPaths.WILDLOG_FILES_IMAGES.getRelativePath().resolve(
                                    WildLogPaths.WildLogPathPrefixes.PREFIX_LOCATION.toPath().resolve(sightingWrapper.getSighting().getLocationName())
                                    .resolve(wildLogFile.getFilename())).toString(),
                                WildLogFileType.IMAGE));
                        newWildLogFile.setDefaultFile(true);
                        app.getDBI().createOrUpdate(newWildLogFile, true);
                    }
                }
            }
            else
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof Visit) {
                Visit visit = (Visit)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> listWildLogFile = app.getDBI().list(new WildLogFile(visit.getWildLogFileID()));
                if (listWildLogFile != null && !listWildLogFile.isEmpty() && listWildLogFile.size() > imageIndex) {
                    WildLogFile wildLogFile = listWildLogFile.get(imageIndex);
                    if (WildLogFileType.IMAGE.equals(wildLogFile.getFileType()) && WildLogFileExtentions.Images.isJPG(wildLogFile.getAbsolutePath())) {
                        List<WildLogFile> files = app.getDBI().list(new WildLogFile(Location.WILDLOGFILE_ID_PREFIX + visit.getLocationName()));
                        for (WildLogFile tempFile : files) {
                            tempFile.setDefaultFile(false);
                            app.getDBI().createOrUpdate(tempFile, true);
                        }
                        UtilsFileProcessing.performFileUpload(
                            Location.WILDLOGFILE_ID_PREFIX + visit.getLocationName(),
                            WildLogPaths.WildLogPathPrefixes.PREFIX_LOCATION.toPath().resolve(visit.getLocationName()),
                            new File[] {wildLogFile.getAbsolutePath().toFile()},
                            null,
                            WildLogThumbnailSizes.NORMAL,
                            app, true, null, true);
                        WildLogFile newWildLogFile = app.getDBI().find(new WildLogFile(
                                Location.WILDLOGFILE_ID_PREFIX + visit.getLocationName(), wildLogFile.getFilename(),
                                WildLogPaths.WILDLOG_FILES_IMAGES.getRelativePath().resolve(
                                    WildLogPaths.WildLogPathPrefixes.PREFIX_LOCATION.toPath().resolve(visit.getLocationName())
                                    .resolve(wildLogFile.getFilename())).toString(),
                                WildLogFileType.IMAGE));
                        newWildLogFile.setDefaultFile(true);
                        app.getDBI().createOrUpdate(newWildLogFile, true);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSetDefaultLocationImageActionPerformed

    private void btnSetDefaultVisitImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetDefaultVisitImageActionPerformed
        if (treBrowsePhoto.getLastSelectedPathComponent() != null) {
            if (((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject() instanceof SightingWrapper) {
                SightingWrapper sightingWrapper = (SightingWrapper)((DefaultMutableTreeNode)treBrowsePhoto.getLastSelectedPathComponent()).getUserObject();
                List<WildLogFile> listWildLogFile = app.getDBI().list(new WildLogFile(sightingWrapper.getWildLogFileID()));
                if (listWildLogFile != null && !listWildLogFile.isEmpty() && listWildLogFile.size() > imageIndex) {
                    WildLogFile wildLogFile = listWildLogFile.get(imageIndex);
                    if (WildLogFileType.IMAGE.equals(wildLogFile.getFileType()) && WildLogFileExtentions.Images.isJPG(wildLogFile.getAbsolutePath())) {
                        List<WildLogFile> files = app.getDBI().list(new WildLogFile(Visit.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getVisitName()));
                        for (WildLogFile tempFile : files) {
                            tempFile.setDefaultFile(false);
                            app.getDBI().createOrUpdate(tempFile, true);
                        }
                        UtilsFileProcessing.performFileUpload(
                            Visit.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getVisitName(),
                            WildLogPaths.WildLogPathPrefixes.PREFIX_VISIT.toPath().resolve(sightingWrapper.getSighting().getVisitName()),
                            new File[] {wildLogFile.getAbsolutePath().toFile()},
                            null,
                            WildLogThumbnailSizes.NORMAL,
                            app, true, null, true);
                        WildLogFile newWildLogFile = app.getDBI().find(new WildLogFile(
                                Visit.WILDLOGFILE_ID_PREFIX + sightingWrapper.getSighting().getVisitName(), wildLogFile.getFilename(),
                                WildLogPaths.WILDLOG_FILES_IMAGES.getRelativePath().resolve(
                                    WildLogPaths.WildLogPathPrefixes.PREFIX_VISIT.toPath().resolve(sightingWrapper.getSighting().getVisitName())
                                    .resolve(wildLogFile.getFilename())).toString(),
                                WildLogFileType.IMAGE));
                        newWildLogFile.setDefaultFile(true);
                        app.getDBI().createOrUpdate(newWildLogFile, true);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSetDefaultVisitImageActionPerformed

    private void browseByLocation() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("WildLog");
        // Need to wrap in ArrayList because of java.lang.UnsupportedOperationException
        List<Location> locations = new ArrayList<Location>(app.getDBI().list(new Location()));
        Collections.sort(locations);
        for (Location tempLocation : locations) {
            DefaultMutableTreeNode tempLocationNode = new DefaultMutableTreeNode(tempLocation);
            root.add(tempLocationNode);
            Visit temp = new Visit();
            temp.setLocationName(tempLocation.getName());
            List<Visit> visits = app.getDBI().list(temp);
            Collections.sort(visits);
            for (Visit tempVisit : visits) {
                DefaultMutableTreeNode tempVisitNode = new DefaultMutableTreeNode(tempVisit);
                tempLocationNode.add(tempVisitNode);
                Sighting tempSi = new Sighting();
                tempSi.setVisitName(tempVisit.getName());
                List<Sighting> sightings = app.getDBI().list(tempSi);
                Collections.sort(sightings);
                for (Sighting tempSighting : sightings) {
                    DefaultMutableTreeNode tempSightingNode = new DefaultMutableTreeNode(new SightingWrapper(tempSighting, true));
                    tempVisitNode.add(tempSightingNode);
                    tempSightingNode.add(new DefaultMutableTreeNode(app.getDBI().find(new Element(tempSighting.getElementName()))));
                }
            }
        }
        treBrowsePhoto.setModel(new DefaultTreeModel(root));
    }

    private void browseByElement() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("WildLog");
        if (searchElementBrowseTab == null) {
            searchElementBrowseTab = new Element();
        }
        // Need to wrap in ArrayList because of java.lang.UnsupportedOperationException
        if (ElementType.NONE.equals(searchElementBrowseTab.getType())) {
            searchElementBrowseTab.setType(null);
        }
        List<Element> elements = new ArrayList<Element>(app.getDBI().list(searchElementBrowseTab));
        Collections.sort(elements);
        for (Element tempElement : elements) {
            DefaultMutableTreeNode tempElementNode = new DefaultMutableTreeNode(tempElement);
            root.add(tempElementNode);
            Sighting templateSighting = new Sighting();
            templateSighting.setElementName(tempElement.getPrimaryName());
            // Need to wrap in ArrayList because of java.lang.UnsupportedOperationException
            List<Sighting> sightings = new ArrayList<Sighting>(app.getDBI().list(templateSighting));
            Collections.sort(sightings);
            for (Sighting tempSighting : sightings) {
                DefaultMutableTreeNode tempSightingNode = new DefaultMutableTreeNode(new SightingWrapper(tempSighting, false));
                tempElementNode.add(tempSightingNode);
                // Add Location and Element under the sighting node
                tempSightingNode.add(new DefaultMutableTreeNode(app.getDBI().find(new Location(tempSighting.getLocationName()))));
                tempSightingNode.add(new DefaultMutableTreeNode(app.getDBI().find(new Visit(tempSighting.getVisitName()))));
            }
        }
        treBrowsePhoto.setModel(new DefaultTreeModel(root));
    }

    private void browseByDate() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("WildLog");
        if (dtpStartDate.getDate() != null && dtpEndDate.getDate() != null) {
            // Need to wrap in ArrayList because of java.lang.UnsupportedOperationException
            List<Sighting> sightings = new ArrayList<Sighting>(app.getDBI().searchSightingOnDate(dtpStartDate.getDate(), dtpEndDate.getDate(), Sighting.class));
            Collections.sort(sightings);
            for (Sighting tempSighting : sightings) {
                DefaultMutableTreeNode tempSightingNode = new DefaultMutableTreeNode(new SightingWrapper(tempSighting, true));
                root.add(tempSightingNode);
                DefaultMutableTreeNode tempLocationNode = new DefaultMutableTreeNode(app.getDBI().find(new Location(tempSighting.getLocationName())));
                tempSightingNode.add(tempLocationNode);
                DefaultMutableTreeNode tempElementNode = new DefaultMutableTreeNode(app.getDBI().find(new Element(tempSighting.getElementName())));
                tempSightingNode.add(tempElementNode);
            }
        }
        else {
            root.add(new DefaultMutableTreeNode("Please select dates first"));
        }
        treBrowsePhoto.setModel(new DefaultTreeModel(root));
    }

    private void loadPrevFile(List<WildLogFile> inFotos) {
        if (inFotos.size() > imageIndex) {
            imageIndex--;
            if (imageIndex < 0) {
                Toolkit.getDefaultToolkit().beep();
                imageIndex = inFotos.size() - 1;
            }
            setupFile(inFotos);
        }
        else {
            noFiles();
        }
    }

    private void loadNextFile(List<WildLogFile> inFotos) {
        if (inFotos.size() > imageIndex) {
            imageIndex++;
            if (imageIndex >= inFotos.size()) {
                Toolkit.getDefaultToolkit().beep();
                imageIndex = 0;
            }
            setupFile(inFotos);
        }
        else {
            noFiles();
        }
    }

    private void noFiles() {
        try {
            imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/NoFile.png"));
            lblNumberOfImages.setText("0 of 0");
            imgBrowsePhotos.setToolTipText("");
        }
        catch (IOException ex) {
            ex.printStackTrace(System.err);
        }
    }

    private void lookupCachedImage(final List<WildLogFile> inFiles) throws IOException {
        executorService = Executors.newFixedThreadPool(app.getThreadCount());
        // Maak die finale grote twee keer groter om te help met die zoom, dan hoef ek nie weer images te load nie, en mens kan altyd dan original kyk vir ful resolution
        int size = (int) imgBrowsePhotos.getSize().getWidth();
        if (size > (int) imgBrowsePhotos.getSize().getHeight()) {
            size = (int) imgBrowsePhotos.getSize().getHeight();
        }
        final int finalSize = size*2;
        final Map<String, Image> newPreloadedImages = new HashMap<>(CACHE_LIMIT_FOR_SELECTED_NODE + CACHE_LIMIT_FOR_NEIGHBOURING_NODES);
        final Object selectedNode = treBrowsePhoto.getLastSelectedPathComponent();
        // 1) Cache die volgende en vorige fotos vir die huidige node.
        if (inFiles != null && !inFiles.isEmpty() && WildLogFileType.IMAGE.equals(inFiles.get(imageIndex).getFileType())) {
            int startIndex = 0;
            if (inFiles.size() > CACHE_LIMIT_FOR_SELECTED_NODE) {
                startIndex = imageIndex - CACHE_LIMIT_FOR_SELECTED_NODE/2;
            }
            if (startIndex < 0) {
                startIndex = 0;
            }
            if (!oldPreloadedImages.containsKey(inFiles.get(imageIndex).getAbsolutePath().toString())) {
                // The image will be loaded, so setup the loading screen so long.
                imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/Loading.png"));
            }
            int t = startIndex;
            for (; t < inFiles.size() && t < startIndex + CACHE_LIMIT_FOR_SELECTED_NODE; t++) {
                final WildLogFile wildLogFile = inFiles.get(t);
                if (WildLogFileType.IMAGE.equals(wildLogFile.getFileType())) {
                    Image tempImage = oldPreloadedImages.get(wildLogFile.getAbsolutePath().toString());
                    if (tempImage != null) {
                        newPreloadedImages.put(wildLogFile.getAbsolutePath().toString(), tempImage);
                        callbackToDoTheImageLoad(tempImage, selectedNode, t);
                    }
                    else {
                        final int tHandle = t;
                        executorService.submit(new Runnable() {
                            @Override
                            public void run() {
                                // TODO: Probeer weg beweeg van ImageIcon want dis baie stadig... 'n JavaFX komponent sal seker goed kan werk.
                                Image tempConcImage = UtilsImageProcessing.getScaledIcon(wildLogFile.getAbsolutePath(), finalSize).getImage();
                                newPreloadedImages.put(wildLogFile.getAbsolutePath().toString(), tempConcImage);
                                callbackToDoTheImageLoad(tempConcImage, selectedNode, tHandle);
                            }
                        });
                    }
                }
            }
            // Kyk of ek dit moet begin wrap
            if (t == inFiles.size() && inFiles.size() > CACHE_LIMIT_FOR_SELECTED_NODE && t < startIndex + CACHE_LIMIT_FOR_SELECTED_NODE) {
                for (int i = 0; i <= startIndex + CACHE_LIMIT_FOR_SELECTED_NODE - t - i; i++) {
                    final WildLogFile wildLogFile = inFiles.get(i);
                    if (WildLogFileType.IMAGE.equals(wildLogFile.getFileType())) {
                        Image tempImage = oldPreloadedImages.get(wildLogFile.getAbsolutePath().toString());
                        if (tempImage != null) {
                            newPreloadedImages.put(wildLogFile.getAbsolutePath().toString(), tempImage);
                            callbackToDoTheImageLoad(tempImage, selectedNode, i);
                        }
                        else {
                            final int iHandle = i;
                            executorService.submit(new Runnable() {
                                @Override
                                public void run() {
                                    Image tempConcImage = UtilsImageProcessing.getScaledIcon(wildLogFile.getAbsolutePath(), finalSize).getImage();
                                    newPreloadedImages.put(wildLogFile.getAbsolutePath().toString(), tempConcImage);
                                    callbackToDoTheImageLoad(tempConcImage, selectedNode, iHandle);
                                }
                            });
                        }
                    }
                }
            }
        }
        // 2) Cache die volgende en vorige node
        final int selectedRow = treBrowsePhoto.getSelectionRows()[0];
        List<Integer> preloadNodeRows = new ArrayList<Integer>(CACHE_LIMIT_FOR_NEIGHBOURING_NODES);
        for (int x = 0; x < (CACHE_LIMIT_FOR_NEIGHBOURING_NODES/2); x++) {
            if ((selectedRow - x - 1) >= 0) {
                preloadNodeRows.add(selectedRow - x - 1);
            }
        }
        for (int y = 0; y <= (CACHE_LIMIT_FOR_NEIGHBOURING_NODES - preloadNodeRows.size()); y++) {
            if ((selectedRow + y + 1) < treBrowsePhoto.getRowCount()) {
                preloadNodeRows.add(selectedRow + y + 1);
            }
        }
        for (int row : preloadNodeRows) {
            final DefaultMutableTreeNode tempNode = (DefaultMutableTreeNode)treBrowsePhoto.getPathForRow(row).getLastPathComponent();
            if (tempNode.getUserObject() instanceof DataObjectWithWildLogFile) {
                final List<WildLogFile> fotos = app.getDBI().list(new WildLogFile(((DataObjectWithWildLogFile)tempNode.getUserObject()).getWildLogFileID()));
                doConcurrentLoad(newPreloadedImages, fotos, 0, tempNode, finalSize);
            }
        }
        // refresh die map
        synchronized (imageCacheLock) {
            oldPreloadedImages.clear();
            oldPreloadedImages = newPreloadedImages;
        }
    }

    private void doConcurrentLoad(final Map<String, Image> inNewPreloadedImages, final List<WildLogFile> inFiles, final int inIndex, final DefaultMutableTreeNode inNode, final int inFinalSize) {
        if (!inFiles.isEmpty()) {
            if (WildLogFileType.IMAGE.equals(inFiles.get(inIndex).getFileType())) {
                Image tempImage = oldPreloadedImages.get(inFiles.get(inIndex).getAbsolutePath().toString());
                if (tempImage != null) {
                    inNewPreloadedImages.put(inFiles.get(inIndex).getAbsolutePath().toString(), tempImage);
                    callbackToDoTheImageLoad(tempImage, inNode, inIndex);
                }
                else {
                    executorService.submit(new Runnable() {
                        @Override
                        public void run() {
                            Image tempConcImage = UtilsImageProcessing.getScaledIcon(inFiles.get(inIndex).getAbsolutePath(), inFinalSize).getImage();
                            inNewPreloadedImages.put(inFiles.get(inIndex).getAbsolutePath().toString(), tempConcImage);
                            callbackToDoTheImageLoad(tempConcImage, inNode, inIndex);
                        }
                    });
                }
            }
        }
    }

    private void setupFile(final List<WildLogFile> inFotos) {
        if (inFotos != null) {
            if (inFotos.size() > 0) {
                try {
                    lblNumberOfImages.setText(imageIndex+1 + " of " + inFotos.size());
                    if (inFotos.get(imageIndex).getFileType().equals(WildLogFileType.IMAGE)) {
                        lookupCachedImage(inFotos);
                    }
                    else
                    if (inFotos.get(imageIndex).getFileType().equals(WildLogFileType.MOVIE)) {
                        imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/Movie.png"));
                        lookupCachedImage(inFotos);
                    }
                    else
                    if (inFotos.get(imageIndex).getFileType().equals(WildLogFileType.OTHER)) {
                        imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/OtherFile.png"));
                        lookupCachedImage(inFotos);
                    }
                }
                catch (IOException ex) {
                    ex.printStackTrace(System.err);
                }
                finally {
                    imgBrowsePhotos.setToolTipText(inFotos.get(imageIndex).getFilename());
                }
            }
            else {
                try {
                    imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/NoFile.png"));
                    lblNumberOfImages.setText("0 of 0");
                    lookupCachedImage(inFotos);
                }
                catch (IOException ex) {
                    ex.printStackTrace(System.err);
                }
                finally {
                    imgBrowsePhotos.setToolTipText("");
                }
            }
        }
        else {
            try {
                imgBrowsePhotos.setImage(app.getClass().getResource("resources/icons/NoFile.png"));
                lblNumberOfImages.setText("");
            }
            catch (IOException ex) {
                ex.printStackTrace(System.err);
            }
            finally {
                imgBrowsePhotos.setToolTipText("");
            }
        }
    }

    private void callbackToDoTheImageLoad(Image inImage, Object inSelectedNode, int inImageIndex) {
        // Only display the image if it is the current active node.
        // (This is to prevent old node's files that finished after the active node from overwriting the displayed image.)
        if (inImageIndex == imageIndex && treBrowsePhoto.getLastSelectedPathComponent() == inSelectedNode) {
            imgBrowsePhotos.setImage(inImage);
            double ratio;
            // Adjust the longest side's size
            int imageWidth = inImage.getWidth(null);
            int imageHeight = inImage.getHeight(null);
            if (imageHeight >= imageWidth) {
                // Portrait image
                if (imageHeight >= imgBrowsePhotos.getHeight()) {
                    ratio = (double)imageHeight/imgBrowsePhotos.getHeight();
                }
                else {
                    ratio = (double)imgBrowsePhotos.getHeight()/imageHeight;
                }
            }
            else {
                // Landscape image
                if (imageWidth >= imgBrowsePhotos.getWidth()) {
                    ratio = (double)imageWidth/imgBrowsePhotos.getWidth();
                }
                else {
                    ratio = (double)imgBrowsePhotos.getWidth()/imageWidth;
                }
            }
            // Check the shortest side's sizes to make sure they also fit into the display size (since it isn't a square)
            imageWidth = (int) (inImage.getWidth(null)/ratio);
            imageHeight = (int) (inImage.getHeight(null)/ratio);
            if (imgBrowsePhotos.getHeight() >= imageWidth) {
                // Portrait image
                if (imageWidth >= imgBrowsePhotos.getWidth()) {
                    ratio = ratio*(double)imageWidth/imgBrowsePhotos.getWidth();
                }
            }
            else {
                // Landscape image
                if (imageHeight >= imgBrowsePhotos.getHeight()) {
                    ratio = ratio*(double)imageHeight/imgBrowsePhotos.getHeight();
                }
            }
            // Adjust the scale of the image to fit
            imgBrowsePhotos.setScale(1/ratio);
        }
    }

    public void browseSelectedElement(final Element inElement) {
        if (inElement != null) {
            rdbBrowseElement.setSelected(true);
            tabbedPanel.setSelectedIndex(1);
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    for (int t = 0; t < treBrowsePhoto.getRowCount()-1; t++) {
                        if (inElement.getPrimaryName().equals(treBrowsePhoto.getPathForRow(t+1).getLastPathComponent().toString())) {
                            treBrowsePhoto.expandPath(treBrowsePhoto.getPathForRow(t+1));
                            treBrowsePhoto.scrollRowToVisible(t+1);
                            treBrowsePhoto.setSelectionPath(treBrowsePhoto.getPathForRow(t+1));
                            break;
                        }
                    }
                }
            });
        }
    }

    public void browseSelectedLocation(final Location inLocation) {
        if (inLocation != null) {
            rdbBrowseLocation.setSelected(true);
            tabbedPanel.setSelectedIndex(1);
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    for (int t = 0; t < treBrowsePhoto.getRowCount()-1; t++) {
                        if (inLocation.getName().equals(treBrowsePhoto.getPathForRow(t+1).getLastPathComponent().toString())) {
                            treBrowsePhoto.expandPath(treBrowsePhoto.getPathForRow(t+1));
                            treBrowsePhoto.scrollRowToVisible(t+1);
                            treBrowsePhoto.setSelectionPath(treBrowsePhoto.getPathForRow(t+1));
                            break;
                        }
                    }
                }
            });
        }
    }

    public void browseSelectedVisit(final Visit inVisit) {
        if (inVisit != null) {
        rdbBrowseLocation.setSelected(true);
        tabbedPanel.setSelectedIndex(1);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                for (int t = 0; t < treBrowsePhoto.getRowCount()-1; t++) {
                if (inVisit.getLocationName().equals(treBrowsePhoto.getPathForRow(t+1).getLastPathComponent().toString())) {
                    treBrowsePhoto.expandPath(treBrowsePhoto.getPathForRow(t+1));
                    final int finalT = t;
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                                for (int i = 0; i < treBrowsePhoto.getModel().getChildCount(treBrowsePhoto.getPathForRow(finalT+2).getLastPathComponent()); i++) {
                                    if (inVisit.getName().equals(treBrowsePhoto.getPathForRow(finalT+i+1).getLastPathComponent().toString())) {
                                        treBrowsePhoto.expandPath(treBrowsePhoto.getPathForRow(finalT+i+1));
                                        treBrowsePhoto.scrollRowToVisible(finalT+i+1);
                                        treBrowsePhoto.setSelectionPath(treBrowsePhoto.getPathForRow(finalT+i+1));
                                        break;
                                    }
                                }
                        }
                    });
                    break;
                }
            }
            }
        });

        }
    }

     @Override
    public void doTheRefresh(Object inIndicator) {
         formComponentShown(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseNext;
    private javax.swing.JButton btnBrowsePrev;
    private javax.swing.JButton btnDefault;
    private javax.swing.JButton btnGoBrowseSelection;
    private javax.swing.JButton btnRefreshBrowseTree;
    private javax.swing.JButton btnRefreshDates;
    private javax.swing.JButton btnRotate;
    private javax.swing.JButton btnSetDefaultElementImage;
    private javax.swing.JButton btnSetDefaultLocationImage;
    private javax.swing.JButton btnSetDefaultVisitImage;
    private javax.swing.JButton btnViewEXIF;
    private javax.swing.JButton btnViewImage;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbElementTypesBrowseTab;
    private org.jdesktop.swingx.JXDatePicker dtpEndDate;
    private org.jdesktop.swingx.JXDatePicker dtpStartDate;
    private org.jdesktop.swingx.JXImageView imgBrowsePhotos;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblNumberOfImages;
    private javax.swing.JRadioButton rdbBrowseDate;
    private javax.swing.JRadioButton rdbBrowseElement;
    private javax.swing.JRadioButton rdbBrowseLocation;
    private javax.swing.JTree treBrowsePhoto;
    private javax.swing.JTextPane txtBrowseInfo;
    // End of variables declaration//GEN-END:variables
}
